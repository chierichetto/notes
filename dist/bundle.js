!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!S[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===b&&T()}(e,n),t&&t(e,n)};var n,o=!0,r="81e58dbeb6ed532dfeb5",i={},a=[],s=[];function l(e){var t=O[e];if(!t)return I;var o=function(o){return t.hot.active?(O[o]?-1===O[o].parents.indexOf(e)&&O[o].parents.push(e):(a=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),a=[]),I(o)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(t){I[e]=t}}};for(var i in I)Object.prototype.hasOwnProperty.call(I,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(o,i,r(i));return o.e=function(e){return"ready"===u&&p("prepare"),b++,I.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===u&&(y[e]||k(e),0===b&&0===v&&T())}},o.t=function(e,t){return 1&t&&(e=o(e)),I.t(e,-2&t)},o}function c(t){var o={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(e,t){if(void 0===e)o._selfAccepted=!0;else if("function"==typeof e)o._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)o._acceptedDependencies[e[n]]=t||function(){};else o._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)o._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)o._declinedDependencies[e[t]]=!0;else o._declinedDependencies[e]=!0},dispose:function(e){o._disposeHandlers.push(e)},addDisposeHandler:function(e){o._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=o._disposeHandlers.indexOf(e);t>=0&&o._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":(h={})[t]=e[t],p("ready");break;case"ready":C(t);break;case"prepare":case"check":case"dispose":case"apply":(g=g||[]).push(t)}},check:x,apply:D,status:function(e){if(!e)return u;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[t]};return n=void 0,o}var d=[],u="idle";function p(e){u=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var f,h,m,g,v=0,b=0,y={},w={},S={};function E(e){return+e+""===e?+e:e}function x(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return o=e,p("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,r=I.p+"03d7f2f-wps-hmr.json";o.open("GET",r,!0),o.timeout=t,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+r+" timed out."));else if(404===o.status)e();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+r+" failed."));else{try{var t=JSON.parse(o.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p(_()?"ready":"idle"),null;w={},y={},S=e.c,m=e.h,p("prepare");var t=new Promise((function(e,t){f={resolve:e,reject:t}}));h={};return k(0),"prepare"===u&&0===b&&0===v&&T(),t}));var t}function k(e){S[e]?(w[e]=!0,v++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=I.p+"03d7f2f-"+e+"-wps-hmr.js",document.head.appendChild(t)}(e)):y[e]=!0}function T(){p("ready");var e=f;if(f=null,e)if(o)Promise.resolve().then((function(){return D(o)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(E(n));e.resolve(t)}}function D(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");return function t(o){var s,l,c,d,u;function f(e){for(var t=[e],n={},o=t.map((function(e){return{chain:[e],id:e}}));o.length>0;){var r=o.pop(),i=r.id,a=r.chain;if((d=O[i])&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var s=0;s<d.parents.length;s++){var l=d.parents[s],c=O[l];if(c){if(c.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([l]),moduleId:i,parentId:l};-1===t.indexOf(l)&&(c.hot._acceptedDependencies[i]?(n[l]||(n[l]=[]),v(n[l],[i])):(delete n[l],t.push(l),o.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function v(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}_();var b={},y=[],w={},x=function(){console.warn("[HMR] unexpected require("+T.moduleId+") to disposed module")};for(var k in h)if(Object.prototype.hasOwnProperty.call(h,k)){var T;u=E(k),T=h[k]?f(u):{type:"disposed",moduleId:k};var D=!1,C=!1,$=!1,N="";switch(T.chain&&(N="\nUpdate propagation: "+T.chain.join(" -> ")),T.type){case"self-declined":o.onDeclined&&o.onDeclined(T),o.ignoreDeclined||(D=new Error("Aborted because of self decline: "+T.moduleId+N));break;case"declined":o.onDeclined&&o.onDeclined(T),o.ignoreDeclined||(D=new Error("Aborted because of declined dependency: "+T.moduleId+" in "+T.parentId+N));break;case"unaccepted":o.onUnaccepted&&o.onUnaccepted(T),o.ignoreUnaccepted||(D=new Error("Aborted because "+u+" is not accepted"+N));break;case"accepted":o.onAccepted&&o.onAccepted(T),C=!0;break;case"disposed":o.onDisposed&&o.onDisposed(T),$=!0;break;default:throw new Error("Unexception type "+T.type)}if(D)return p("abort"),Promise.reject(D);if(C)for(u in w[u]=h[u],v(y,T.outdatedModules),T.outdatedDependencies)Object.prototype.hasOwnProperty.call(T.outdatedDependencies,u)&&(b[u]||(b[u]=[]),v(b[u],T.outdatedDependencies[u]));$&&(v(y,[T.moduleId]),w[u]=x)}var M,P=[];for(l=0;l<y.length;l++)u=y[l],O[u]&&O[u].hot._selfAccepted&&w[u]!==x&&!O[u].hot._selfInvalidated&&P.push({module:u,parents:O[u].parents.slice(),errorHandler:O[u].hot._selfAccepted});p("dispose"),Object.keys(S).forEach((function(e){!1===S[e]&&function(e){delete installedChunks[e]}(e)}));var L,A,H=y.slice();for(;H.length>0;)if(u=H.pop(),d=O[u]){var j={},R=d.hot._disposeHandlers;for(c=0;c<R.length;c++)(s=R[c])(j);for(i[u]=j,d.hot.active=!1,delete O[u],delete b[u],c=0;c<d.children.length;c++){var B=O[d.children[c]];B&&((M=B.parents.indexOf(u))>=0&&B.parents.splice(M,1))}}for(u in b)if(Object.prototype.hasOwnProperty.call(b,u)&&(d=O[u]))for(A=b[u],c=0;c<A.length;c++)L=A[c],(M=d.children.indexOf(L))>=0&&d.children.splice(M,1);p("apply"),void 0!==m&&(r=m,m=void 0);for(u in h=void 0,w)Object.prototype.hasOwnProperty.call(w,u)&&(e[u]=w[u]);var X=null;for(u in b)if(Object.prototype.hasOwnProperty.call(b,u)&&(d=O[u])){A=b[u];var q=[];for(l=0;l<A.length;l++)if(L=A[l],s=d.hot._acceptedDependencies[L]){if(-1!==q.indexOf(s))continue;q.push(s)}for(l=0;l<q.length;l++){s=q[l];try{s(A)}catch(e){o.onErrored&&o.onErrored({type:"accept-errored",moduleId:u,dependencyId:A[l],error:e}),o.ignoreErrored||X||(X=e)}}}for(l=0;l<P.length;l++){var Y=P[l];u=Y.module,a=Y.parents,n=u;try{I(u)}catch(e){if("function"==typeof Y.errorHandler)try{Y.errorHandler(e)}catch(t){o.onErrored&&o.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:t,originalError:e}),o.ignoreErrored||X||(X=t),X||(X=e)}else o.onErrored&&o.onErrored({type:"self-accept-errored",moduleId:u,error:e}),o.ignoreErrored||X||(X=e)}}if(X)return p("fail"),Promise.reject(X);if(g)return t(o).then((function(e){return y.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return p("idle"),new Promise((function(e){e(y)}))}(t=t||{})}function _(){if(g)return h||(h={}),g.forEach(C),g=void 0,!0}function C(t){Object.prototype.hasOwnProperty.call(h,t)||(h[t]=e[t])}var O={};function I(t){if(O[t])return O[t].exports;var n=O[t]={i:t,l:!1,exports:{},hot:c(t),parents:(s=a,a=[],s),children:[]};return e[t].call(n.exports,n,n.exports,l(t)),n.l=!0,n.exports}I.m=e,I.c=O,I.d=function(e,t,n){I.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,t){if(1&t&&(e=I(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)I.d(n,o,function(t){return e[t]}.bind(null,o));return n},I.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(t,"a",t),t},I.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},I.p="",I.h=function(){return r},l(4)(I.s=4)}([function(e,t){const{error:n,info:o,warn:r}=console,i={error:n.bind(console,"⬡ wps:"),info:o.bind(console,"⬡ wps:"),refresh:"Please refresh the page",warn:r.bind(console,"⬡ wps:")},a=()=>{},s={error:a,info:a,warn:a};e.exports=()=>window.webpackPluginServe.silent?s:i},function(e,t,n){(t=n(7)(!1)).push([e.i,"*{margin:0;padding:0;box-sizing:border-box}*::selection{background:#f06d0650}h2{font-weight:300}body{font-family:Jost, 'sans-serif';background:#2f2d2e;color:#f8f8f8;margin:10px}#button-container{position:fixed;right:10px;top:10px;z-index:10}@media screen and (max-width: 480px){#button-container{bottom:10px;top:initial;position:fixed}}.button{background:#048ba8;width:50px;height:50px;border-radius:50%;display:grid;place-items:center;color:white;cursor:pointer;transition:100ms;margin-bottom:1rem}.button:hover{background:#2e4057}#notes{display:block;column-count:4;column-gap:20px;column-fill:auto;column-width:300px;height:calc(100vh - 40px);transition:200ms}@media screen and (max-width: 480px){#notes{column-count:1;height:initial}}.note{display:flex;border-radius:5px;background:#fdf38d;color:#2f2d2e;margin-bottom:20px;break-inside:avoid}.note .note-header{display:flex;align-items:center;justify-content:space-between}.note .note-header i{font-size:1rem;cursor:pointer;color:#2f2d2e}.note .note-header h2{font-size:1rem;font-weight:300}.note .note-header .note-actions{display:flex;align-items:center}.note .note-color-select{display:flex;align-items:center;position:relative;align-self:flex-start}.note .note-color-select ul{list-style-type:none;background:white;padding:5px}.note .note-color-select ul li{height:20px;width:20px;cursor:pointer}.note.sortable-drag{cursor:grabbing}.note.sortable-chosen{cursor:grabbing}.note.sortable-ghost{cursor:grabbing;transform:translateX(10)}.trash-container{position:absolute;z-index:100;right:0;top:0;height:100vh;width:50vw;background:#535353;overflow:auto}.trash-container #trash-header{display:flex;justify-content:space-between;position:sticky;top:0;background:#535353;padding:1rem}.trash-container ul{list-style-type:none;padding:1rem}.trash-container ul li{border-bottom:1px solid #2f2d2e;padding:1rem 0;display:flex;align-items:center}.trash-container ul li .restore{cursor:pointer}.trash-container ul li>div:not(.restore){flex:1;margin-left:10px}.--yellow{background:#fdf38d}.--green{background:#afffa7}.--pink{background:#eab4ff}.--red{background:#ff9696}\n",""]),e.exports=t},function(e,t){e.exports={addCss:e=>{const t=document.createElement("style");t.type="text/css",e.styleSheet?t.styleSheet.cssText=e:t.appendChild(document.createTextNode(e)),document.head.appendChild(t)},addHtml:(e,t)=>{const n=document.createElement("div"),o=[];for(n.innerHTML=e.trim();n.firstChild;)o.push((t||document.body).appendChild(n.firstChild));return o},socketMessage:(e,t)=>{e.addEventListener("message",e=>{const{action:n,data:o={}}=JSON.parse(e.data);t(n,o)})}}},function(e,t,n){e.exports=function(){"use strict";
/*!
   * mustache.js - Logic-less {{mustache}} templates with JavaScript
   * http://github.com/janl/mustache.js
   */var e=Object.prototype.toString,t=Array.isArray||function(t){return"[object Array]"===e.call(t)};function n(e){return"function"==typeof e}function o(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function r(e,t){return null!=e&&"object"==typeof e&&t in e}var i=RegExp.prototype.test,a=/\S/;function s(e){return!function(e,t){return i.call(e,t)}(a,e)}var l={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},c=/\s*/,d=/\s+/,u=/\s*=/,p=/\s*\}/,f=/#|\^|\/|>|\{|&|=|!/;function h(e){this.string=e,this.tail=e,this.pos=0}function m(e,t){this.view=e,this.cache={".":this.view},this.parent=t}function g(){this.templateCache={_cache:{},set:function(e,t){this._cache[e]=t},get:function(e){return this._cache[e]},clear:function(){this._cache={}}}}h.prototype.eos=function(){return""===this.tail},h.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var n=t[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},h.prototype.scanUntil=function(e){var t,n=this.tail.search(e);switch(n){case-1:t=this.tail,this.tail="";break;case 0:t="";break;default:t=this.tail.substring(0,n),this.tail=this.tail.substring(n)}return this.pos+=t.length,t},m.prototype.push=function(e){return new m(e,this)},m.prototype.lookup=function(e){var t,o,i,a=this.cache;if(a.hasOwnProperty(e))t=a[e];else{for(var s,l,c,d=this,u=!1;d;){if(e.indexOf(".")>0)for(s=d.view,l=e.split("."),c=0;null!=s&&c<l.length;)c===l.length-1&&(u=r(s,l[c])||(o=s,i=l[c],null!=o&&"object"!=typeof o&&o.hasOwnProperty&&o.hasOwnProperty(i))),s=s[l[c++]];else s=d.view[e],u=r(d.view,e);if(u){t=s;break}d=d.parent}a[e]=t}return n(t)&&(t=t.call(this.view)),t},g.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},g.prototype.parse=function(e,n){var r=this.templateCache,i=e+":"+(n||v.tags).join(":"),a=void 0!==r,l=a?r.get(i):void 0;return null==l&&(l=function(e,n){if(!e)return[];var r,i,a,l=!1,m=[],g=[],b=[],y=!1,w=!1,S="",E=0;function x(){if(y&&!w)for(;b.length;)delete g[b.pop()];else b=[];y=!1,w=!1}function k(e){if("string"==typeof e&&(e=e.split(d,2)),!t(e)||2!==e.length)throw new Error("Invalid tags: "+e);r=new RegExp(o(e[0])+"\\s*"),i=new RegExp("\\s*"+o(e[1])),a=new RegExp("\\s*"+o("}"+e[1]))}k(n||v.tags);for(var T,D,_,C,O,I,$=new h(e);!$.eos();){if(T=$.pos,_=$.scanUntil(r))for(var N=0,M=_.length;N<M;++N)s(C=_.charAt(N))?(b.push(g.length),S+=C):(w=!0,l=!0,S+=" "),g.push(["text",C,T,T+1]),T+=1,"\n"===C&&(x(),S="",E=0,l=!1);if(!$.scan(r))break;if(y=!0,D=$.scan(f)||"name",$.scan(c),"="===D?(_=$.scanUntil(u),$.scan(u),$.scanUntil(i)):"{"===D?(_=$.scanUntil(a),$.scan(p),$.scanUntil(i),D="&"):_=$.scanUntil(i),!$.scan(i))throw new Error("Unclosed tag at "+$.pos);if(O=">"==D?[D,_,T,$.pos,S,E,l]:[D,_,T,$.pos],E++,g.push(O),"#"===D||"^"===D)m.push(O);else if("/"===D){if(!(I=m.pop()))throw new Error('Unopened section "'+_+'" at '+T);if(I[1]!==_)throw new Error('Unclosed section "'+I[1]+'" at '+T)}else"name"===D||"{"===D||"&"===D?w=!0:"="===D&&k(_)}if(x(),I=m.pop())throw new Error('Unclosed section "'+I[1]+'" at '+$.pos);return function(e){for(var t,n=[],o=n,r=[],i=0,a=e.length;i<a;++i)switch((t=e[i])[0]){case"#":case"^":o.push(t),r.push(t),o=t[4]=[];break;case"/":r.pop()[5]=t[2],o=r.length>0?r[r.length-1][4]:n;break;default:o.push(t)}return n}(function(e){for(var t,n,o=[],r=0,i=e.length;r<i;++r)(t=e[r])&&("text"===t[0]&&n&&"text"===n[0]?(n[1]+=t[1],n[3]=t[3]):(o.push(t),n=t));return o}(g))}(e,n),a&&r.set(i,l)),l},g.prototype.render=function(e,t,n,o){var r=this.parse(e,o),i=t instanceof m?t:new m(t,void 0);return this.renderTokens(r,i,n,e,o)},g.prototype.renderTokens=function(e,t,n,o,r){for(var i,a,s,l="",c=0,d=e.length;c<d;++c)s=void 0,"#"===(a=(i=e[c])[0])?s=this.renderSection(i,t,n,o):"^"===a?s=this.renderInverted(i,t,n,o):">"===a?s=this.renderPartial(i,t,n,r):"&"===a?s=this.unescapedValue(i,t):"name"===a?s=this.escapedValue(i,t):"text"===a&&(s=this.rawValue(i)),void 0!==s&&(l+=s);return l},g.prototype.renderSection=function(e,o,r,i){var a=this,s="",l=o.lookup(e[1]);if(l){if(t(l))for(var c=0,d=l.length;c<d;++c)s+=this.renderTokens(e[4],o.push(l[c]),r,i);else if("object"==typeof l||"string"==typeof l||"number"==typeof l)s+=this.renderTokens(e[4],o.push(l),r,i);else if(n(l)){if("string"!=typeof i)throw new Error("Cannot use higher-order sections without the original template");null!=(l=l.call(o.view,i.slice(e[3],e[5]),(function(e){return a.render(e,o,r)})))&&(s+=l)}else s+=this.renderTokens(e[4],o,r,i);return s}},g.prototype.renderInverted=function(e,n,o,r){var i=n.lookup(e[1]);if(!i||t(i)&&0===i.length)return this.renderTokens(e[4],n,o,r)},g.prototype.indentPartial=function(e,t,n){for(var o=t.replace(/[^ \t]/g,""),r=e.split("\n"),i=0;i<r.length;i++)r[i].length&&(i>0||!n)&&(r[i]=o+r[i]);return r.join("\n")},g.prototype.renderPartial=function(e,t,o,r){if(o){var i=n(o)?o(e[1]):o[e[1]];if(null!=i){var a=e[6],s=e[5],l=e[4],c=i;return 0==s&&l&&(c=this.indentPartial(i,l,a)),this.renderTokens(this.parse(c,r),t,o,c,r)}}},g.prototype.unescapedValue=function(e,t){var n=t.lookup(e[1]);if(null!=n)return n},g.prototype.escapedValue=function(e,t){var n=t.lookup(e[1]);if(null!=n)return v.escape(n)},g.prototype.rawValue=function(e){return e[1]};var v={name:"mustache.js",version:"4.0.1",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(e){b.templateCache=e},get templateCache(){return b.templateCache}},b=new g;return v.clearCache=function(){return b.clearCache()},v.parse=function(e,t){return b.parse(e,t)},v.render=function(e,n,o,r){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+(t(i=e)?"array":typeof i)+'" was given as the first argument for mustache#render(template, view, partials)');var i;return b.render(e,n,o,r)},v.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return l[e]}))},v.Scanner=h,v.Context=m,v.Writer=g,v}()},function(e,t,n){n(15),e.exports=n(8)},function(e,t,n){var o=n(6),r=n(1);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1},a=o(r,i);if(!r.locals||e.hot.invalidate){var s=r.locals;e.hot.accept(1,(function(){"string"==typeof(r=(r=n(1)).__esModule?r.default:r)&&(r=[[e.i,r,""]]),function(e,t){if(!e&&t||e&&!t)return!1;var n;for(n in e)if(e[n]!==t[n])return!1;for(n in t)if(!e[n])return!1;return!0}(s,r.locals)?(s=r.locals,a(r)):e.hot.invalidate()}))}e.hot.dispose((function(){a()})),e.exports=r.locals||{}},function(e,t,n){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},o=[],r=0;r<e.length;r++){var i=e[r],l=t.base?i[0]+t.base:i[0],c=n[l]||0,d="".concat(l," ").concat(c);n[l]=c+1;var u=s(d),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(a[u].references++,a[u].updater(p)):a.push({identifier:d,updater:g(p,t),references:1}),o.push(d)}return o}function c(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=n.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var d,u=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function p(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=u(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function f(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var h=null,m=0;function g(e,t){var n,o,r;if(t.singleton){var i=m++;n=h||(h=c(t)),o=p.bind(null,n,i,!1),r=p.bind(null,n,i,!0)}else n=c(t),o=f.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=s(n[o]);a[r].references--}for(var i=l(e,t),c=0;c<n.length;c++){var d=s(n[c]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}n=i}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(a=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),i=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([r]).join("\n")}var a,s,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){(()=>{const{run:e}=n(9);let t,o="<unknown>";try{t={compress:null,headers:null,historyFallback:!1,hmr:!0,host:null,liveReload:!1,log:{level:"info",prefix:{template:"{{level}}"},name:"webpack-plugin-serve"},open:!1,port:55555,progress:!0,ramdisk:!1,secure:!1,static:"dist",status:!0,address:"[::]:55555",compilerName:null,wpsId:"03d7f2f"}}catch(e){const{log:t}=n(0);t.error("The entry for webpack-plugin-serve was included in your build, but it does not appear that the plugin was. Please check your configuration.")}try{o=n.h()}catch(e){}e(o,t)})()},function(e,t,n){e.exports={run:(e,t)=>{const{address:o,client:r={},progress:i,secure:a,status:s}=t;t.firstInstance=!window.webpackPluginServe,window.webpackPluginServe=window.webpackPluginServe||{compilers:{}},window.webpackPluginServe.silent=!!r.silent;const{ClientSocket:l}=n(10),{replace:c}=n(11),{error:d,info:u,warn:p}=n(0)(),f=new l(r,`${a?"wss":"ws"}://${r.address||o}/wps`),{compilerName:h}=t;if(window.webpackPluginServe.compilers[h]={},window.addEventListener("beforeunload",()=>f.close()),f.addEventListener("message",n=>{const{action:o,data:r={}}=JSON.parse(n.data),{errors:i,hash:a="<?>",warnings:s}=r||{},l=a.slice(0,7),f=t.compilerName?`(Compiler: ${t.compilerName}) `:"",m=window.webpackPluginServe.compilers[h],{wpsId:g}=r;switch(o){case"build":m.done=!1;break;case"connected":u("WebSocket connected "+f);break;case"done":m.done=!0;break;case"problems":r.errors.length&&d(`${f}Build ${l} produced errors:\n`,i),r.warnings.length&&p(`${f}Build ${l} produced warnings:\n`,s);break;case"reload":window.location.reload();break;case"replace":g&&g===t.wpsId&&c(e,a)}}),t.firstInstance){if("minimal"===i){const{init:e}=n(12);e(t,f)}else if(i){const{init:e}=n(13);e(t,f)}if(s){const{init:e}=n(14);e(t,f)}u("Hot Module Replacement is active"),t.liveReload&&u("Live Reload taking precedence over Hot Module Replacement")}}}},function(e,t,n){const{error:o,refresh:r,warn:i}=n(0)(),a=[1008,1011];e.exports={ClientSocket:class{constructor(e,...t){this.args=t,this.attempts=0,this.eventHandlers=[],this.options=e,this.retrying=!1,this.connect()}addEventListener(...e){this.eventHandlers.push(e),this.socket.addEventListener(...e)}close(){this.socket.close()}connect(){if(this.socket&&delete this.socket,this.connecting=!0,this.socket=new WebSocket(...this.args),this.options.retry?this.socket.addEventListener("close",e=>{a.includes(e.code)||(this.retrying||i("The WebSocket was closed and will attempt to reconnect"),this.reconnect())}):this.socket.onclose=()=>i("The client WebSocket was closed. "+r),this.socket.addEventListener("open",()=>{this.attempts=0,this.retrying=!1}),this.eventHandlers.length)for(const[e,t]of this.eventHandlers)this.socket.addEventListener(e,t)}reconnect(){if(this.attempts+=1,this.retrying=!0,this.attempts>10)return o("The WebSocket could not be reconnected. "+r),void(this.retrying=!1);const e=1e3*this.attempts**2;setTimeout(()=>this.connect(this.args),e)}removeEventListener(...e){const[,t]=e;this.eventHandlers=this.eventHandlers.filter(([,e])=>e===t),this.socket.removeEventListener(...e)}}}},function(e,t,n){const{error:o,info:r,refresh:i,warn:a}=n(0)();let s=!0;const l={onUnaccepted(e){a("Change in unaccepted module(s):\n",e),a(e)},onDeclined(e){a("Change in declined module(s):\n",e)},onErrored(e){o("Error in module(s):\n",e)}};e.exports={replace:async(t,n)=>{const{apply:o,check:c,status:d}=e.hot;if(n&&(s=n.includes(t)),!s){const e=d();if("abort"===e||"fail"===e)return void a(`An HMR update was triggered, but ${e}ed. ${i}`);let t;try{t=await c(!1)}catch(e){return}if(!t)return void a("No modules found for replacement. "+i);t=await o(l),t&&(s=!0,r(`Build ${n.slice(0,7)} replaced:\n`,t))}}}},function(e,t,n){const{addCss:o,addHtml:r}=n(2),i="wps-progress-minimal",a=`\n<div id="${i}" class="${i}-hidden">\n  <div id="${i}-bar"></div>\n</div>\n`,s=`\n#${i} {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 4px;\n  width: 100vw;\n  z-index: 2147483645;\n}\n\n#${i}-bar {\n  width: 0%;\n  height: 4px;\n  background-color: rgb(186, 223, 172);\n  transition: width 1s ease-in-out;\n}\n\n.${i}-hidden{\n  display: none;\n}\n`,l=e=>{document.querySelector(`#${i}-bar`).style.width=e+"%"};e.exports={init:(e,t)=>{e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{o(s),r(a)}),t.addEventListener("message",e=>{const{action:t,data:n}=JSON.parse(e.data);if("progress"!==t)return;const o=Math.floor(100*n.percent),r=document.querySelector("#"+i);r.classList.remove(i+"-hidden"),1===n.percent&&setTimeout(()=>(e=>{e.classList.add(i+"-hidden"),setTimeout(()=>l(0),1e3)})(r),5e3),l(o)})}}},function(e,t,n){const{addCss:o,addHtml:r}=n(2),i="wps-progress",a=`\n@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700');\n\n#${i}{\n  width: 200px;\n  height: 200px;\n  position: absolute;\n  right: 5%;\n  top: 5%;\n  transition: opacity .25s ease-in-out;\n  z-index: 2147483645;\n}\n\n#${i}-bg {\n  fill: #282d35;\n}\n\n#${i}-fill {\n  fill: rgba(0, 0, 0, 0);\n  stroke: rgb(186, 223, 172);\n  stroke-dasharray: 219.99078369140625;\n  stroke-dashoffset: -219.99078369140625;\n  stroke-width: 10;\n  transform: rotate(90deg)translate(0px, -80px);\n  transition: stroke-dashoffset 1s;\n}\n\n#${i}-percent {\n  font-family: 'Open Sans';\n  font-size: 18px;\n  fill: #ffffff;\n}\n\n#${i}-percent-value {\n  dominant-baseline: middle;\n  text-anchor: middle;\n}\n\n#${i}-percent-super {\n  fill: #bdc3c7;\n  font-size: .45em;\n  baseline-shift: 10%;\n}\n\n.${i}-noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: default;\n}\n\n@keyframes ${i}-hidden-display {\n\t0% {\n\t\topacity: 1;\n\t\ttransform: scale(1);\n\t\t-webkit-transform: scale(1);\n\t}\n\t99% {\n\t\tdisplay: inline-flex;\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t\t-webkit-transform: scale(0);\n\t}\n\t100% {\n\t\tdisplay: none;\n\t\topacity: 0;\n\t\ttransform: scale(0);\n\t\t-webkit-transform: scale(0);\n\t}\n}\n\n.${i}-hidden {\n  animation: ${i}-hidden-display .3s;\n  animation-fill-mode:forwards;\n  display: inline-flex;\n}\n\n.${i}-hidden-onload {\n  display: none;\n}\n`,s=`\n<svg id="${i}" class="${i}-noselect ${i}-hidden-onload" x="0px" y="0px" viewBox="0 0 80 80">\n  <circle id="${i}-bg" cx="50%" cy="50%" r="35"></circle>\n  <path id="${i}-fill" d="M5,40a35,35 0 1,0 70,0a35,35 0 1,0 -70,0" />\n  <text id="${i}-percent" x="50%" y="51%"><tspan id="${i}-percent-value">0</tspan><tspan id="${i}-percent-super">%</tspan></text>\n</svg>\n`,l=e=>{const t=document.querySelector(`#${i}-percent-value`),n=(100-e)/100*-219.99078369140625;document.querySelector(`#${i}-fill`).setAttribute("style","stroke-dashoffset: "+n),t.innerHTML=e.toString()};e.exports={init:(e,t)=>{e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{o(a),r(s)}),t.addEventListener("message",e=>{const{action:t,data:n}=JSON.parse(e.data);if("progress"!==t)return;const o=Math.floor(100*n.percent),r=document.querySelector("#"+i);r&&(r.classList.remove(i+"-hidden",i+"-hidden-onload"),1===n.percent&&setTimeout(()=>(e=>{e.classList.add(i+"-hidden"),setTimeout(()=>l(0),1e3)})(r),5e3),l(o))})}}},function(e,t,n){const{addCss:o,addHtml:r,socketMessage:i}=n(2),a="wps-status",s=`\n@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700');\n\n#${a} {\n  background: #282d35;\n  border-radius: 0.6em;\n  display: flex;\n  flex-direction: column;\n\tfont-family: 'Open Sans', Helvetica, Arial, sans-serif;\n\tfont-size: 10px;\n  height: 90%;\n  min-height: 20em;\n  left: 50%;\n  opacity: 1;\n  overflow: hidden;\n  padding-bottom: 3em;\n  position: absolute;\n  top: 2rem;\n  transform: translateX(-50%);\n  transition: opacity .25s ease-in-out;\n  width: 95%;\n  z-index: 2147483645;\n}\n\n@keyframes ${a}-hidden-display {\n\t0% {\n\t\topacity: 1;\n\t}\n\t99% {\n\t\tdisplay: inline-flex;\n\t\topacity: 0;\n\t}\n\t100% {\n\t\tdisplay: none;\n\t\topacity: 0;\n\t}\n}\n\n#${a}.${a}-hidden {\n  animation: ${a}-hidden-display .3s;\n  animation-fill-mode:forwards;\n  display: none;\n}\n\n#${a}.${a}-min {\n  animation: minimize 10s;\n  bottom: 2em;\n  cursor: pointer;\n  height: 6em;\n  left: auto;\n  min-height: 6em;\n  padding-bottom: 0;\n  position: absolute;\n  right: 2em;\n  top: auto;\n  transform: none;\n  width: 6em;\n}\n\n#${a}.${a}-min #${a}-beacon {\n  display: block;\n}\n\n#${a}-title {\n  color: #fff;\n  font-size: 1.2em;\n  font-weight: normal;\n  margin: 0;\n  padding: 0.6em 0;\n  text-align: center;\n  width: 100%;\n}\n\n#${a}.${a}-min #${a}-title {\n  display: none;\n}\n\n#${a}-title-errors {\n  color: #ff5f58;\n  font-style: normal;\n  padding-left: 1em;\n}\n\n#${a}-title-warnings {\n  color: #ffbd2e;\n  font-style: normal;\n  padding-left: 1em;\n}\n\n#${a}-problems {\n  overflow-y: auto;\n  padding: 1em 2em;\n}\n\n#${a}-problems pre {\n  color: #ddd;\n  background: #282d35;\n  display: block;\n  font-size: 1.3em;\n\tfont-family: 'Open Sans', Helvetica, Arial, sans-serif;\n  white-space: pre-wrap;\n}\n\n#${a}-problems pre em {\n  background: #ff5f58;\n  border-radius: 0.3em;\n  color: #641e16;\n  font-style: normal;\n  line-height: 3em;\n  margin-right: 0.4em;\n  padding: 0.1em 0.4em;\n  text-transform: uppercase;\n}\n\npre#${a}-warnings em {\n  background: #ffbd2e;\n  color: #3e2723;\n}\n\npre#${a}-success {\n  display: none;\n  text-align: center;\n}\n\npre#${a}-success em {\n  background: #7fb900;\n  color: #004d40;\n}\n\n#${a}-problems.${a}-success #${a}-success {\n  display: block;\n}\n\n#${a}.${a}-min #${a}-problems {\n  display: none;\n}\n\n#${a}-nav {\n  opacity: 0.5;\n  padding: 1.2em;\n  position: absolute;\n}\n\n#${a}.${a}-min #${a}-nav {\n  display: none;\n}\n\n#${a}-nav:hover {\n  opacity: 1;\n}\n\n#${a}-nav div {\n  background: #ff5f58;\n  border-radius: 1.2em;\n  cursor: pointer;\n  display: inline-block;\n  height: 1.2em;\n  position: relative;\n  width: 1.2em;\n}\n\ndiv#${a}-min {\n  background: #ffbd2e;\n  margin-left: 0.8em;\n}\n\n#${a}-beacon {\n  border-radius: 3em;\n  display: none;\n  font-size: 10px;\n  height: 3em;\n  margin: 1.6em auto;\n  position: relative;\n  width: 3em;\n}\n\n#${a}-beacon:before, #${a}-beacon:after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(127,185,0, 0.2);\n  border-radius: 3em;\n  opacity: 0;\n}\n\n#${a}-beacon:before {\n  animation: ${a}-pulse 3s infinite linear;\n  transform: scale(1);\n}\n\n#${a}-beacon:after {\n  animation: ${a}-pulse 3s 2s infinite linear;\n}\n\n\n@keyframes ${a}-pulse {\n  0% {\n    opacity: 0;\n    transform: scale(0.6);\n  }\n  33% {\n    opacity: 1;\n    transform: scale(1);\n  }\n  100% {\n    opacity: 0;\n    transform: scale(1.4);\n  }\n}\n\n#${a}-beacon mark {\n  background: rgba(127, 185, 0, 1);\n  border-radius: 100% 100%;\n  height: 1em;\n  left: 1em;\n  position: absolute;\n  top: 1em;\n  width: 1em;\n}\n\n#${a}-beacon.${a}-error mark {\n  background: #ff5f58;\n}\n\n#${a}-beacon.${a}-error:before, #${a}-beacon.error:after {\n  background: rgba(255, 95, 88, 0.2);\n}\n\n#${a}-beacon.${a}-warning mark {\n  background: #ffbd2e;\n}\n\n#${a}-beacon.${a}-warning:before, #${a}-beacon.warning:after {\n  background: rgba(255, 189, 46, 0.2);\n}\n`,l=`\n<aside id="${a}" class="${a}-hidden" title="build status">\n  <figure id="${a}-beacon">\n    <mark/>\n  </figure>\n  <nav id="${a}-nav">\n    <div id="${a}-close" title="close"></div>\n    <div id="${a}-min" title="minmize"></div>\n  </nav>\n  <h1 id="${a}-title">\n    build status\n    <em id="${a}-title-errors"></em>\n    <em id="${a}-title-warnings"></em>\n  </h1>\n  <article id="${a}-problems">\n    <pre id="${a}-success"><em>Build Successful</em></pre>\n    <pre id="${a}-errors"></pre>\n    <pre id="${a}-warnings"></pre>\n  </article>\n</aside>\n`;e.exports={init:(e,t)=>{const n=a+"-hidden";let c,d,u,p,f,h,m,g=!1;const v=()=>{p.innerHTML="",f.innerHTML="",u.classList.remove(a+"-success"),d.className="",h.innerText="",m.innerText=""};e.firstInstance&&document.addEventListener("DOMContentLoaded",()=>{o(s),[c]=r(l),d=document.querySelector(`#${a}-beacon`),u=document.querySelector(`#${a}-problems`),p=document.querySelector(`#${a}-errors`),f=document.querySelector(`#${a}-warnings`),h=document.querySelector(`#${a}-title-errors`),m=document.querySelector(`#${a}-title-warnings`);const e=document.querySelector(`#${a}-close`),t=document.querySelector(`#${a}-min`);c.addEventListener("click",()=>{c.classList.remove(a+"-min")}),e.addEventListener("click",()=>{c.classList.add(a+"-hidden")}),t.addEventListener("click",e=>{c.classList.add(a+"-min"),e.stopImmediatePropagation()})}),i(t,(e,t)=>{if(!c)return;const{compilers:o}=window.webpackPluginServe;switch(e){case"build":v();break;case"problems":(e=>{if(e.length){u.classList.remove(a+"-success"),d.classList.add(a+"-error");for(const t of e){r(`<div><em>Error</em> in ${t}</div>`,p)}h.innerText=e.length+" Error(s)"}else h.innerText="";c.classList.remove(n)})(t.errors),(e=>{if(e.length){u.classList.remove(a+"-success"),d.classList.contains(a+"-error")||d.classList.add(a+"-warning");for(const t of e){r(`<div><em>Warning</em> in ${t}</div>`,f)}m.innerText=e.length+" Warning(s)"}else m.innerText="";c.classList.remove(n)})(t.warnings),c.classList.remove(n),g=t.errors.length||t.warnings.length;break;case"replace":for(const e of Object.keys(o))if(!o[e])return;!g||p.children.length||f.children.length||(v(),g=!1,u.classList.add(a+"-success"),c.classList.remove(n),setTimeout(()=>c.classList.add(n),3e3))}})}}},function(e,t,n){"use strict";n.r(t);n(5);var o=n(3),r=Intl.DateTimeFormat,i=function(){function e(){this.deleted=!1}return e.prototype.setId=function(e){this.id=e},e.prototype.setTitle=function(e){this.title=e},e.prototype.setContent=function(e){this.content=e},e.prototype.setStatus=function(e){this.status=e},e.prototype.getId=function(){return this.id},e.prototype.getTitle=function(){return this.title},e.prototype.getContent=function(){return this.content},e.prototype.getStatus=function(){return this.status},e.generateId=function(){return Math.floor(1e8*Math.random())},e.prototype.setColor=function(e){this.color=e},e.prototype.getColor=function(){return this.color},e.prototype.setSortIndex=function(e){this.sortIndex=e},e.prototype.getSortIndex=function(){return this.sortIndex},e.prototype.delete=function(){this.deleted=!0},e.prototype.restore=function(){this.deleted=!1},e.prototype.isDeleted=function(){return!0===this.deleted},e.createNewNote=function(){var t=new e,n=new r("no-NB",e.dateOptions);return t.id=e.generateId(),t.title=n.format(Date.now()),t.content=e.oneLiners[Math.floor(Math.random()*e.oneLiners.length)],t},e.createFromData=function(t){var n=new e;return n.id=t.id,n.title=t.title,n.content=t.content,n.color=t.color,n.sortIndex=t.sortIndex,n.deleted=t.deleted,n},e.oneLiners=['What is the biggest lie in the entire universe? <br>"I have read and agree to the Terms & Conditions."',"How does a computer get drunk? <br>It takes screenshots. ","Have you heard of that new band \"1023 Megabytes\"? They're pretty good, but they don't have a gig just yet.","We'll we'll we'll...if it isn't autocorrect.",'My computer suddenly started belting out "Someone Like You." It\'s a Dell. '],e.dateOptions={year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric"},e}();
/**!
 * Sortable 1.10.2
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){s(e,t,n[t])}))}return e}function d(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function u(e){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(e)}var p=u(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),f=u(/Edge/i),h=u(/firefox/i),m=u(/safari/i)&&!u(/chrome/i)&&!u(/android/i),g=u(/iP(ad|od|hone)/i),v=u(/chrome/i)&&u(/android/i),b={capture:!1,passive:!1};function y(e,t,n){e.addEventListener(t,n,!p&&b)}function w(e,t,n){e.removeEventListener(t,n,!p&&b)}function S(e,t){if(t){if(">"===t[0]&&(t=t.substring(1)),e)try{if(e.matches)return e.matches(t);if(e.msMatchesSelector)return e.msMatchesSelector(t);if(e.webkitMatchesSelector)return e.webkitMatchesSelector(t)}catch(e){return!1}return!1}}function E(e){return e.host&&e!==document&&e.host.nodeType?e.host:e.parentNode}function x(e,t,n,o){if(e){n=n||document;do{if(null!=t&&(">"===t[0]?e.parentNode===n&&S(e,t):S(e,t))||o&&e===n)return e;if(e===n)break}while(e=E(e))}return null}var k,T=/\s+/g;function D(e,t,n){if(e&&t)if(e.classList)e.classList[n?"add":"remove"](t);else{var o=(" "+e.className+" ").replace(T," ").replace(" "+t+" "," ");e.className=(o+(n?" "+t:"")).replace(T," ")}}function _(e,t,n){var o=e&&e.style;if(o){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(e,""):e.currentStyle&&(n=e.currentStyle),void 0===t?n:n[t];t in o||-1!==t.indexOf("webkit")||(t="-webkit-"+t),o[t]=n+("string"==typeof n?"":"px")}}function C(e,t){var n="";if("string"==typeof e)n=e;else do{var o=_(e,"transform");o&&"none"!==o&&(n=o+" "+n)}while(!t&&(e=e.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(n)}function O(e,t,n){if(e){var o=e.getElementsByTagName(t),r=0,i=o.length;if(n)for(;r<i;r++)n(o[r],r);return o}return[]}function I(){var e=document.scrollingElement;return e||document.documentElement}function $(e,t,n,o,r){if(e.getBoundingClientRect||e===window){var i,a,s,l,c,d,u;if(e!==window&&e!==I()?(a=(i=e.getBoundingClientRect()).top,s=i.left,l=i.bottom,c=i.right,d=i.height,u=i.width):(a=0,s=0,l=window.innerHeight,c=window.innerWidth,d=window.innerHeight,u=window.innerWidth),(t||n)&&e!==window&&(r=r||e.parentNode,!p))do{if(r&&r.getBoundingClientRect&&("none"!==_(r,"transform")||n&&"static"!==_(r,"position"))){var f=r.getBoundingClientRect();a-=f.top+parseInt(_(r,"border-top-width")),s-=f.left+parseInt(_(r,"border-left-width")),l=a+i.height,c=s+i.width;break}}while(r=r.parentNode);if(o&&e!==window){var h=C(r||e),m=h&&h.a,g=h&&h.d;h&&(l=(a/=g)+(d/=g),c=(s/=m)+(u/=m))}return{top:a,left:s,bottom:l,right:c,width:u,height:d}}}function N(e,t,n){for(var o=H(e,!0),r=$(e)[t];o;){var i=$(o)[n];if(!("top"===n||"left"===n?r>=i:r<=i))return o;if(o===I())break;o=H(o,!1)}return!1}function M(e,t,n){for(var o=0,r=0,i=e.children;r<i.length;){if("none"!==i[r].style.display&&i[r]!==Be.ghost&&i[r]!==Be.dragged&&x(i[r],n.draggable,e,!1)){if(o===t)return i[r];o++}r++}return null}function P(e,t){for(var n=e.lastElementChild;n&&(n===Be.ghost||"none"===_(n,"display")||t&&!S(n,t));)n=n.previousElementSibling;return n||null}function L(e,t){var n=0;if(!e||!e.parentNode)return-1;for(;e=e.previousElementSibling;)"TEMPLATE"===e.nodeName.toUpperCase()||e===Be.clone||t&&!S(e,t)||n++;return n}function A(e){var t=0,n=0,o=I();if(e)do{var r=C(e),i=r.a,a=r.d;t+=e.scrollLeft*i,n+=e.scrollTop*a}while(e!==o&&(e=e.parentNode));return[t,n]}function H(e,t){if(!e||!e.getBoundingClientRect)return I();var n=e,o=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var r=_(n);if(n.clientWidth<n.scrollWidth&&("auto"==r.overflowX||"scroll"==r.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==r.overflowY||"scroll"==r.overflowY)){if(!n.getBoundingClientRect||n===document.body)return I();if(o||t)return n;o=!0}}}while(n=n.parentNode);return I()}function j(e,t){return Math.round(e.top)===Math.round(t.top)&&Math.round(e.left)===Math.round(t.left)&&Math.round(e.height)===Math.round(t.height)&&Math.round(e.width)===Math.round(t.width)}function R(e,t){return function(){if(!k){var n=arguments,o=this;1===n.length?e.call(o,n[0]):e.apply(o,n),k=setTimeout((function(){k=void 0}),t)}}}function B(e,t,n){e.scrollLeft+=t,e.scrollTop+=n}function X(e){var t=window.Polymer,n=window.jQuery||window.Zepto;return t&&t.dom?t.dom(e).cloneNode(!0):n?n(e).clone(!0)[0]:e.cloneNode(!0)}var q="Sortable"+(new Date).getTime();function Y(){var e,t=[];return{captureAnimationState:function(){(t=[],this.options.animation)&&[].slice.call(this.el.children).forEach((function(e){if("none"!==_(e,"display")&&e!==Be.ghost){t.push({target:e,rect:$(e)});var n=c({},t[t.length-1].rect);if(e.thisAnimationDuration){var o=C(e,!0);o&&(n.top-=o.f,n.left-=o.e)}e.fromRect=n}}))},addAnimationState:function(e){t.push(e)},removeAnimationState:function(e){t.splice(function(e,t){for(var n in e)if(e.hasOwnProperty(n))for(var o in t)if(t.hasOwnProperty(o)&&t[o]===e[n][o])return Number(n);return-1}(t,{target:e}),1)},animateAll:function(n){var o=this;if(!this.options.animation)return clearTimeout(e),void("function"==typeof n&&n());var r=!1,i=0;t.forEach((function(e){var t=0,n=e.target,a=n.fromRect,s=$(n),l=n.prevFromRect,c=n.prevToRect,d=e.rect,u=C(n,!0);u&&(s.top-=u.f,s.left-=u.e),n.toRect=s,n.thisAnimationDuration&&j(l,s)&&!j(a,s)&&(d.top-s.top)/(d.left-s.left)==(a.top-s.top)/(a.left-s.left)&&(t=function(e,t,n,o){return Math.sqrt(Math.pow(t.top-e.top,2)+Math.pow(t.left-e.left,2))/Math.sqrt(Math.pow(t.top-n.top,2)+Math.pow(t.left-n.left,2))*o.animation}(d,l,c,o.options)),j(s,a)||(n.prevFromRect=a,n.prevToRect=s,t||(t=o.options.animation),o.animate(n,d,s,t)),t&&(r=!0,i=Math.max(i,t),clearTimeout(n.animationResetTimer),n.animationResetTimer=setTimeout((function(){n.animationTime=0,n.prevFromRect=null,n.fromRect=null,n.prevToRect=null,n.thisAnimationDuration=null}),t),n.thisAnimationDuration=t)})),clearTimeout(e),r?e=setTimeout((function(){"function"==typeof n&&n()}),i):"function"==typeof n&&n(),t=[]},animate:function(e,t,n,o){if(o){_(e,"transition",""),_(e,"transform","");var r=C(this.el),i=r&&r.a,a=r&&r.d,s=(t.left-n.left)/(i||1),l=(t.top-n.top)/(a||1);e.animatingX=!!s,e.animatingY=!!l,_(e,"transform","translate3d("+s+"px,"+l+"px,0)"),function(e){e.offsetWidth}(e),_(e,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),_(e,"transform","translate3d(0,0,0)"),"number"==typeof e.animated&&clearTimeout(e.animated),e.animated=setTimeout((function(){_(e,"transition",""),_(e,"transform",""),e.animated=!1,e.animatingX=!1,e.animatingY=!1}),o)}}}}var F=[],z={initializeByDefault:!0},U={mount:function(e){for(var t in z)z.hasOwnProperty(t)&&!(t in e)&&(e[t]=z[t]);F.push(e)},pluginEvent:function(e,t,n){var o=this;this.eventCanceled=!1,n.cancel=function(){o.eventCanceled=!0};var r=e+"Global";F.forEach((function(o){t[o.pluginName]&&(t[o.pluginName][r]&&t[o.pluginName][r](c({sortable:t},n)),t.options[o.pluginName]&&t[o.pluginName][e]&&t[o.pluginName][e](c({sortable:t},n)))}))},initializePlugins:function(e,t,n,o){for(var r in F.forEach((function(o){var r=o.pluginName;if(e.options[r]||o.initializeByDefault){var i=new o(e,t,e.options);i.sortable=e,i.options=e.options,e[r]=i,l(n,i.defaults)}})),e.options)if(e.options.hasOwnProperty(r)){var i=this.modifyOption(e,r,e.options[r]);void 0!==i&&(e.options[r]=i)}},getEventProperties:function(e,t){var n={};return F.forEach((function(o){"function"==typeof o.eventProperties&&l(n,o.eventProperties.call(t[o.pluginName],e))})),n},modifyOption:function(e,t,n){var o;return F.forEach((function(r){e[r.pluginName]&&r.optionListeners&&"function"==typeof r.optionListeners[t]&&(o=r.optionListeners[t].call(e[r.pluginName],n))})),o}};function W(e){var t=e.sortable,n=e.rootEl,o=e.name,r=e.targetEl,i=e.cloneEl,a=e.toEl,s=e.fromEl,l=e.oldIndex,d=e.newIndex,u=e.oldDraggableIndex,h=e.newDraggableIndex,m=e.originalEvent,g=e.putSortable,v=e.extraEventProperties;if(t=t||n&&n[q]){var b,y=t.options,w="on"+o.charAt(0).toUpperCase()+o.substr(1);!window.CustomEvent||p||f?(b=document.createEvent("Event")).initEvent(o,!0,!0):b=new CustomEvent(o,{bubbles:!0,cancelable:!0}),b.to=a||n,b.from=s||n,b.item=r||n,b.clone=i,b.oldIndex=l,b.newIndex=d,b.oldDraggableIndex=u,b.newDraggableIndex=h,b.originalEvent=m,b.pullMode=g?g.lastPutMode:void 0;var S=c({},v,U.getEventProperties(o,t));for(var E in S)b[E]=S[E];n&&n.dispatchEvent(b),y[w]&&y[w].call(t,b)}}var J=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=n.evt,r=d(n,["evt"]);U.pluginEvent.bind(Be)(e,t,c({dragEl:G,parentEl:K,ghostEl:Z,rootEl:Q,nextEl:ee,lastDownEl:te,cloneEl:ne,cloneHidden:oe,dragStarted:ge,putSortable:ce,activeSortable:Be.active,originalEvent:o,oldIndex:re,oldDraggableIndex:ae,newIndex:ie,newDraggableIndex:se,hideGhostForTarget:Ae,unhideGhostForTarget:He,cloneNowHidden:function(){oe=!0},cloneNowShown:function(){oe=!1},dispatchSortableEvent:function(e){V({sortable:t,name:e,originalEvent:o})}},r))};function V(e){W(c({putSortable:ce,cloneEl:ne,targetEl:G,rootEl:Q,oldIndex:re,oldDraggableIndex:ae,newIndex:ie,newDraggableIndex:se},e))}var G,K,Z,Q,ee,te,ne,oe,re,ie,ae,se,le,ce,de,ue,pe,fe,he,me,ge,ve,be,ye,we,Se=!1,Ee=!1,xe=[],ke=!1,Te=!1,De=[],_e=!1,Ce=[],Oe="undefined"!=typeof document,Ie=g,$e=f||p?"cssFloat":"float",Ne=Oe&&!v&&!g&&"draggable"in document.createElement("div"),Me=function(){if(Oe){if(p)return!1;var e=document.createElement("x");return e.style.cssText="pointer-events:auto","auto"===e.style.pointerEvents}}(),Pe=function(e,t){var n=_(e),o=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),r=M(e,0,t),i=M(e,1,t),a=r&&_(r),s=i&&_(i),l=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+$(r).width,c=s&&parseInt(s.marginLeft)+parseInt(s.marginRight)+$(i).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(r&&a.float&&"none"!==a.float){var d="left"===a.float?"left":"right";return!i||"both"!==s.clear&&s.clear!==d?"horizontal":"vertical"}return r&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||l>=o&&"none"===n[$e]||i&&"none"===n[$e]&&l+c>o)?"vertical":"horizontal"},Le=function(e){function t(e,n){return function(o,r,i,a){var s=o.options.group.name&&r.options.group.name&&o.options.group.name===r.options.group.name;if(null==e&&(n||s))return!0;if(null==e||!1===e)return!1;if(n&&"clone"===e)return e;if("function"==typeof e)return t(e(o,r,i,a),n)(o,r,i,a);var l=(n?o:r).options.group.name;return!0===e||"string"==typeof e&&e===l||e.join&&e.indexOf(l)>-1}}var n={},o=e.group;o&&"object"==a(o)||(o={name:o}),n.name=o.name,n.checkPull=t(o.pull,!0),n.checkPut=t(o.put),n.revertClone=o.revertClone,e.group=n},Ae=function(){!Me&&Z&&_(Z,"display","none")},He=function(){!Me&&Z&&_(Z,"display","")};Oe&&document.addEventListener("click",(function(e){if(Ee)return e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.stopImmediatePropagation&&e.stopImmediatePropagation(),Ee=!1,!1}),!0);var je=function(e){if(G){e=e.touches?e.touches[0]:e;var t=(r=e.clientX,i=e.clientY,xe.some((function(e){if(!P(e)){var t=$(e),n=e[q].options.emptyInsertThreshold,o=r>=t.left-n&&r<=t.right+n,s=i>=t.top-n&&i<=t.bottom+n;return n&&o&&s?a=e:void 0}})),a);if(t){var n={};for(var o in e)e.hasOwnProperty(o)&&(n[o]=e[o]);n.target=n.rootEl=t,n.preventDefault=void 0,n.stopPropagation=void 0,t[q]._onDragOver(n)}}var r,i,a},Re=function(e){G&&G.parentNode[q]._isOutsideThisEl(e.target)};function Be(e,t){if(!e||!e.nodeType||1!==e.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(e));this.el=e,this.options=t=l({},t),e[q]=this;var n={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(e.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Pe(e,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Be.supportPointer&&"PointerEvent"in window,emptyInsertThreshold:5};for(var o in U.initializePlugins(this,e,n),n)!(o in t)&&(t[o]=n[o]);for(var r in Le(t),this)"_"===r.charAt(0)&&"function"==typeof this[r]&&(this[r]=this[r].bind(this));this.nativeDraggable=!t.forceFallback&&Ne,this.nativeDraggable&&(this.options.touchStartThreshold=1),t.supportPointer?y(e,"pointerdown",this._onTapStart):(y(e,"mousedown",this._onTapStart),y(e,"touchstart",this._onTapStart)),this.nativeDraggable&&(y(e,"dragover",this),y(e,"dragenter",this)),xe.push(this.el),t.store&&t.store.get&&this.sort(t.store.get(this)||[]),l(this,Y())}function Xe(e,t,n,o,r,i,a,s){var l,c,d=e[q],u=d.options.onMove;return!window.CustomEvent||p||f?(l=document.createEvent("Event")).initEvent("move",!0,!0):l=new CustomEvent("move",{bubbles:!0,cancelable:!0}),l.to=t,l.from=e,l.dragged=n,l.draggedRect=o,l.related=r||t,l.relatedRect=i||$(t),l.willInsertAfter=s,l.originalEvent=a,e.dispatchEvent(l),u&&(c=u.call(d,l,a)),c}function qe(e){e.draggable=!1}function Ye(){_e=!1}function Fe(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,n=t.length,o=0;n--;)o+=t.charCodeAt(n);return o.toString(36)}function ze(e){return setTimeout(e,0)}function Ue(e){return clearTimeout(e)}Be.prototype={constructor:Be,_isOutsideThisEl:function(e){this.el.contains(e)||e===this.el||(ve=null)},_getDirection:function(e,t){return"function"==typeof this.options.direction?this.options.direction.call(this,e,t,G):this.options.direction},_onTapStart:function(e){if(e.cancelable){var t=this,n=this.el,o=this.options,r=o.preventOnFilter,i=e.type,a=e.touches&&e.touches[0]||e.pointerType&&"touch"===e.pointerType&&e,s=(a||e).target,l=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||s,c=o.filter;if(function(e){Ce.length=0;var t=e.getElementsByTagName("input"),n=t.length;for(;n--;){var o=t[n];o.checked&&Ce.push(o)}}(n),!G&&!(/mousedown|pointerdown/.test(i)&&0!==e.button||o.disabled||l.isContentEditable||(s=x(s,o.draggable,n,!1))&&s.animated||te===s)){if(re=L(s),ae=L(s,o.draggable),"function"==typeof c){if(c.call(this,e,s,this))return V({sortable:t,rootEl:l,name:"filter",targetEl:s,toEl:n,fromEl:n}),J("filter",t,{evt:e}),void(r&&e.cancelable&&e.preventDefault())}else if(c&&(c=c.split(",").some((function(o){if(o=x(l,o.trim(),n,!1))return V({sortable:t,rootEl:o,name:"filter",targetEl:s,fromEl:n,toEl:n}),J("filter",t,{evt:e}),!0}))))return void(r&&e.cancelable&&e.preventDefault());o.handle&&!x(l,o.handle,n,!1)||this._prepareDragStart(e,a,s)}}},_prepareDragStart:function(e,t,n){var o,r=this,i=r.el,a=r.options,s=i.ownerDocument;if(n&&!G&&n.parentNode===i){var l=$(n);if(Q=i,K=(G=n).parentNode,ee=G.nextSibling,te=n,le=a.group,Be.dragged=G,de={target:G,clientX:(t||e).clientX,clientY:(t||e).clientY},he=de.clientX-l.left,me=de.clientY-l.top,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,G.style["will-change"]="all",o=function(){J("delayEnded",r,{evt:e}),Be.eventCanceled?r._onDrop():(r._disableDelayedDragEvents(),!h&&r.nativeDraggable&&(G.draggable=!0),r._triggerDragStart(e,t),V({sortable:r,name:"choose",originalEvent:e}),D(G,a.chosenClass,!0))},a.ignore.split(",").forEach((function(e){O(G,e.trim(),qe)})),y(s,"dragover",je),y(s,"mousemove",je),y(s,"touchmove",je),y(s,"mouseup",r._onDrop),y(s,"touchend",r._onDrop),y(s,"touchcancel",r._onDrop),h&&this.nativeDraggable&&(this.options.touchStartThreshold=4,G.draggable=!0),J("delayStart",this,{evt:e}),!a.delay||a.delayOnTouchOnly&&!t||this.nativeDraggable&&(f||p))o();else{if(Be.eventCanceled)return void this._onDrop();y(s,"mouseup",r._disableDelayedDrag),y(s,"touchend",r._disableDelayedDrag),y(s,"touchcancel",r._disableDelayedDrag),y(s,"mousemove",r._delayedDragTouchMoveHandler),y(s,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&y(s,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(o,a.delay)}}},_delayedDragTouchMoveHandler:function(e){var t=e.touches?e.touches[0]:e;Math.max(Math.abs(t.clientX-this._lastX),Math.abs(t.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){G&&qe(G),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var e=this.el.ownerDocument;w(e,"mouseup",this._disableDelayedDrag),w(e,"touchend",this._disableDelayedDrag),w(e,"touchcancel",this._disableDelayedDrag),w(e,"mousemove",this._delayedDragTouchMoveHandler),w(e,"touchmove",this._delayedDragTouchMoveHandler),w(e,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,t){t=t||"touch"==e.pointerType&&e,!this.nativeDraggable||t?this.options.supportPointer?y(document,"pointermove",this._onTouchMove):y(document,t?"touchmove":"mousemove",this._onTouchMove):(y(G,"dragend",this),y(Q,"dragstart",this._onDragStart));try{document.selection?ze((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(e,t){if(Se=!1,Q&&G){J("dragStarted",this,{evt:t}),this.nativeDraggable&&y(document,"dragover",Re);var n=this.options;!e&&D(G,n.dragClass,!1),D(G,n.ghostClass,!0),Be.active=this,e&&this._appendGhost(),V({sortable:this,name:"start",originalEvent:t})}else this._nulling()},_emulateDragOver:function(){if(ue){this._lastX=ue.clientX,this._lastY=ue.clientY,Ae();for(var e=document.elementFromPoint(ue.clientX,ue.clientY),t=e;e&&e.shadowRoot&&(e=e.shadowRoot.elementFromPoint(ue.clientX,ue.clientY))!==t;)t=e;if(G.parentNode[q]._isOutsideThisEl(e),t)do{if(t[q]){if(t[q]._onDragOver({clientX:ue.clientX,clientY:ue.clientY,target:e,rootEl:t})&&!this.options.dragoverBubble)break}e=t}while(t=t.parentNode);He()}},_onTouchMove:function(e){if(de){var t=this.options,n=t.fallbackTolerance,o=t.fallbackOffset,r=e.touches?e.touches[0]:e,i=Z&&C(Z,!0),a=Z&&i&&i.a,s=Z&&i&&i.d,l=Ie&&we&&A(we),c=(r.clientX-de.clientX+o.x)/(a||1)+(l?l[0]-De[0]:0)/(a||1),d=(r.clientY-de.clientY+o.y)/(s||1)+(l?l[1]-De[1]:0)/(s||1);if(!Be.active&&!Se){if(n&&Math.max(Math.abs(r.clientX-this._lastX),Math.abs(r.clientY-this._lastY))<n)return;this._onDragStart(e,!0)}if(Z){i?(i.e+=c-(pe||0),i.f+=d-(fe||0)):i={a:1,b:0,c:0,d:1,e:c,f:d};var u="matrix(".concat(i.a,",").concat(i.b,",").concat(i.c,",").concat(i.d,",").concat(i.e,",").concat(i.f,")");_(Z,"webkitTransform",u),_(Z,"mozTransform",u),_(Z,"msTransform",u),_(Z,"transform",u),pe=c,fe=d,ue=r}e.cancelable&&e.preventDefault()}},_appendGhost:function(){if(!Z){var e=this.options.fallbackOnBody?document.body:Q,t=$(G,!0,Ie,!0,e),n=this.options;if(Ie){for(we=e;"static"===_(we,"position")&&"none"===_(we,"transform")&&we!==document;)we=we.parentNode;we!==document.body&&we!==document.documentElement?(we===document&&(we=I()),t.top+=we.scrollTop,t.left+=we.scrollLeft):we=I(),De=A(we)}D(Z=G.cloneNode(!0),n.ghostClass,!1),D(Z,n.fallbackClass,!0),D(Z,n.dragClass,!0),_(Z,"transition",""),_(Z,"transform",""),_(Z,"box-sizing","border-box"),_(Z,"margin",0),_(Z,"top",t.top),_(Z,"left",t.left),_(Z,"width",t.width),_(Z,"height",t.height),_(Z,"opacity","0.8"),_(Z,"position",Ie?"absolute":"fixed"),_(Z,"zIndex","100000"),_(Z,"pointerEvents","none"),Be.ghost=Z,e.appendChild(Z),_(Z,"transform-origin",he/parseInt(Z.style.width)*100+"% "+me/parseInt(Z.style.height)*100+"%")}},_onDragStart:function(e,t){var n=this,o=e.dataTransfer,r=n.options;J("dragStart",this,{evt:e}),Be.eventCanceled?this._onDrop():(J("setupClone",this),Be.eventCanceled||((ne=X(G)).draggable=!1,ne.style["will-change"]="",this._hideClone(),D(ne,this.options.chosenClass,!1),Be.clone=ne),n.cloneId=ze((function(){J("clone",n),Be.eventCanceled||(n.options.removeCloneOnHide||Q.insertBefore(ne,G),n._hideClone(),V({sortable:n,name:"clone"}))})),!t&&D(G,r.dragClass,!0),t?(Ee=!0,n._loopId=setInterval(n._emulateDragOver,50)):(w(document,"mouseup",n._onDrop),w(document,"touchend",n._onDrop),w(document,"touchcancel",n._onDrop),o&&(o.effectAllowed="move",r.setData&&r.setData.call(n,o,G)),y(document,"drop",n),_(G,"transform","translateZ(0)")),Se=!0,n._dragStartId=ze(n._dragStarted.bind(n,t,e)),y(document,"selectstart",n),ge=!0,m&&_(document.body,"user-select","none"))},_onDragOver:function(e){var t,n,o,r,i=this.el,a=e.target,s=this.options,l=s.group,d=Be.active,u=le===l,p=s.sort,f=ce||d,h=this,m=!1;if(!_e){if(void 0!==e.preventDefault&&e.cancelable&&e.preventDefault(),a=x(a,s.draggable,i,!0),A("dragOver"),Be.eventCanceled)return m;if(G.contains(e.target)||a.animated&&a.animatingX&&a.animatingY||h._ignoreWhileAnimating===a)return j(!1);if(Ee=!1,d&&!s.disabled&&(u?p||(o=!Q.contains(G)):ce===this||(this.lastPutMode=le.checkPull(this,d,G,e))&&l.checkPut(this,d,G,e))){if(r="vertical"===this._getDirection(e,a),t=$(G),A("dragOverValid"),Be.eventCanceled)return m;if(o)return K=Q,H(),this._hideClone(),A("revert"),Be.eventCanceled||(ee?Q.insertBefore(G,ee):Q.appendChild(G)),j(!0);var g=P(i,s.draggable);if(!g||function(e,t,n){var o=$(P(n.el,n.options.draggable));return t?e.clientX>o.right+10||e.clientX<=o.right&&e.clientY>o.bottom&&e.clientX>=o.left:e.clientX>o.right&&e.clientY>o.top||e.clientX<=o.right&&e.clientY>o.bottom+10}(e,r,this)&&!g.animated){if(g===G)return j(!1);if(g&&i===e.target&&(a=g),a&&(n=$(a)),!1!==Xe(Q,i,G,t,a,n,e,!!a))return H(),i.appendChild(G),K=i,R(),j(!0)}else if(a.parentNode===i){n=$(a);var v,b,y,w=G.parentNode!==i,S=!function(e,t,n){var o=n?e.left:e.top,r=n?e.right:e.bottom,i=n?e.width:e.height,a=n?t.left:t.top,s=n?t.right:t.bottom,l=n?t.width:t.height;return o===a||r===s||o+i/2===a+l/2}(G.animated&&G.toRect||t,a.animated&&a.toRect||n,r),E=r?"top":"left",k=N(a,"top","top")||N(G,"top","top"),T=k?k.scrollTop:void 0;if(ve!==a&&(b=n[E],ke=!1,Te=!S&&s.invertSwap||w),0!==(v=function(e,t,n,o,r,i,a,s){var l=o?e.clientY:e.clientX,c=o?n.height:n.width,d=o?n.top:n.left,u=o?n.bottom:n.right,p=!1;if(!a)if(s&&ye<c*r){if(!ke&&(1===be?l>d+c*i/2:l<u-c*i/2)&&(ke=!0),ke)p=!0;else if(1===be?l<d+ye:l>u-ye)return-be}else if(l>d+c*(1-r)/2&&l<u-c*(1-r)/2)return function(e){return L(G)<L(e)?1:-1}(t);if((p=p||a)&&(l<d+c*i/2||l>u-c*i/2))return l>d+c/2?1:-1;return 0}(e,a,n,r,S?1:s.swapThreshold,null==s.invertedSwapThreshold?s.swapThreshold:s.invertedSwapThreshold,Te,ve===a))){var C=L(G);do{C-=v,y=K.children[C]}while(y&&("none"===_(y,"display")||y===Z))}if(0===v||y===a)return j(!1);ve=a,be=v;var O=a.nextElementSibling,I=!1,M=Xe(Q,i,G,t,a,n,e,I=1===v);if(!1!==M)return 1!==M&&-1!==M||(I=1===M),_e=!0,setTimeout(Ye,30),H(),I&&!O?i.appendChild(G):a.parentNode.insertBefore(G,I?O:a),k&&B(k,0,T-k.scrollTop),K=G.parentNode,void 0===b||Te||(ye=Math.abs(b-$(a)[E])),R(),j(!0)}if(i.contains(G))return j(!1)}return!1}function A(s,l){J(s,h,c({evt:e,isOwner:u,axis:r?"vertical":"horizontal",revert:o,dragRect:t,targetRect:n,canSort:p,fromSortable:f,target:a,completed:j,onMove:function(n,o){return Xe(Q,i,G,t,n,$(n),e,o)},changed:R},l))}function H(){A("dragOverAnimationCapture"),h.captureAnimationState(),h!==f&&f.captureAnimationState()}function j(t){return A("dragOverCompleted",{insertion:t}),t&&(u?d._hideClone():d._showClone(h),h!==f&&(D(G,ce?ce.options.ghostClass:d.options.ghostClass,!1),D(G,s.ghostClass,!0)),ce!==h&&h!==Be.active?ce=h:h===Be.active&&ce&&(ce=null),f===h&&(h._ignoreWhileAnimating=a),h.animateAll((function(){A("dragOverAnimationComplete"),h._ignoreWhileAnimating=null})),h!==f&&(f.animateAll(),f._ignoreWhileAnimating=null)),(a===G&&!G.animated||a===i&&!a.animated)&&(ve=null),s.dragoverBubble||e.rootEl||a===document||(G.parentNode[q]._isOutsideThisEl(e.target),!t&&je(e)),!s.dragoverBubble&&e.stopPropagation&&e.stopPropagation(),m=!0}function R(){ie=L(G),se=L(G,s.draggable),V({sortable:h,name:"change",toEl:i,newIndex:ie,newDraggableIndex:se,originalEvent:e})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){w(document,"mousemove",this._onTouchMove),w(document,"touchmove",this._onTouchMove),w(document,"pointermove",this._onTouchMove),w(document,"dragover",je),w(document,"mousemove",je),w(document,"touchmove",je)},_offUpEvents:function(){var e=this.el.ownerDocument;w(e,"mouseup",this._onDrop),w(e,"touchend",this._onDrop),w(e,"pointerup",this._onDrop),w(e,"touchcancel",this._onDrop),w(document,"selectstart",this)},_onDrop:function(e){var t=this.el,n=this.options;ie=L(G),se=L(G,n.draggable),J("drop",this,{evt:e}),K=G&&G.parentNode,ie=L(G),se=L(G,n.draggable),Be.eventCanceled||(Se=!1,Te=!1,ke=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Ue(this.cloneId),Ue(this._dragStartId),this.nativeDraggable&&(w(document,"drop",this),w(t,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),m&&_(document.body,"user-select",""),_(G,"transform",""),e&&(ge&&(e.cancelable&&e.preventDefault(),!n.dropBubble&&e.stopPropagation()),Z&&Z.parentNode&&Z.parentNode.removeChild(Z),(Q===K||ce&&"clone"!==ce.lastPutMode)&&ne&&ne.parentNode&&ne.parentNode.removeChild(ne),G&&(this.nativeDraggable&&w(G,"dragend",this),qe(G),G.style["will-change"]="",ge&&!Se&&D(G,ce?ce.options.ghostClass:this.options.ghostClass,!1),D(G,this.options.chosenClass,!1),V({sortable:this,name:"unchoose",toEl:K,newIndex:null,newDraggableIndex:null,originalEvent:e}),Q!==K?(ie>=0&&(V({rootEl:K,name:"add",toEl:K,fromEl:Q,originalEvent:e}),V({sortable:this,name:"remove",toEl:K,originalEvent:e}),V({rootEl:K,name:"sort",toEl:K,fromEl:Q,originalEvent:e}),V({sortable:this,name:"sort",toEl:K,originalEvent:e})),ce&&ce.save()):ie!==re&&ie>=0&&(V({sortable:this,name:"update",toEl:K,originalEvent:e}),V({sortable:this,name:"sort",toEl:K,originalEvent:e})),Be.active&&(null!=ie&&-1!==ie||(ie=re,se=ae),V({sortable:this,name:"end",toEl:K,originalEvent:e}),this.save())))),this._nulling()},_nulling:function(){J("nulling",this),Q=G=K=Z=ee=ne=te=oe=de=ue=ge=ie=se=re=ae=ve=be=ce=le=Be.dragged=Be.ghost=Be.clone=Be.active=null,Ce.forEach((function(e){e.checked=!0})),Ce.length=pe=fe=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":G&&(this._onDragOver(e),function(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move");e.cancelable&&e.preventDefault()}(e));break;case"selectstart":e.preventDefault()}},toArray:function(){for(var e,t=[],n=this.el.children,o=0,r=n.length,i=this.options;o<r;o++)x(e=n[o],i.draggable,this.el,!1)&&t.push(e.getAttribute(i.dataIdAttr)||Fe(e));return t},sort:function(e){var t={},n=this.el;this.toArray().forEach((function(e,o){var r=n.children[o];x(r,this.options.draggable,n,!1)&&(t[e]=r)}),this),e.forEach((function(e){t[e]&&(n.removeChild(t[e]),n.appendChild(t[e]))}))},save:function(){var e=this.options.store;e&&e.set&&e.set(this)},closest:function(e,t){return x(e,t||this.options.draggable,this.el,!1)},option:function(e,t){var n=this.options;if(void 0===t)return n[e];var o=U.modifyOption(this,e,t);n[e]=void 0!==o?o:t,"group"===e&&Le(n)},destroy:function(){J("destroy",this);var e=this.el;e[q]=null,w(e,"mousedown",this._onTapStart),w(e,"touchstart",this._onTapStart),w(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(w(e,"dragover",this),w(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),(function(e){e.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),xe.splice(xe.indexOf(this.el),1),this.el=e=null},_hideClone:function(){if(!oe){if(J("hideClone",this),Be.eventCanceled)return;_(ne,"display","none"),this.options.removeCloneOnHide&&ne.parentNode&&ne.parentNode.removeChild(ne),oe=!0}},_showClone:function(e){if("clone"===e.lastPutMode){if(oe){if(J("showClone",this),Be.eventCanceled)return;Q.contains(G)&&!this.options.group.revertClone?Q.insertBefore(ne,G):ee?Q.insertBefore(ne,ee):Q.appendChild(ne),this.options.group.revertClone&&this.animate(G,ne),_(ne,"display",""),oe=!1}}else this._hideClone()}},Oe&&y(document,"touchmove",(function(e){(Be.active||Se)&&e.cancelable&&e.preventDefault()})),Be.utils={on:y,off:w,css:_,find:O,is:function(e,t){return!!x(e,t,e,!1)},extend:function(e,t){if(e&&t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},throttle:R,closest:x,toggleClass:D,clone:X,index:L,nextTick:ze,cancelNextTick:Ue,detectDirection:Pe,getChild:M},Be.get=function(e){return e[q]},Be.mount=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t[0].constructor===Array&&(t=t[0]),t.forEach((function(e){if(!e.prototype||!e.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(e));e.utils&&(Be.utils=c({},Be.utils,e.utils)),U.mount(e)}))},Be.create=function(e,t){return new Be(e,t)},Be.version="1.10.2";var We,Je,Ve,Ge,Ke,Ze,Qe=[],et=!1;function tt(){Qe.forEach((function(e){clearInterval(e.pid)})),Qe=[]}function nt(){clearInterval(Ze)}var ot=R((function(e,t,n,o){if(t.scroll){var r,i=(e.touches?e.touches[0]:e).clientX,a=(e.touches?e.touches[0]:e).clientY,s=t.scrollSensitivity,l=t.scrollSpeed,c=I(),d=!1;Je!==n&&(Je=n,tt(),We=t.scroll,r=t.scrollFn,!0===We&&(We=H(n,!0)));var u=0,p=We;do{var f=p,h=$(f),m=h.top,g=h.bottom,v=h.left,b=h.right,y=h.width,w=h.height,S=void 0,E=void 0,x=f.scrollWidth,k=f.scrollHeight,T=_(f),D=f.scrollLeft,C=f.scrollTop;f===c?(S=y<x&&("auto"===T.overflowX||"scroll"===T.overflowX||"visible"===T.overflowX),E=w<k&&("auto"===T.overflowY||"scroll"===T.overflowY||"visible"===T.overflowY)):(S=y<x&&("auto"===T.overflowX||"scroll"===T.overflowX),E=w<k&&("auto"===T.overflowY||"scroll"===T.overflowY));var O=S&&(Math.abs(b-i)<=s&&D+y<x)-(Math.abs(v-i)<=s&&!!D),N=E&&(Math.abs(g-a)<=s&&C+w<k)-(Math.abs(m-a)<=s&&!!C);if(!Qe[u])for(var M=0;M<=u;M++)Qe[M]||(Qe[M]={});Qe[u].vx==O&&Qe[u].vy==N&&Qe[u].el===f||(Qe[u].el=f,Qe[u].vx=O,Qe[u].vy=N,clearInterval(Qe[u].pid),0==O&&0==N||(d=!0,Qe[u].pid=setInterval(function(){o&&0===this.layer&&Be.active._onTouchMove(Ke);var t=Qe[this.layer].vy?Qe[this.layer].vy*l:0,n=Qe[this.layer].vx?Qe[this.layer].vx*l:0;"function"==typeof r&&"continue"!==r.call(Be.dragged.parentNode[q],n,t,e,Ke,Qe[this.layer].el)||B(Qe[this.layer].el,n,t)}.bind({layer:u}),24))),u++}while(t.bubbleScroll&&p!==c&&(p=H(p,!1)));et=d}}),30),rt=function(e){var t=e.originalEvent,n=e.putSortable,o=e.dragEl,r=e.activeSortable,i=e.dispatchSortableEvent,a=e.hideGhostForTarget,s=e.unhideGhostForTarget;if(t){var l=n||r;a();var c=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,d=document.elementFromPoint(c.clientX,c.clientY);s(),l&&!l.el.contains(d)&&(i("spill"),this.onSpill({dragEl:o,putSortable:n}))}};function it(){}function at(){}it.prototype={startIndex:null,dragStart:function(e){var t=e.oldDraggableIndex;this.startIndex=t},onSpill:function(e){var t=e.dragEl,n=e.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var o=M(this.sortable.el,this.startIndex,this.options);o?this.sortable.el.insertBefore(t,o):this.sortable.el.appendChild(t),this.sortable.animateAll(),n&&n.animateAll()},drop:rt},l(it,{pluginName:"revertOnSpill"}),at.prototype={onSpill:function(e){var t=e.dragEl,n=e.putSortable||this.sortable;n.captureAnimationState(),t.parentNode&&t.parentNode.removeChild(t),n.animateAll()},drop:rt},l(at,{pluginName:"removeOnSpill"});Be.mount(new function(){function e(){for(var e in this.defaults={scroll:!0,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===e.charAt(0)&&"function"==typeof this[e]&&(this[e]=this[e].bind(this))}return e.prototype={dragStarted:function(e){var t=e.originalEvent;this.sortable.nativeDraggable?y(document,"dragover",this._handleAutoScroll):this.options.supportPointer?y(document,"pointermove",this._handleFallbackAutoScroll):t.touches?y(document,"touchmove",this._handleFallbackAutoScroll):y(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(e){var t=e.originalEvent;this.options.dragOverBubble||t.rootEl||this._handleAutoScroll(t)},drop:function(){this.sortable.nativeDraggable?w(document,"dragover",this._handleAutoScroll):(w(document,"pointermove",this._handleFallbackAutoScroll),w(document,"touchmove",this._handleFallbackAutoScroll),w(document,"mousemove",this._handleFallbackAutoScroll)),nt(),tt(),clearTimeout(k),k=void 0},nulling:function(){Ke=Je=We=et=Ze=Ve=Ge=null,Qe.length=0},_handleFallbackAutoScroll:function(e){this._handleAutoScroll(e,!0)},_handleAutoScroll:function(e,t){var n=this,o=(e.touches?e.touches[0]:e).clientX,r=(e.touches?e.touches[0]:e).clientY,i=document.elementFromPoint(o,r);if(Ke=e,t||f||p||m){ot(e,this.options,i,t);var a=H(i,!0);!et||Ze&&o===Ve&&r===Ge||(Ze&&nt(),Ze=setInterval((function(){var i=H(document.elementFromPoint(o,r),!0);i!==a&&(a=i,tt()),ot(e,n.options,i,t)}),10),Ve=o,Ge=r)}else{if(!this.options.bubbleScroll||H(i,!0)===I())return void tt();ot(e,this.options,H(i,!1),!1)}}},l(e,{pluginName:"scroll",initializeByDefault:!0})}),Be.mount(at,it);var st=Be,lt=function(){function e(e){this.container=e,this.template=document.querySelector('[data-id="tpl-notes"]').innerHTML,this.noteTemplate=document.querySelector('[data-id="tpl-note"]').innerHTML,this.trashTemplate=document.querySelector('[data-id="tpl-trash"]').innerHTML,this.data=this.getData(),this.render(),this.setup()}return e.init=function(t){new e(t)},e.prototype.setup=function(){var e=this,t={newBtn:document.querySelector("#new-note"),trashBtn:document.querySelector("#trash")};t.trashBtn.addEventListener("click",(function(){e.displayTrash()})),t.newBtn.addEventListener("click",(function(){e.createNewNote()})),document.addEventListener("keydown",(function(t){t.shiftKey&&t.ctrlKey&&"N"===t.key&&(t.preventDefault(),t.stopPropagation(),e.createNewNote())}));var n=new st(this.container,{animation:150,onEnd:function(t){var o=n.toArray();for(var r in o){e.getNoteById(parseInt(o[r])).setSortIndex(Number(r)),e.save(),e.data=e.getData(),e.render()}}})},e.prototype.save=function(){var e=JSON.stringify(this.data.notes);localStorage.setItem("notes",e)},e.prototype.getSavedNotes=function(){var e=localStorage.getItem("notes");if(e){for(var t=[],n=0,o=e=JSON.parse(e);n<o.length;n++){var r=o[n],a=i.createFromData(r);t.push(a)}return t.sort((function(e,t){return e.getSortIndex()-t.getSortIndex()}))}return[i.createNewNote()]},e.prototype.render=function(){var e=this.template,t={note:this.noteTemplate},n={data:this.data};this.container.innerHTML=o.render(e,n,t),this.setupNotes()},e.prototype.createNewNote=function(){var e=i.createNewNote();this.data.notes.push(e),this.save(),this.render();var t=this.container.querySelector('[data-id="'+e.getId()+'"]').querySelector(".note-content"),n=window.getSelection(),o=document.createRange();o.selectNodeContents(t),n.removeAllRanges(),n.addRange(o)},e.prototype.getData=function(){return{notes:this.getSavedNotes()}},e.prototype.getNoteById=function(e){for(var t=0,n=this.data.notes;t<n.length;t++){var o=n[t];if(e===o.id)return o}return null},e.prototype.setupNotes=function(){for(var e=0,t={notes:this.container.querySelectorAll(".note")}.notes;e<t.length;e++){var n=t[e];this.setupNote(n)}},e.prototype.setupNote=function(e){var t=this,n=parseInt(e.dataset.id),o={delete:e.querySelector(".delete-note"),title:e.querySelector("h2.note-title"),content:e.querySelector("p.note-content"),colorSelect:e.querySelector(".note-color-select")};o.delete.addEventListener("click",(function(){t.deleteNote(n)}));var r,i=function(e){var r=t.getNoteById(n);r.setTitle(o.title.innerText),r.setContent(o.content.innerHTML),t.save()};o.title.addEventListener("input",(function(e){clearTimeout(r),r=setTimeout((function(){i()}),200)})),o.content.addEventListener("input",(function(e){clearTimeout(r),r=setTimeout((function(){i()}),200)})),o.title.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),i(),o.title.blur())})),o.colorSelect.addEventListener("click",(function(e){var o=t.getNoteById(n);e.target.dataset.color&&o.setColor(e.target.dataset.color),t.save(),t.render()}))},e.prototype.deleteNote=function(e){this.getNoteById(e).delete(),this.save(),this.render(),document.dispatchEvent(new CustomEvent("NoteDeleted"))},e.prototype.displayTrash=function(){var e=this,t=document.createElement("div");t.classList.add("trash-container");var n=function(){t.innerHTML=o.render(e.trashTemplate,{notes:e.data.notes})},r=function(){for(var o={closeBtn:t.querySelector("#close-trash"),restore:t.querySelectorAll(".restore")},i=function(t){var o=parseInt(t.dataset.id);t.addEventListener("click",(function(){e.restoreNote(o),n(),r()}))},a=0,s=o.restore;a<s.length;a++){i(s[a])}o.closeBtn.addEventListener("click",(function(){t.parentElement.removeChild(t)})),document.addEventListener("NoteDeleted",(function(){n(),r()}))};n(),r(),document.body.appendChild(t)},e.prototype.restoreNote=function(e){this.getNoteById(e).restore(),this.save(),this.render()},e}();document.addEventListener("DOMContentLoaded",(function(){lt.init(document.querySelector("#notes"))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS1wbHVnaW4tc2VydmUvbGliL2NsaWVudC9sb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9tYWluLnNjc3MiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS1wbHVnaW4tc2VydmUvbGliL2NsaWVudC9vdmVybGF5cy91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tdXN0YWNoZS9tdXN0YWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL21haW4uc2Nzcz9lOWRjIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8od2VicGFjayktcGx1Z2luLXNlcnZlL2NsaWVudC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLXBsdWdpbi1zZXJ2ZS9saWIvY2xpZW50L2NsaWVudC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLXBsdWdpbi1zZXJ2ZS9saWIvY2xpZW50L0NsaWVudFNvY2tldC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLXBsdWdpbi1zZXJ2ZS9saWIvY2xpZW50L2htci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLXBsdWdpbi1zZXJ2ZS9saWIvY2xpZW50L292ZXJsYXlzL3Byb2dyZXNzLW1pbmltYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS1wbHVnaW4tc2VydmUvbGliL2NsaWVudC9vdmVybGF5cy9wcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLXBsdWdpbi1zZXJ2ZS9saWIvY2xpZW50L292ZXJsYXlzL3N0YXR1cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTm90ZS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ydGFibGVqcy9tb2R1bGFyL3NvcnRhYmxlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTm90ZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwiaG90Q3VycmVudFBhcmVudHMiLCJob3RDdXJyZW50UGFyZW50c1RlbXAiLCJob3RDcmVhdGVSZXF1aXJlIiwibWUiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZuIiwicmVxdWVzdCIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsInQiLCJtb2RlIiwiaG90Q3JlYXRlTW9kdWxlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9tYWluIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIiwiZGVjbGluZSIsImRpc3Bvc2UiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiaW52YWxpZGF0ZSIsInRoaXMiLCJtb2R1bGVzIiwiaG90QXBwbHlJbnZhbGlkYXRlZE1vZHVsZSIsImhvdFF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyIsImNoZWNrIiwiaG90Q2hlY2siLCJhcHBseSIsImhvdEFwcGx5Iiwic3RhdHVzIiwibCIsImhvdFN0YXR1c0hhbmRsZXJzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwibmV3U3RhdHVzIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiaG90QXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMiLCJjIiwiaCIsInByb21pc2UiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0Iiwic3JjIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImRlZmVycmVkIiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImhvdEFwcGx5SW50ZXJuYWwiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJ0eXBlIiwicGFyZW50SWQiLCJwYXJlbnQiLCJjb25jYXQiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJzbGljZSIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImxpc3QiLCJleHBvcnRzIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJpbmZvIiwibG9nIiwicmVmcmVzaCIsIm5vb3AiLCJzaWxlbnQiLCJ3ZWJwYWNrUGx1Z2luU2VydmUiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJhZGRDc3MiLCJjc3MiLCJzdHlsZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJhZGRIdG1sIiwiaHRtbCIsImRpdiIsIm5vZGVzIiwiaW5uZXJIVE1MIiwidHJpbSIsImZpcnN0Q2hpbGQiLCJib2R5Iiwic29ja2V0TWVzc2FnZSIsInNvY2tldCIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwibWVzc2FnZSIsImFjdGlvbiIsIm9iamVjdFRvU3RyaW5nIiwidG9TdHJpbmciLCJpc0FycmF5IiwiQXJyYXkiLCJpc0Z1bmN0aW9uIiwiZXNjYXBlUmVnRXhwIiwic3RyaW5nIiwicmVwbGFjZSIsImhhc1Byb3BlcnR5Iiwib2JqIiwicHJvcE5hbWUiLCJyZWdFeHBUZXN0IiwiUmVnRXhwIiwidGVzdCIsIm5vblNwYWNlUmUiLCJpc1doaXRlc3BhY2UiLCJyZSIsInRlc3RSZWdFeHAiLCJlbnRpdHlNYXAiLCJ3aGl0ZVJlIiwic3BhY2VSZSIsImVxdWFsc1JlIiwiY3VybHlSZSIsInRhZ1JlIiwiU2Nhbm5lciIsInRhaWwiLCJwb3MiLCJDb250ZXh0IiwidmlldyIsInBhcmVudENvbnRleHQiLCJjYWNoZSIsIldyaXRlciIsInRlbXBsYXRlQ2FjaGUiLCJfY2FjaGUiLCJjbGVhciIsImVvcyIsInNjYW4iLCJtYXRjaCIsImluZGV4Iiwic3Vic3RyaW5nIiwic2NhblVudGlsIiwic2VhcmNoIiwibG9va3VwIiwicHJpbWl0aXZlIiwiaW50ZXJtZWRpYXRlVmFsdWUiLCJuYW1lcyIsImNvbnRleHQiLCJsb29rdXBIaXQiLCJzcGxpdCIsImNsZWFyQ2FjaGUiLCJ0ZW1wbGF0ZSIsInRhZ3MiLCJjYWNoZUtleSIsIm11c3RhY2hlIiwiaXNDYWNoZUVuYWJsZWQiLCJ0b2tlbnMiLCJvcGVuaW5nVGFnUmUiLCJjbG9zaW5nVGFnUmUiLCJjbG9zaW5nQ3VybHlSZSIsImxpbmVIYXNOb25TcGFjZSIsInNlY3Rpb25zIiwic3BhY2VzIiwiaGFzVGFnIiwibm9uU3BhY2UiLCJpbmRlbnRhdGlvbiIsInRhZ0luZGV4Iiwic3RyaXBTcGFjZSIsImNvbXBpbGVUYWdzIiwidGFnc1RvQ29tcGlsZSIsInN0YXJ0IiwiY2hyIiwidG9rZW4iLCJvcGVuU2VjdGlvbiIsInNjYW5uZXIiLCJ2YWx1ZUxlbmd0aCIsImNoYXJBdCIsIm5lc3RlZFRva2VucyIsImNvbGxlY3RvciIsIm51bVRva2VucyIsIm5lc3RUb2tlbnMiLCJsYXN0VG9rZW4iLCJzcXVhc2hlZFRva2VucyIsInNxdWFzaFRva2VucyIsInBhcnNlVGVtcGxhdGUiLCJyZW5kZXIiLCJwYXJ0aWFscyIsInJlbmRlclRva2VucyIsIm9yaWdpbmFsVGVtcGxhdGUiLCJzeW1ib2wiLCJidWZmZXIiLCJyZW5kZXJTZWN0aW9uIiwicmVuZGVySW52ZXJ0ZWQiLCJyZW5kZXJQYXJ0aWFsIiwidW5lc2NhcGVkVmFsdWUiLCJlc2NhcGVkVmFsdWUiLCJyYXdWYWx1ZSIsInNlbGYiLCJpbmRlbnRQYXJ0aWFsIiwicGFydGlhbCIsImZpbHRlcmVkSW5kZW50YXRpb24iLCJwYXJ0aWFsQnlObCIsImluZGVudGVkVmFsdWUiLCJlc2NhcGUiLCJ2ZXJzaW9uIiwiZGVmYXVsdFdyaXRlciIsIlR5cGVFcnJvciIsIlN0cmluZyIsImZhY3RvcnkiLCJhcGkiLCJjb250ZW50IiwiZGVmYXVsdCIsImxvY2FscyIsIm9sZExvY2FscyIsImlzRXF1YWxMb2NhbHMiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdHJpbmdpZnkiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsInJ1biIsImhhc2giLCJidWlsZEhhc2giLCJhZGRyZXNzIiwiY2xpZW50IiwicHJvZ3Jlc3MiLCJzZWN1cmUiLCJmaXJzdEluc3RhbmNlIiwiY29tcGlsZXJzIiwiQ2xpZW50U29ja2V0IiwiY29tcGlsZXJOYW1lIiwiY2xvc2UiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsInNob3J0SGFzaCIsImNvbXBpbGVyIiwid3BzSWQiLCJkb25lIiwibG9jYXRpb24iLCJyZWxvYWQiLCJpbml0IiwibGl2ZVJlbG9hZCIsImlnbm9yZUNvZGVzIiwiYXJncyIsImF0dGVtcHRzIiwiZXZlbnRIYW5kbGVycyIsInJldHJ5aW5nIiwiY29ubmVjdCIsImNvbm5lY3RpbmciLCJXZWJTb2NrZXQiLCJyZXRyeSIsImV2ZW50IiwiaW5jbHVkZXMiLCJjb2RlIiwicmVjb25uZWN0Iiwib25jbG9zZSIsInNldFRpbWVvdXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibGF0ZXN0IiwiaG1yIiwiYXN5bmMiLCJobXJTdGF0dXMiLCJwZXJjZW50Iiwid2lkdGgiLCJNYXRoIiwiZmxvb3IiLCJ3cmFwcGVyIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVzZXQiLCJvZmZzZXQiLCJzdmciLCJoaWRkZW4iLCJhc2lkZSIsImJlYWNvbiIsInByb2JsZW1zIiwicHJlRXJyb3JzIiwicHJlV2FybmluZ3MiLCJ0aXRsZUVycm9ycyIsInRpdGxlV2FybmluZ3MiLCJoYXNQcm9ibGVtcyIsImNsYXNzTmFtZSIsImlubmVyVGV4dCIsIm1pbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFkZEVycm9ycyIsImNvbnRhaW5zIiwid2FybmluZyIsImFkZFdhcm5pbmdzIiwiRGF0ZVRpbWVGb3JtYXQiLCJJbnRsIiwiZGVsZXRlZCIsInNldElkIiwic2V0VGl0bGUiLCJ0aXRsZSIsInNldENvbnRlbnQiLCJzZXRTdGF0dXMiLCJnZXRJZCIsImdldFRpdGxlIiwiZ2V0Q29udGVudCIsImdldFN0YXR1cyIsImdlbmVyYXRlSWQiLCJyYW5kb20iLCJzZXRDb2xvciIsImNvbG9yIiwiZ2V0Q29sb3IiLCJzZXRTb3J0SW5kZXgiLCJzb3J0SW5kZXgiLCJnZXRTb3J0SW5kZXgiLCJkZWxldGUiLCJyZXN0b3JlIiwiaXNEZWxldGVkIiwiY3JlYXRlTmV3Tm90ZSIsIk5vdGUiLCJkdGYiLCJkYXRlT3B0aW9ucyIsImZvcm1hdCIsIkRhdGUiLCJub3ciLCJvbmVMaW5lcnMiLCJjcmVhdGVGcm9tRGF0YSIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJfb2JqZWN0U3ByZWFkIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidXNlckFnZW50IiwicGF0dGVybiIsIm5hdmlnYXRvciIsIklFMTFPckxlc3MiLCJFZGdlIiwiRmlyZUZveCIsIlNhZmFyaSIsIklPUyIsIkNocm9tZUZvckFuZHJvaWQiLCJjYXB0dXJlTW9kZSIsImNhcHR1cmUiLCJwYXNzaXZlIiwib24iLCJlbCIsIm9mZiIsIm1hdGNoZXMiLCJzZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwiXyIsImdldFBhcmVudE9ySG9zdCIsImhvc3QiLCJub2RlVHlwZSIsImNsb3Nlc3QiLCJjdHgiLCJpbmNsdWRlQ1RYIiwiX3Rocm90dGxlVGltZW91dCIsIlJfU1BBQ0UiLCJ0b2dnbGVDbGFzcyIsInN0YXRlIiwicHJvcCIsInZhbCIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIm1hdHJpeCIsInNlbGZPbmx5IiwiYXBwbGllZFRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm0iLCJtYXRyaXhGbiIsIkRPTU1hdHJpeCIsIldlYktpdENTU01hdHJpeCIsIkNTU01hdHJpeCIsIk1TQ1NTTWF0cml4IiwiZmluZCIsInRhZ05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQiLCJzY3JvbGxpbmdFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0UmVjdCIsInJlbGF0aXZlVG9Db250YWluaW5nQmxvY2siLCJyZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50IiwidW5kb1NjYWxlIiwiY29udGFpbmVyIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZWxSZWN0IiwidG9wIiwibGVmdCIsImJvdHRvbSIsInJpZ2h0IiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiY29udGFpbmVyUmVjdCIsInBhcnNlSW50IiwiZWxNYXRyaXgiLCJzY2FsZVgiLCJzY2FsZVkiLCJpc1Njcm9sbGVkUGFzdCIsImVsU2lkZSIsInBhcmVudFNpZGUiLCJnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudCIsImVsU2lkZVZhbCIsInBhcmVudFNpZGVWYWwiLCJnZXRDaGlsZCIsImNoaWxkTnVtIiwiY3VycmVudENoaWxkIiwiZGlzcGxheSIsIlNvcnRhYmxlIiwiZ2hvc3QiLCJkcmFnZ2VkIiwiZHJhZ2dhYmxlIiwibGFzdENoaWxkIiwibGFzdCIsImxhc3RFbGVtZW50Q2hpbGQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibm9kZU5hbWUiLCJ0b1VwcGVyQ2FzZSIsImNsb25lIiwiZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwid2luU2Nyb2xsZXIiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiaW5jbHVkZVNlbGYiLCJlbGVtIiwiZ290U2VsZiIsImNsaWVudFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJlbGVtQ1NTIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiaXNSZWN0RXF1YWwiLCJyZWN0MSIsInJlY3QyIiwicm91bmQiLCJ0aHJvdHRsZSIsIm1zIiwiX3RoaXMiLCJzY3JvbGxCeSIsIngiLCJ5IiwiUG9seW1lciIsIiQiLCJqUXVlcnkiLCJaZXB0byIsImRvbSIsImNsb25lTm9kZSIsImV4cGFuZG8iLCJnZXRUaW1lIiwiQW5pbWF0aW9uU3RhdGVNYW5hZ2VyIiwiYW5pbWF0aW9uQ2FsbGJhY2tJZCIsImFuaW1hdGlvblN0YXRlcyIsImNhcHR1cmVBbmltYXRpb25TdGF0ZSIsImFuaW1hdGlvbiIsInJlY3QiLCJmcm9tUmVjdCIsInRoaXNBbmltYXRpb25EdXJhdGlvbiIsImNoaWxkTWF0cml4IiwiZiIsImFkZEFuaW1hdGlvblN0YXRlIiwicmVtb3ZlQW5pbWF0aW9uU3RhdGUiLCJhcnIiLCJOdW1iZXIiLCJpbmRleE9mT2JqZWN0IiwiYW5pbWF0ZUFsbCIsImNsZWFyVGltZW91dCIsImFuaW1hdGluZyIsImFuaW1hdGlvblRpbWUiLCJ0aW1lIiwidG9SZWN0IiwicHJldkZyb21SZWN0IiwicHJldlRvUmVjdCIsImFuaW1hdGluZ1JlY3QiLCJ0YXJnZXRNYXRyaXgiLCJzcXJ0IiwicG93IiwiY2FsY3VsYXRlUmVhbFRpbWUiLCJhbmltYXRlIiwibWF4IiwiYW5pbWF0aW9uUmVzZXRUaW1lciIsImN1cnJlbnRSZWN0IiwiZHVyYXRpb24iLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImFuaW1hdGluZ1giLCJhbmltYXRpbmdZIiwib2Zmc2V0V2lkdGgiLCJyZXBhaW50IiwiZWFzaW5nIiwiYW5pbWF0ZWQiLCJwbHVnaW5zIiwiZGVmYXVsdHMiLCJpbml0aWFsaXplQnlEZWZhdWx0IiwiUGx1Z2luTWFuYWdlciIsIm1vdW50IiwicGx1Z2luIiwib3B0aW9uIiwicGx1Z2luRXZlbnQiLCJldmVudE5hbWUiLCJzb3J0YWJsZSIsImV2dCIsImV2ZW50Q2FuY2VsZWQiLCJjYW5jZWwiLCJldmVudE5hbWVHbG9iYWwiLCJwbHVnaW5OYW1lIiwiaW5pdGlhbGl6ZVBsdWdpbnMiLCJpbml0aWFsaXplZCIsIm1vZGlmaWVkIiwibW9kaWZ5T3B0aW9uIiwiZ2V0RXZlbnRQcm9wZXJ0aWVzIiwiZXZlbnRQcm9wZXJ0aWVzIiwibW9kaWZpZWRWYWx1ZSIsIm9wdGlvbkxpc3RlbmVycyIsImRpc3BhdGNoRXZlbnQiLCJfcmVmIiwicm9vdEVsIiwidGFyZ2V0RWwiLCJjbG9uZUVsIiwidG9FbCIsImZyb21FbCIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJvbGREcmFnZ2FibGVJbmRleCIsIm5ld0RyYWdnYWJsZUluZGV4Iiwib3JpZ2luYWxFdmVudCIsInB1dFNvcnRhYmxlIiwiZXh0cmFFdmVudFByb3BlcnRpZXMiLCJvbk5hbWUiLCJzdWJzdHIiLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0byIsImZyb20iLCJwdWxsTW9kZSIsImxhc3RQdXRNb2RlIiwiYWxsRXZlbnRQcm9wZXJ0aWVzIiwiZHJhZ0VsIiwicGFyZW50RWwiLCJnaG9zdEVsIiwibmV4dEVsIiwibGFzdERvd25FbCIsImNsb25lSGlkZGVuIiwiZHJhZ1N0YXJ0ZWQiLCJtb3ZlZCIsImFjdGl2ZVNvcnRhYmxlIiwiaGlkZUdob3N0Rm9yVGFyZ2V0IiwiX2hpZGVHaG9zdEZvclRhcmdldCIsInVuaGlkZUdob3N0Rm9yVGFyZ2V0IiwiX3VuaGlkZUdob3N0Rm9yVGFyZ2V0IiwiY2xvbmVOb3dIaWRkZW4iLCJjbG9uZU5vd1Nob3duIiwiZGlzcGF0Y2hTb3J0YWJsZUV2ZW50IiwiX2Rpc3BhdGNoRXZlbnQiLCJhY3RpdmVHcm91cCIsInRhcEV2dCIsInRvdWNoRXZ0IiwibGFzdER4IiwibGFzdER5IiwidGFwRGlzdGFuY2VMZWZ0IiwidGFwRGlzdGFuY2VUb3AiLCJsYXN0VGFyZ2V0IiwibGFzdERpcmVjdGlvbiIsInRhcmdldE1vdmVEaXN0YW5jZSIsImdob3N0UmVsYXRpdmVQYXJlbnQiLCJhd2FpdGluZ0RyYWdTdGFydGVkIiwiaWdub3JlTmV4dENsaWNrIiwic29ydGFibGVzIiwicGFzdEZpcnN0SW52ZXJ0VGhyZXNoIiwiaXNDaXJjdW1zdGFudGlhbEludmVydCIsImdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsIiwiX3NpbGVudCIsInNhdmVkSW5wdXRDaGVja2VkIiwiZG9jdW1lbnRFeGlzdHMiLCJQb3NpdGlvbkdob3N0QWJzb2x1dGVseSIsIkNTU0Zsb2F0UHJvcGVydHkiLCJzdXBwb3J0RHJhZ2dhYmxlIiwic3VwcG9ydENzc1BvaW50ZXJFdmVudHMiLCJwb2ludGVyRXZlbnRzIiwiX2RldGVjdERpcmVjdGlvbiIsImVsQ1NTIiwiZWxXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImNoaWxkMSIsImNoaWxkMiIsImZpcnN0Q2hpbGRDU1MiLCJzZWNvbmRDaGlsZENTUyIsImZpcnN0Q2hpbGRXaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsInNlY29uZENoaWxkV2lkdGgiLCJmbGV4RGlyZWN0aW9uIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsInRvdWNoaW5nU2lkZUNoaWxkMiIsIl9wcmVwYXJlR3JvdXAiLCJ0b0ZuIiwicHVsbCIsInNhbWVHcm91cCIsImdyb3VwIiwib3RoZXJHcm91cCIsIm9yaWdpbmFsR3JvdXAiLCJjaGVja1B1bGwiLCJjaGVja1B1dCIsInB1dCIsInJldmVydENsb25lIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCIsInRvdWNoZXMiLCJuZWFyZXN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJzb21lIiwidGhyZXNob2xkIiwiZW1wdHlJbnNlcnRUaHJlc2hvbGQiLCJpbnNpZGVIb3Jpem9udGFsbHkiLCJpbnNpZGVWZXJ0aWNhbGx5IiwicmV0IiwiX29uRHJhZ092ZXIiLCJfY2hlY2tPdXRzaWRlVGFyZ2V0RWwiLCJfaXNPdXRzaWRlVGhpc0VsIiwic29ydCIsImRpc2FibGVkIiwic3RvcmUiLCJoYW5kbGUiLCJzd2FwVGhyZXNob2xkIiwiaW52ZXJ0U3dhcCIsImludmVydGVkU3dhcFRocmVzaG9sZCIsInJlbW92ZUNsb25lT25IaWRlIiwiZGlyZWN0aW9uIiwiZ2hvc3RDbGFzcyIsImNob3NlbkNsYXNzIiwiZHJhZ0NsYXNzIiwiaWdub3JlIiwicHJldmVudE9uRmlsdGVyIiwic2V0RGF0YSIsImRhdGFUcmFuc2ZlciIsInRleHRDb250ZW50IiwiZHJvcEJ1YmJsZSIsImRyYWdvdmVyQnViYmxlIiwiZGF0YUlkQXR0ciIsImRlbGF5IiwiZGVsYXlPblRvdWNoT25seSIsInRvdWNoU3RhcnRUaHJlc2hvbGQiLCJkZXZpY2VQaXhlbFJhdGlvIiwiZm9yY2VGYWxsYmFjayIsImZhbGxiYWNrQ2xhc3MiLCJmYWxsYmFja09uQm9keSIsImZhbGxiYWNrVG9sZXJhbmNlIiwiZmFsbGJhY2tPZmZzZXQiLCJzdXBwb3J0UG9pbnRlciIsIm5hdGl2ZURyYWdnYWJsZSIsIl9vblRhcFN0YXJ0IiwiX29uTW92ZSIsImRyYWdSZWN0IiwidGFyZ2V0UmVjdCIsIndpbGxJbnNlcnRBZnRlciIsInJldFZhbCIsIm9uTW92ZUZuIiwib25Nb3ZlIiwiZHJhZ2dlZFJlY3QiLCJyZWxhdGVkIiwicmVsYXRlZFJlY3QiLCJfZGlzYWJsZURyYWdnYWJsZSIsIl91bnNpbGVudCIsIl9nZW5lcmF0ZUlkIiwic3RyIiwiaHJlZiIsInN1bSIsImNoYXJDb2RlQXQiLCJfbmV4dFRpY2siLCJfY2FuY2VsTmV4dFRpY2siLCJfZ2V0RGlyZWN0aW9uIiwidG91Y2giLCJwb2ludGVyVHlwZSIsIm9yaWdpbmFsVGFyZ2V0Iiwic2hhZG93Um9vdCIsInBhdGgiLCJjb21wb3NlZFBhdGgiLCJyb290IiwiaW5wdXRzIiwiY2hlY2tlZCIsIl9zYXZlSW5wdXRDaGVja2VkU3RhdGUiLCJidXR0b24iLCJpc0NvbnRlbnRFZGl0YWJsZSIsImNyaXRlcmlhIiwiX3ByZXBhcmVEcmFnU3RhcnQiLCJkcmFnU3RhcnRGbiIsIm93bmVyRG9jdW1lbnQiLCJuZXh0U2libGluZyIsIl9sYXN0WCIsIl9sYXN0WSIsIl9vbkRyb3AiLCJfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzIiwiX3RyaWdnZXJEcmFnU3RhcnQiLCJfZGlzYWJsZURlbGF5ZWREcmFnIiwiX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlciIsIl9kcmFnU3RhcnRUaW1lciIsImFicyIsIl9vblRvdWNoTW92ZSIsIl9vbkRyYWdTdGFydCIsInNlbGVjdGlvbiIsImVtcHR5IiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiX2RyYWdTdGFydGVkIiwiZmFsbGJhY2siLCJfYXBwZW5kR2hvc3QiLCJfbnVsbGluZyIsIl9lbXVsYXRlRHJhZ092ZXIiLCJlbGVtZW50RnJvbVBvaW50IiwiZ2hvc3RNYXRyaXgiLCJyZWxhdGl2ZVNjcm9sbE9mZnNldCIsImR4IiwiZHkiLCJjc3NNYXRyaXgiLCJfaGlkZUNsb25lIiwiY2xvbmVJZCIsIl9sb29wSWQiLCJzZXRJbnRlcnZhbCIsImVmZmVjdEFsbG93ZWQiLCJfZHJhZ1N0YXJ0SWQiLCJyZXZlcnQiLCJ2ZXJ0aWNhbCIsImlzT3duZXIiLCJjYW5Tb3J0IiwiZnJvbVNvcnRhYmxlIiwiY29tcGxldGVkRmlyZWQiLCJkcmFnT3ZlckV2ZW50IiwiX2lnbm9yZVdoaWxlQW5pbWF0aW5nIiwiY29tcGxldGVkIiwiZWxMYXN0Q2hpbGQiLCJfZ2hvc3RJc0xhc3QiLCJjaGFuZ2VkIiwidGFyZ2V0QmVmb3JlRmlyc3RTd2FwIiwic2libGluZyIsImRpZmZlcmVudExldmVsIiwiZGlmZmVyZW50Um93Q29sIiwiZHJhZ0VsUzFPcHAiLCJkcmFnRWxTMk9wcCIsImRyYWdFbE9wcExlbmd0aCIsInRhcmdldFMxT3BwIiwidGFyZ2V0UzJPcHAiLCJ0YXJnZXRPcHBMZW5ndGgiLCJfZHJhZ0VsSW5Sb3dDb2x1bW4iLCJzaWRlMSIsInNjcm9sbGVkUGFzdFRvcCIsInNjcm9sbEJlZm9yZSIsImlzTGFzdFRhcmdldCIsIm1vdXNlT25BeGlzIiwidGFyZ2V0TGVuZ3RoIiwidGFyZ2V0UzEiLCJ0YXJnZXRTMiIsImludmVydCIsIl9nZXRJbnNlcnREaXJlY3Rpb24iLCJfZ2V0U3dhcERpcmVjdGlvbiIsImRyYWdJbmRleCIsIm5leHRFbGVtZW50U2libGluZyIsImFmdGVyIiwibW92ZVZlY3RvciIsImV4dHJhIiwiYXhpcyIsImluc2VydGlvbiIsIl9zaG93Q2xvbmUiLCJfb2ZmTW92ZUV2ZW50cyIsIl9vZmZVcEV2ZW50cyIsImNsZWFySW50ZXJ2YWwiLCJzYXZlIiwiaGFuZGxlRXZlbnQiLCJkcm9wRWZmZWN0IiwiX2dsb2JhbERyYWdPdmVyIiwidG9BcnJheSIsIm9yZGVyIiwiZ2V0QXR0cmlidXRlIiwiaXRlbXMiLCJkZXN0cm95IiwicXVlcnlTZWxlY3RvckFsbCIsInV0aWxzIiwiaXMiLCJleHRlbmQiLCJkc3QiLCJuZXh0VGljayIsImNhbmNlbE5leHRUaWNrIiwiZGV0ZWN0RGlyZWN0aW9uIiwiZWxlbWVudCIsIl9sZW4iLCJfa2V5Iiwic2Nyb2xsRWwiLCJzY3JvbGxSb290RWwiLCJsYXN0QXV0b1Njcm9sbFgiLCJsYXN0QXV0b1Njcm9sbFkiLCJ0b3VjaEV2dCQxIiwicG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwiLCJhdXRvU2Nyb2xscyIsInNjcm9sbGluZyIsImNsZWFyQXV0b1Njcm9sbHMiLCJhdXRvU2Nyb2xsIiwicGlkIiwiY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCIsImlzRmFsbGJhY2siLCJzY3JvbGwiLCJzY3JvbGxDdXN0b21GbiIsInNlbnMiLCJzY3JvbGxTZW5zaXRpdml0eSIsInNwZWVkIiwic2Nyb2xsU3BlZWQiLCJzY3JvbGxUaGlzSW5zdGFuY2UiLCJzY3JvbGxGbiIsImxheWVyc091dCIsImN1cnJlbnRQYXJlbnQiLCJjYW5TY3JvbGxYIiwiY2FuU2Nyb2xsWSIsInNjcm9sbFBvc1giLCJzY3JvbGxQb3NZIiwidngiLCJ2eSIsImxheWVyIiwic2Nyb2xsT2Zmc2V0WSIsInNjcm9sbE9mZnNldFgiLCJidWJibGVTY3JvbGwiLCJkcm9wIiwidG9Tb3J0YWJsZSIsImNoYW5nZWRUb3VjaGVzIiwib25TcGlsbCIsIlJldmVydCIsIlJlbW92ZSIsInN0YXJ0SW5kZXgiLCJkcmFnU3RhcnQiLCJfcmVmMiIsIl9yZWYzIiwiX3JlZjQiLCJwYXJlbnRTb3J0YWJsZSIsIkF1dG9TY3JvbGwiLCJfaGFuZGxlQXV0b1Njcm9sbCIsIl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwiLCJkcmFnT3ZlckNvbXBsZXRlZCIsImRyYWdPdmVyQnViYmxlIiwibnVsbGluZyIsIm9nRWxlbVNjcm9sbGVyIiwibmV3RWxlbSIsIm5vdGVUZW1wbGF0ZSIsInRyYXNoVGVtcGxhdGUiLCJnZXREYXRhIiwic2V0dXAiLCJOb3RlcyIsImVsZW1lbnRzIiwibmV3QnRuIiwidHJhc2hCdG4iLCJkaXNwbGF5VHJhc2giLCJldiIsInNoaWZ0S2V5IiwiY3RybEtleSIsIm9uRW5kIiwiZ2V0Tm90ZUJ5SWQiLCJub3RlcyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRTYXZlZE5vdGVzIiwiZ2V0SXRlbSIsIm5vdGUiLCJzZXR1cE5vdGVzIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNlbGVjdE5vZGVDb250ZW50cyIsImFkZFJhbmdlIiwic2V0dXBOb3RlIiwiZGF0YXNldCIsImNvbG9yU2VsZWN0IiwiZGVsZXRlTm90ZSIsInRpbWVvdXRJZCIsInVwZGF0ZU5vdGUiLCJibHVyIiwiY2xvc2VCdG4iLCJidG4iLCJyZXN0b3JlTm90ZSIsInBhcmVudEVsZW1lbnQiXSwibWFwcGluZ3MiOiJhQUdFLElBQUlBLEVBQTBCQyxPQUF5QixpQkFDdkRBLE9BQXlCLGlCQUN6QixTQUFrQ0MsRUFBU0MsSUF1UzNDLFNBQTJCRCxFQUFTQyxHQUNuQyxJQUFLQyxFQUFxQkYsS0FBYUcsRUFBcUJILEdBQzNELE9BRUQsSUFBSyxJQUFJSSxLQURURCxFQUFxQkgsSUFBVyxFQUNYQyxFQUNoQkksT0FBT0MsVUFBVUMsZUFBZUMsS0FBS1AsRUFBYUcsS0FDckRLLEVBQVVMLEdBQVlILEVBQVlHLElBR1YsS0FBcEJNLEdBQThDLElBQXJCQyxHQUM5QkMsSUFoVERDLENBQWtCYixFQUFTQyxHQUN2QkgsR0FBeUJBLEVBQXdCRSxFQUFTQyxJQXVEL0QsSUFLSWEsRUFMQUMsR0FBbUIsRUFFbkJDLEVBQWlCLHVCQUVqQkMsRUFBdUIsR0FHdkJDLEVBQW9CLEdBRXBCQyxFQUF3QixHQUc1QixTQUFTQyxFQUFpQmhCLEdBQ3pCLElBQUlpQixFQUFLQyxFQUFpQmxCLEdBQzFCLElBQUtpQixFQUFJLE9BQU9FLEVBQ2hCLElBQUlDLEVBQUssU0FBU0MsR0FzQmpCLE9BckJJSixFQUFHSyxJQUFJQyxRQUNOTCxFQUFpQkcsSUFDeUMsSUFBekRILEVBQWlCRyxHQUFTRyxRQUFRQyxRQUFRekIsSUFDN0NrQixFQUFpQkcsR0FBU0csUUFBUUUsS0FBSzFCLElBR3hDYyxFQUFvQixDQUFDZCxHQUNyQlUsRUFBd0JXLElBRWEsSUFBbENKLEVBQUdVLFNBQVNGLFFBQVFKLElBQ3ZCSixFQUFHVSxTQUFTRCxLQUFLTCxLQUdsQk8sUUFBUUMsS0FDUCw0QkFDQ1IsRUFDQSwwQkFDQXJCLEdBRUZjLEVBQW9CLElBRWRLLEVBQW9CRSxJQUV4QlMsRUFBZ0IsU0FBdUJDLEdBQzFDLE1BQU8sQ0FDTkMsY0FBYyxFQUNkQyxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZixFQUFvQlksSUFFNUJJLElBQUssU0FBU0MsR0FDYmpCLEVBQW9CWSxHQUFRSyxLQUkvQixJQUFLLElBQUlMLEtBQVFaLEVBRWZsQixPQUFPQyxVQUFVQyxlQUFlQyxLQUFLZSxFQUFxQlksSUFDakQsTUFBVEEsR0FDUyxNQUFUQSxHQUVBOUIsT0FBT29DLGVBQWVqQixFQUFJVyxFQUFNRCxFQUFjQyxJQTJCaEQsT0F4QkFYLEVBQUdrQixFQUFJLFNBQVMxQyxHQUdmLE1BRmtCLFVBQWQyQyxHQUF1QkMsRUFBYSxXQUN4Q2pDLElBQ09ZLEVBQW9CbUIsRUFBRTFDLEdBQVM2QyxLQUFLQyxHQUFvQixTQUFTQyxHQUV2RSxNQURBRCxJQUNNQyxLQUdQLFNBQVNELElBQ1JuQyxJQUNrQixZQUFkZ0MsSUFDRUssRUFBbUJoRCxJQUN2QmlELEVBQXFCakQsR0FFRyxJQUFyQlcsR0FBOEMsSUFBcEJELEdBQzdCRSxPQUtKWSxFQUFHMEIsRUFBSSxTQUFTVixFQUFPVyxHQUV0QixPQURXLEVBQVBBLElBQVVYLEVBQVFoQixFQUFHZ0IsSUFDbEJqQixFQUFvQjJCLEVBQUVWLEdBQWMsRUFBUFcsSUFFOUIzQixFQUlSLFNBQVM0QixFQUFnQmhELEdBQ3hCLElBQUlzQixFQUFNLENBRVQyQixzQkFBdUIsR0FDdkJDLHNCQUF1QixHQUN2QkMsZUFBZSxFQUNmQyxlQUFlLEVBQ2ZDLGtCQUFrQixFQUNsQkMsaUJBQWtCLEdBQ2xCQyxNQUFPN0MsSUFBMEJWLEVBR2pDdUIsUUFBUSxFQUNSaUMsT0FBUSxTQUFTQyxFQUFLQyxHQUNyQixRQUFZQyxJQUFSRixFQUFtQm5DLEVBQUk2QixlQUFnQixPQUN0QyxHQUFtQixtQkFBUk0sRUFBb0JuQyxFQUFJNkIsY0FBZ0JNLE9BQ25ELEdBQW1CLGlCQUFSQSxFQUNmLElBQUssSUFBSUcsRUFBSSxFQUFHQSxFQUFJSCxFQUFJSSxPQUFRRCxJQUMvQnRDLEVBQUkyQixzQkFBc0JRLEVBQUlHLElBQU1GLEdBQVksa0JBQzdDcEMsRUFBSTJCLHNCQUFzQlEsR0FBT0MsR0FBWSxjQUVuREksUUFBUyxTQUFTTCxHQUNqQixRQUFZRSxJQUFSRixFQUFtQm5DLEVBQUk4QixlQUFnQixPQUN0QyxHQUFtQixpQkFBUkssRUFDZixJQUFLLElBQUlHLEVBQUksRUFBR0EsRUFBSUgsRUFBSUksT0FBUUQsSUFDL0J0QyxFQUFJNEIsc0JBQXNCTyxFQUFJRyxLQUFNLE9BQ2pDdEMsRUFBSTRCLHNCQUFzQk8sSUFBTyxHQUV2Q00sUUFBUyxTQUFTTCxHQUNqQnBDLEVBQUlnQyxpQkFBaUI1QixLQUFLZ0MsSUFFM0JNLGtCQUFtQixTQUFTTixHQUMzQnBDLEVBQUlnQyxpQkFBaUI1QixLQUFLZ0MsSUFFM0JPLHFCQUFzQixTQUFTUCxHQUM5QixJQUFJUSxFQUFNNUMsRUFBSWdDLGlCQUFpQjdCLFFBQVFpQyxHQUNuQ1EsR0FBTyxHQUFHNUMsRUFBSWdDLGlCQUFpQmEsT0FBT0QsRUFBSyxJQUVoREUsV0FBWSxXQUVYLE9BREFDLEtBQUtoQixrQkFBbUIsRUFDaEJkLEdBQ1AsSUFBSyxRQUNKbEMsRUFBWSxJQUNGTCxHQUFZc0UsRUFBUXRFLEdBQzlCd0MsRUFBYSxTQUNiLE1BQ0QsSUFBSyxRQUNKK0IsRUFBMEJ2RSxHQUMxQixNQUNELElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssU0FDSHdFLEVBQ0FBLEdBQStCLElBQUk5QyxLQUFLMUIsS0FTNUN5RSxNQUFPQyxFQUNQQyxNQUFPQyxFQUNQQyxPQUFRLFNBQVNDLEdBQ2hCLElBQUtBLEVBQUcsT0FBT3ZDLEVBQ2Z3QyxFQUFrQnJELEtBQUtvRCxJQUV4QkUsaUJBQWtCLFNBQVNGLEdBQzFCQyxFQUFrQnJELEtBQUtvRCxJQUV4Qkcsb0JBQXFCLFNBQVNILEdBQzdCLElBQUlaLEVBQU1hLEVBQWtCdEQsUUFBUXFELEdBQ2hDWixHQUFPLEdBQUdhLEVBQWtCWixPQUFPRCxFQUFLLElBSTdDZ0IsS0FBTXJFLEVBQXFCYixJQUc1QixPQURBVSxPQUF3QmlELEVBQ2pCckMsRUFHUixJQUFJeUQsRUFBb0IsR0FDcEJ4QyxFQUFZLE9BRWhCLFNBQVNDLEVBQWEyQyxHQUNyQjVDLEVBQVk0QyxFQUNaLElBQUssSUFBSXZCLEVBQUksRUFBR0EsRUFBSW1CLEVBQWtCbEIsT0FBUUQsSUFDN0NtQixFQUFrQm5CLEdBQUd4RCxLQUFLLEtBQU0rRSxHQUlsQyxJQUtJQyxFQUdBL0UsRUFBV2dGLEVBQWtCYixFQVI3QmxFLEVBQWtCLEVBQ2xCQyxFQUFtQixFQUNuQnFDLEVBQXFCLEdBQ3JCN0MsRUFBdUIsR0FDdkJELEVBQXVCLEdBTTNCLFNBQVN3RixFQUFXQyxHQUVuQixPQURnQkEsRUFBSyxLQUFPQSxHQUNUQSxFQUFLQSxFQUd6QixTQUFTYixFQUFTQyxHQUNqQixHQUFrQixTQUFkcEMsRUFDSCxNQUFNLElBQUlpRCxNQUFNLDBDQUlqQixPQUZBN0UsRUFBbUJnRSxFQUNuQm5DLEVBQWEsVUFwUGVpRCxFQTZDTCxJQTVDdkJBLEVBQWlCQSxHQUFrQixJQUM1QixJQUFJQyxTQUFRLFNBQVNDLEVBQVNDLEdBQ3BDLEdBQThCLG9CQUFuQkMsZUFDVixPQUFPRCxFQUFPLElBQUlKLE1BQU0sdUJBRXpCLElBQ0MsSUFBSW5FLEVBQVUsSUFBSXdFLGVBQ2RDLEVBQWMzRSxFQUFvQjRFLEVBQUksdUJBQzFDMUUsRUFBUTJFLEtBQUssTUFBT0YsR0FBYSxHQUNqQ3pFLEVBQVE0RSxRQUFVUixFQUNsQnBFLEVBQVE2RSxLQUFLLE1BQ1osTUFBT3ZELEdBQ1IsT0FBT2lELEVBQU9qRCxHQUVmdEIsRUFBUThFLG1CQUFxQixXQUM1QixHQUEyQixJQUF2QjlFLEVBQVErRSxXQUNaLEdBQXVCLElBQW5CL0UsRUFBUXdELE9BRVhlLEVBQ0MsSUFBSUosTUFBTSx1QkFBeUJNLEVBQWMscUJBRTVDLEdBQXVCLE1BQW5CekUsRUFBUXdELE9BRWxCYyxTQUNNLEdBQXVCLE1BQW5CdEUsRUFBUXdELFFBQXFDLE1BQW5CeEQsRUFBUXdELE9BRTVDZSxFQUFPLElBQUlKLE1BQU0sdUJBQXlCTSxFQUFjLGlCQUNsRCxDQUVOLElBQ0MsSUFBSU8sRUFBU0MsS0FBS0MsTUFBTWxGLEVBQVFtRixjQUMvQixNQUFPbEUsR0FFUixZQURBc0QsRUFBT3RELEdBR1JxRCxFQUFRVSxTQWlObUM1RCxNQUFLLFNBQVM0RCxHQUMzRCxJQUFLQSxFQUVKLE9BREE3RCxFQUFhaUUsSUFBK0IsUUFBVSxRQUMvQyxLQUVSMUcsRUFBdUIsR0FDdkI2QyxFQUFxQixHQUNyQjlDLEVBQXVCdUcsRUFBT0ssRUFDOUJyQixFQUFtQmdCLEVBQU9NLEVBRTFCbkUsRUFBYSxXQUNiLElBQUlvRSxFQUFVLElBQUlsQixTQUFRLFNBQVNDLEVBQVNDLEdBQzNDUixFQUFjLENBQ2JPLFFBQVNBLEVBQ1RDLE9BQVFBLE1BR1Z2RixFQUFZLEdBYVosT0FUQ3dDLEVBSGEsR0FNQyxZQUFkTixHQUNxQixJQUFyQmhDLEdBQ29CLElBQXBCRCxHQUVBRSxJQUVNb0csS0FuUlQsSUFBNkJuQixFQXNTN0IsU0FBUzVDLEVBQXFCakQsR0FDeEJFLEVBQXFCRixJQUd6QkcsRUFBcUJILElBQVcsRUFDaENVLElBcFRGLFNBQWdDVixHQUMvQixJQUFJaUgsRUFBU0MsU0FBU0MsY0FBYyxVQUNwQ0YsRUFBT0csUUFBVSxRQUNqQkgsRUFBT0ksSUFBTTlGLEVBQW9CNEUsRUFBSSxXQUFhbkcsRUFBVSxjQUU1RGtILFNBQVNJLEtBQUtDLFlBQVlOLEdBZ1R6Qk8sQ0FBdUJ4SCxJQUp2QmdELEVBQW1CaEQsSUFBVyxFQVFoQyxTQUFTWSxJQUNSZ0MsRUFBYSxTQUNiLElBQUk2RSxFQUFXakMsRUFFZixHQURBQSxFQUFjLEtBQ1RpQyxFQUNMLEdBQUkxRyxFQUlIK0UsUUFBUUMsVUFDTmxELE1BQUssV0FDTCxPQUFPbUMsRUFBU2pFLE1BRWhCOEIsTUFDQSxTQUFTNkUsR0FDUkQsRUFBUzFCLFFBQVEyQixNQUVsQixTQUFTM0UsR0FDUjBFLEVBQVN6QixPQUFPakQsVUFHYixDQUNOLElBQUk0RSxFQUFrQixHQUN0QixJQUFLLElBQUloQyxLQUFNbEYsRUFDVkosT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBV2tGLElBQ25EZ0MsRUFBZ0I3RixLQUFLNEQsRUFBV0MsSUFHbEM4QixFQUFTMUIsUUFBUTRCLElBSW5CLFNBQVMzQyxFQUFTNEMsR0FDakIsR0FBa0IsVUFBZGpGLEVBQ0gsTUFBTSxJQUFJaUQsTUFBTSwyQ0FFakIsT0FHRCxTQUFTaUMsRUFBaUJELEdBR3pCLElBQUlFLEVBQ0E5RCxFQUNBK0QsRUFDQUMsRUFDQTVILEVBRUosU0FBUzZILEVBQWlCQyxHQVV6QixJQVRBLElBQUlQLEVBQWtCLENBQUNPLEdBQ25CQyxFQUF1QixHQUV2QkMsRUFBUVQsRUFBZ0JVLEtBQUksU0FBUzFDLEdBQ3hDLE1BQU8sQ0FDTjJDLE1BQU8sQ0FBQzNDLEdBQ1JBLEdBQUlBLE1BR0N5QyxFQUFNbkUsT0FBUyxHQUFHLENBQ3hCLElBQUlzRSxFQUFZSCxFQUFNSSxNQUNsQnBJLEVBQVdtSSxFQUFVNUMsR0FDckIyQyxFQUFRQyxFQUFVRCxNQUV0QixJQURBTixFQUFTMUcsRUFBaUJsQixPQUd4QjRILEVBQU90RyxJQUFJNkIsZUFBa0J5RSxFQUFPdEcsSUFBSStCLGtCQUYxQyxDQUtBLEdBQUl1RSxFQUFPdEcsSUFBSThCLGNBQ2QsTUFBTyxDQUNOaUYsS0FBTSxnQkFDTkgsTUFBT0EsRUFDUGxJLFNBQVVBLEdBR1osR0FBSTRILEVBQU90RyxJQUFJaUMsTUFDZCxNQUFPLENBQ044RSxLQUFNLGFBQ05ILE1BQU9BLEVBQ1BsSSxTQUFVQSxHQUdaLElBQUssSUFBSTRELEVBQUksRUFBR0EsRUFBSWdFLEVBQU9wRyxRQUFRcUMsT0FBUUQsSUFBSyxDQUMvQyxJQUFJMEUsRUFBV1YsRUFBT3BHLFFBQVFvQyxHQUMxQjJFLEVBQVNySCxFQUFpQm9ILEdBQzlCLEdBQUtDLEVBQUwsQ0FDQSxHQUFJQSxFQUFPakgsSUFBSTRCLHNCQUFzQmxELEdBQ3BDLE1BQU8sQ0FDTnFJLEtBQU0sV0FDTkgsTUFBT0EsRUFBTU0sT0FBTyxDQUFDRixJQUNyQnRJLFNBQVVBLEVBQ1ZzSSxTQUFVQSxJQUcrQixJQUF2Q2YsRUFBZ0I5RixRQUFRNkcsS0FDeEJDLEVBQU9qSCxJQUFJMkIsc0JBQXNCakQsSUFDL0IrSCxFQUFxQk8sS0FDekJQLEVBQXFCTyxHQUFZLElBQ2xDRyxFQUFZVixFQUFxQk8sR0FBVyxDQUFDdEksYUFHdkMrSCxFQUFxQk8sR0FDNUJmLEVBQWdCN0YsS0FBSzRHLEdBQ3JCTixFQUFNdEcsS0FBSyxDQUNWd0csTUFBT0EsRUFBTU0sT0FBTyxDQUFDRixJQUNyQi9DLEdBQUkrQyxTQUtQLE1BQU8sQ0FDTkQsS0FBTSxXQUNOckksU0FBVThILEVBQ1ZQLGdCQUFpQkEsRUFDakJRLHFCQUFzQkEsR0FJeEIsU0FBU1UsRUFBWUMsRUFBR0MsR0FDdkIsSUFBSyxJQUFJL0UsRUFBSSxFQUFHQSxFQUFJK0UsRUFBRTlFLE9BQVFELElBQUssQ0FDbEMsSUFBSWdGLEVBQU9ELEVBQUUvRSxJQUNZLElBQXJCOEUsRUFBRWpILFFBQVFtSCxJQUFjRixFQUFFaEgsS0FBS2tILElBakZyQ25DLElBdUZBLElBQUlzQixFQUF1QixHQUN2QlIsRUFBa0IsR0FDbEJzQixFQUFnQixHQUVoQkMsRUFBd0IsV0FDM0JsSCxRQUFRQyxLQUNQLDRCQUE4QnlGLEVBQU90SCxTQUFXLHlCQUlsRCxJQUFLLElBQUl1RixLQUFNbEYsRUFDZCxHQUFJSixPQUFPQyxVQUFVQyxlQUFlQyxLQUFLQyxFQUFXa0YsR0FBSyxDQUd4RCxJQUFJK0IsRUFGSnRILEVBQVdzRixFQUFXQyxHQUlyQitCLEVBREdqSCxFQUFVa0YsR0FDSnNDLEVBQWlCN0gsR0FFakIsQ0FDUnFJLEtBQU0sV0FDTnJJLFNBQVV1RixHQUlaLElBQUl3RCxHQUFhLEVBQ2JDLEdBQVUsRUFDVkMsR0FBWSxFQUNaQyxFQUFZLEdBSWhCLE9BSEk1QixFQUFPWSxRQUNWZ0IsRUFBWSx5QkFBMkI1QixFQUFPWSxNQUFNaUIsS0FBSyxTQUVsRDdCLEVBQU9lLE1BQ2QsSUFBSyxnQkFDQWIsRUFBUTRCLFlBQVk1QixFQUFRNEIsV0FBVzlCLEdBQ3RDRSxFQUFRNkIsaUJBQ1pOLEVBQWEsSUFBSXZELE1BQ2hCLG9DQUNDOEIsRUFBT3RILFNBQ1BrSixJQUVILE1BQ0QsSUFBSyxXQUNBMUIsRUFBUTRCLFlBQVk1QixFQUFRNEIsV0FBVzlCLEdBQ3RDRSxFQUFRNkIsaUJBQ1pOLEVBQWEsSUFBSXZELE1BQ2hCLDJDQUNDOEIsRUFBT3RILFNBQ1AsT0FDQXNILEVBQU9nQixTQUNQWSxJQUVILE1BQ0QsSUFBSyxhQUNBMUIsRUFBUThCLGNBQWM5QixFQUFROEIsYUFBYWhDLEdBQzFDRSxFQUFRK0IsbUJBQ1pSLEVBQWEsSUFBSXZELE1BQ2hCLG1CQUFxQnhGLEVBQVcsbUJBQXFCa0osSUFFdkQsTUFDRCxJQUFLLFdBQ0ExQixFQUFRZ0MsWUFBWWhDLEVBQVFnQyxXQUFXbEMsR0FDM0MwQixHQUFVLEVBQ1YsTUFDRCxJQUFLLFdBQ0F4QixFQUFRaUMsWUFBWWpDLEVBQVFpQyxXQUFXbkMsR0FDM0MyQixHQUFZLEVBQ1osTUFDRCxRQUNDLE1BQU0sSUFBSXpELE1BQU0sb0JBQXNCOEIsRUFBT2UsTUFFL0MsR0FBSVUsRUFFSCxPQURBdkcsRUFBYSxTQUNOa0QsUUFBUUUsT0FBT21ELEdBRXZCLEdBQUlDLEVBR0gsSUFBS2hKLEtBRkw2SSxFQUFjN0ksR0FBWUssRUFBVUwsR0FDcEN5SSxFQUFZbEIsRUFBaUJELEVBQU9DLGlCQUNuQkQsRUFBT1MscUJBRXRCOUgsT0FBT0MsVUFBVUMsZUFBZUMsS0FDL0JrSCxFQUFPUyxxQkFDUC9ILEtBR0krSCxFQUFxQi9ILEtBQ3pCK0gsRUFBcUIvSCxHQUFZLElBQ2xDeUksRUFDQ1YsRUFBcUIvSCxHQUNyQnNILEVBQU9TLHFCQUFxQi9ILEtBSzVCaUosSUFDSFIsRUFBWWxCLEVBQWlCLENBQUNELEVBQU90SCxXQUNyQzZJLEVBQWM3SSxHQUFZOEksR0FNN0IsSUEyQkk1RSxFQTNCQXdGLEVBQThCLEdBQ2xDLElBQUs5RixFQUFJLEVBQUdBLEVBQUkyRCxFQUFnQjFELE9BQVFELElBQ3ZDNUQsRUFBV3VILEVBQWdCM0QsR0FFMUIxQyxFQUFpQmxCLElBQ2pCa0IsRUFBaUJsQixHQUFVc0IsSUFBSTZCLGVBRS9CMEYsRUFBYzdJLEtBQWM4SSxJQUUzQjVILEVBQWlCbEIsR0FBVXNCLElBQUkrQixrQkFFaENxRyxFQUE0QmhJLEtBQUssQ0FDaENrRyxPQUFRNUgsRUFDUndCLFFBQVNOLEVBQWlCbEIsR0FBVXdCLFFBQVFtSSxRQUM1Q0MsYUFBYzFJLEVBQWlCbEIsR0FBVXNCLElBQUk2QixnQkFNaERYLEVBQWEsV0FDYnZDLE9BQU80SixLQUFLL0osR0FBc0JnSyxTQUFRLFNBQVNsSyxJQUNaLElBQWxDRSxFQUFxQkYsSUE5akIzQixTQUF5QkEsVUFDakJtSyxnQkFBZ0JuSyxHQThqQnJCb0ssQ0FBZ0JwSyxNQUtsQixJQXFDSXFLLEVBQ0FDLEVBdENBbEMsRUFBUVQsRUFBZ0JvQyxRQUM1QixLQUFPM0IsRUFBTW5FLE9BQVMsR0FHckIsR0FGQTdELEVBQVdnSSxFQUFNSSxNQUNqQlIsRUFBUzFHLEVBQWlCbEIsR0FDMUIsQ0FFQSxJQUFJa0YsRUFBTyxHQUdQaUYsRUFBa0J2QyxFQUFPdEcsSUFBSWdDLGlCQUNqQyxJQUFLcUUsRUFBSSxFQUFHQSxFQUFJd0MsRUFBZ0J0RyxPQUFROEQsS0FDdkNELEVBQUt5QyxFQUFnQnhDLElBQ2xCekMsR0FjSixJQVpBckUsRUFBcUJiLEdBQVlrRixFQUdqQzBDLEVBQU90RyxJQUFJQyxRQUFTLFNBR2JMLEVBQWlCbEIsVUFHakIrSCxFQUFxQi9ILEdBR3ZCMkgsRUFBSSxFQUFHQSxFQUFJQyxFQUFPakcsU0FBU2tDLE9BQVE4RCxJQUFLLENBQzVDLElBQUl5QyxFQUFRbEosRUFBaUIwRyxFQUFPakcsU0FBU2dHLElBQ3hDeUMsS0FDTGxHLEVBQU1rRyxFQUFNNUksUUFBUUMsUUFBUXpCLEtBQ2pCLEdBQ1ZvSyxFQUFNNUksUUFBUTJDLE9BQU9ELEVBQUssS0FRN0IsSUFBS2xFLEtBQVkrSCxFQUNoQixHQUNDOUgsT0FBT0MsVUFBVUMsZUFBZUMsS0FBSzJILEVBQXNCL0gsS0FFM0Q0SCxFQUFTMUcsRUFBaUJsQixJQUd6QixJQURBa0ssRUFBNkJuQyxFQUFxQi9ILEdBQzdDMkgsRUFBSSxFQUFHQSxFQUFJdUMsRUFBMkJyRyxPQUFROEQsSUFDbERzQyxFQUFhQyxFQUEyQnZDLElBQ3hDekQsRUFBTTBELEVBQU9qRyxTQUFTRixRQUFRd0ksS0FDbkIsR0FBR3JDLEVBQU9qRyxTQUFTd0MsT0FBT0QsRUFBSyxHQU85QzFCLEVBQWEsY0FFWW1CLElBQXJCMEIsSUFDSHpFLEVBQWlCeUUsRUFDakJBLE9BQW1CMUIsR0FLcEIsSUFBSzNELEtBSExLLE9BQVlzRCxFQUdLa0YsRUFDWjVJLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUt5SSxFQUFlN0ksS0FDdkRzRSxFQUFRdEUsR0FBWTZJLEVBQWM3SSxJQUtwQyxJQUFJcUssRUFBUSxLQUNaLElBQUtySyxLQUFZK0gsRUFDaEIsR0FDQzlILE9BQU9DLFVBQVVDLGVBQWVDLEtBQUsySCxFQUFzQi9ILEtBRTNENEgsRUFBUzFHLEVBQWlCbEIsSUFDZCxDQUNYa0ssRUFBNkJuQyxFQUFxQi9ILEdBQ2xELElBQUlzSyxFQUFZLEdBQ2hCLElBQUsxRyxFQUFJLEVBQUdBLEVBQUlzRyxFQUEyQnJHLE9BQVFELElBR2xELEdBRkFxRyxFQUFhQyxFQUEyQnRHLEdBQ3hDOEQsRUFBS0UsRUFBT3RHLElBQUkyQixzQkFBc0JnSCxHQUM5QixDQUNQLElBQStCLElBQTNCSyxFQUFVN0ksUUFBUWlHLEdBQVksU0FDbEM0QyxFQUFVNUksS0FBS2dHLEdBR2pCLElBQUs5RCxFQUFJLEVBQUdBLEVBQUkwRyxFQUFVekcsT0FBUUQsSUFBSyxDQUN0QzhELEVBQUs0QyxFQUFVMUcsR0FDZixJQUNDOEQsRUFBR3dDLEdBQ0YsTUFBT3ZILEdBQ0o2RSxFQUFRK0MsV0FDWC9DLEVBQVErQyxVQUFVLENBQ2pCbEMsS0FBTSxpQkFDTnJJLFNBQVVBLEVBQ1Z3SyxhQUFjTixFQUEyQnRHLEdBQ3pDeUcsTUFBTzFILElBR0o2RSxFQUFRaUQsZUFDUEosSUFBT0EsRUFBUTFILEtBUzFCLElBQUtpQixFQUFJLEVBQUdBLEVBQUk4RixFQUE0QjdGLE9BQVFELElBQUssQ0FDeEQsSUFBSWdGLEVBQU9jLEVBQTRCOUYsR0FDdkM1RCxFQUFXNEksRUFBS2hCLE9BQ2hCOUcsRUFBb0I4SCxFQUFLcEgsUUFDekJkLEVBQXdCVixFQUN4QixJQUNDbUIsRUFBb0JuQixHQUNuQixNQUFPMkMsR0FDUixHQUFpQyxtQkFBdEJpRyxFQUFLZ0IsYUFDZixJQUNDaEIsRUFBS2dCLGFBQWFqSCxHQUNqQixNQUFPK0gsR0FDSmxELEVBQVErQyxXQUNYL0MsRUFBUStDLFVBQVUsQ0FDakJsQyxLQUFNLG9DQUNOckksU0FBVUEsRUFDVnFLLE1BQU9LLEVBQ1BDLGNBQWVoSSxJQUdaNkUsRUFBUWlELGVBQ1BKLElBQU9BLEVBQVFLLEdBRWhCTCxJQUFPQSxFQUFRMUgsUUFHakI2RSxFQUFRK0MsV0FDWC9DLEVBQVErQyxVQUFVLENBQ2pCbEMsS0FBTSxzQkFDTnJJLFNBQVVBLEVBQ1ZxSyxNQUFPMUgsSUFHSjZFLEVBQVFpRCxlQUNQSixJQUFPQSxFQUFRMUgsSUFPeEIsR0FBSTBILEVBRUgsT0FEQTdILEVBQWEsUUFDTmtELFFBQVFFLE9BQU95RSxHQUd2QixHQUFJN0YsRUFDSCxPQUFPaUQsRUFBaUJELEdBQVMvRSxNQUFLLFNBQVNtSSxHQUk5QyxPQUhBckQsRUFBZ0J1QyxTQUFRLFNBQVM5SixHQUM1QjRLLEVBQUtuSixRQUFRekIsR0FBWSxHQUFHNEssRUFBS2xKLEtBQUsxQixNQUVwQzRLLEtBS1QsT0FEQXBJLEVBQWEsUUFDTixJQUFJa0QsU0FBUSxTQUFTQyxHQUMzQkEsRUFBUTRCLE1BcllGRSxDQURQRCxFQUFVQSxHQUFXLElBMFl0QixTQUFTZixJQUNSLEdBQUlqQyxFQUlILE9BSEtuRSxJQUFXQSxFQUFZLElBQzVCbUUsRUFBNEJzRixRQUFRdkYsR0FDcENDLE9BQThCYixHQUN2QixFQUlULFNBQVNZLEVBQTBCdkUsR0FDN0JDLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtDLEVBQVdMLEtBQ3BESyxFQUFVTCxHQUFZc0UsRUFBUXRFLElBSWhDLElBQUlrQixFQUFtQixHQUd2QixTQUFTQyxFQUFvQm5CLEdBRzVCLEdBQUdrQixFQUFpQmxCLEdBQ25CLE9BQU9rQixFQUFpQmxCLEdBQVU2SyxRQUduQyxJQUFJakQsRUFBUzFHLEVBQWlCbEIsR0FBWSxDQUN6QzRELEVBQUc1RCxFQUNIOEUsR0FBRyxFQUNIK0YsUUFBUyxHQUNUdkosSUFBSzBCLEVBQWdCaEQsR0FDckJ3QixTQUFVVCxFQUF3QkQsRUFBbUJBLEVBQW9CLEdBQUlDLEdBQzdFWSxTQUFVLElBVVgsT0FOQTJDLEVBQVF0RSxHQUFVSSxLQUFLd0gsRUFBT2lELFFBQVNqRCxFQUFRQSxFQUFPaUQsUUFBUzdKLEVBQWlCaEIsSUFHaEY0SCxFQUFPOUMsR0FBSSxFQUdKOEMsRUFBT2lELFFBS2YxSixFQUFvQjJKLEVBQUl4RyxFQUd4Qm5ELEVBQW9CdUYsRUFBSXhGLEVBR3hCQyxFQUFvQjRKLEVBQUksU0FBU0YsRUFBUzlJLEVBQU1pSixHQUMzQzdKLEVBQW9COEosRUFBRUosRUFBUzlJLElBQ2xDOUIsT0FBT29DLGVBQWV3SSxFQUFTOUksRUFBTSxDQUFFRSxZQUFZLEVBQU1DLElBQUs4SSxLQUtoRTdKLEVBQW9CK0osRUFBSSxTQUFTTCxHQUNYLG9CQUFYTSxRQUEwQkEsT0FBT0MsYUFDMUNuTCxPQUFPb0MsZUFBZXdJLEVBQVNNLE9BQU9DLFlBQWEsQ0FBRWhKLE1BQU8sV0FFN0RuQyxPQUFPb0MsZUFBZXdJLEVBQVMsYUFBYyxDQUFFekksT0FBTyxLQVF2RGpCLEVBQW9CMkIsRUFBSSxTQUFTVixFQUFPVyxHQUV2QyxHQURVLEVBQVBBLElBQVVYLEVBQVFqQixFQUFvQmlCLElBQy9CLEVBQVBXLEVBQVUsT0FBT1gsRUFDcEIsR0FBVyxFQUFQVyxHQUE4QixpQkFBVlgsR0FBc0JBLEdBQVNBLEVBQU1pSixXQUFZLE9BQU9qSixFQUNoRixJQUFJa0osRUFBS3JMLE9BQU9zTCxPQUFPLE1BR3ZCLEdBRkFwSyxFQUFvQitKLEVBQUVJLEdBQ3RCckwsT0FBT29DLGVBQWVpSixFQUFJLFVBQVcsQ0FBRXJKLFlBQVksRUFBTUcsTUFBT0EsSUFDdEQsRUFBUFcsR0FBNEIsaUJBQVRYLEVBQW1CLElBQUksSUFBSW9KLEtBQU9wSixFQUFPakIsRUFBb0I0SixFQUFFTyxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT3BKLEVBQU1vSixJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJuSyxFQUFvQnVLLEVBQUksU0FBUzlELEdBQ2hDLElBQUlvRCxFQUFTcEQsR0FBVUEsRUFBT3lELFdBQzdCLFdBQXdCLE9BQU96RCxFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBekcsRUFBb0I0SixFQUFFQyxFQUFRLElBQUtBLEdBQzVCQSxHQUlSN0osRUFBb0I4SixFQUFJLFNBQVNVLEVBQVFDLEdBQVksT0FBTzNMLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUt1TCxFQUFRQyxJQUd6R3pLLEVBQW9CNEUsRUFBSSxHQUd4QjVFLEVBQW9Cd0YsRUFBSSxXQUFhLE9BQU8vRixHQUlyQ0ksRUFBaUIsRUFBakJBLENBQW9CRyxFQUFvQjBLLEVBQUksRyxnQkM3MEJyRCxNQUFNLE1BQUV4QixFQUFLLEtBQUV5QixFQUFJLEtBQUVqSyxHQUFTRCxRQUN4Qm1LLEVBQU0sQ0FDVjFCLE1BQU9BLEVBQU1vQixLQUFLN0osUUFBUyxVQUMzQmtLLEtBQU1BLEVBQUtMLEtBQUs3SixRQUFTLFVBQ3pCb0ssUUFBUywwQkFDVG5LLEtBQU1BLEVBQUs0SixLQUFLN0osUUFBUyxXQUVyQnFLLEVBQU8sT0FDUEMsRUFBUyxDQUNiN0IsTUFBTzRCLEVBQ1BILEtBQU1HLEVBQ05wSyxLQUFNb0ssR0FHUnJFLEVBQU9pRCxRQUFVLElBQU9sTCxPQUFPd00sbUJBQW1CRCxPQUFTQSxFQUFTSCxHLGlCQ3RCcEVsQixFQURrQyxFQUFRLEVBQ2hDdUIsRUFBNEIsSUFFOUIxSyxLQUFLLENBQUNrRyxFQUFPaEUsRUFBSSx1a0VBQXdrRSxLQUVqbUVnRSxFQUFPaUQsUUFBVUEsRyxjQ3VDakJqRCxFQUFPaUQsUUFBVSxDQUFFd0IsT0F0QkhDLElBQ2QsTUFBTUMsRUFBUXpGLFNBQVNDLGNBQWMsU0FFckN3RixFQUFNbEUsS0FBTyxXQUVUaUUsRUFBSUUsV0FDTkQsRUFBTUMsV0FBV0MsUUFBVUgsRUFFM0JDLEVBQU1wRixZQUFZTCxTQUFTNEYsZUFBZUosSUFJNUN4RixTQUFTSSxLQUFLQyxZQUFZb0YsSUFVREksUUFuQ1gsQ0FBQ0MsRUFBTXJFLEtBQ3JCLE1BQU1zRSxFQUFNL0YsU0FBU0MsY0FBYyxPQUM3QitGLEVBQVEsR0FJZCxJQUZBRCxFQUFJRSxVQUFZSCxFQUFLSSxPQUVkSCxFQUFJSSxZQUNUSCxFQUFNcEwsTUFBTTZHLEdBQVV6QixTQUFTb0csTUFBTS9GLFlBQVkwRixFQUFJSSxhQUd2RCxPQUFPSCxHQXlCMkJLLGNBUGQsQ0FBQ0MsRUFBUUMsS0FDN0JELEVBQU9FLGlCQUFpQixVQUFZQyxJQUNsQyxNQUFNLE9BQUVDLEVBQU0sS0FBRXRJLEVBQU8sSUFBT29CLEtBQUtDLE1BQU1nSCxFQUFRckksTUFDakRtSSxFQUFRRyxFQUFRdEksUSxnQkN2QzZDMEMsRUFBT2lELFFBR2hFLFdBQWU7Ozs7S0FPckIsSUFBSTRDLEVBQWlCeE4sT0FBT0MsVUFBVXdOLFNBQ2xDQyxFQUFVQyxNQUFNRCxTQUFXLFNBQTBCaEMsR0FDdkQsTUFBdUMsbUJBQWhDOEIsRUFBZXJOLEtBQUt1TCxJQUc3QixTQUFTa0MsRUFBWWxDLEdBQ25CLE1BQXlCLG1CQUFYQSxFQVdoQixTQUFTbUMsRUFBY0MsR0FDckIsT0FBT0EsRUFBT0MsUUFBUSw4QkFBK0IsUUFPdkQsU0FBU0MsRUFBYUMsRUFBS0MsR0FDekIsT0FBYyxNQUFQRCxHQUE4QixpQkFBUkEsR0FBcUJDLEtBQVlELEVBa0JoRSxJQUFJRSxFQUFhQyxPQUFPbk8sVUFBVW9PLEtBSzlCQyxFQUFhLEtBQ2pCLFNBQVNDLEVBQWNULEdBQ3JCLE9BTkYsU0FBcUJVLEVBQUlWLEdBQ3ZCLE9BQU9LLEVBQVdoTyxLQUFLcU8sRUFBSVYsR0FLbkJXLENBQVdILEVBQVlSLEdBR2pDLElBQUlZLEVBQVksQ0FDZCxJQUFLLFFBQ0wsSUFBSyxPQUNMLElBQUssT0FDTCxJQUFLLFNBQ0wsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLFNBQ0wsSUFBSyxVQVNIQyxFQUFVLE1BQ1ZDLEVBQVUsTUFDVkMsRUFBVyxPQUNYQyxFQUFVLFFBQ1ZDLEVBQVEscUJBME9aLFNBQVNDLEVBQVNsQixHQUNoQjFKLEtBQUswSixPQUFTQSxFQUNkMUosS0FBSzZLLEtBQU9uQixFQUNaMUosS0FBSzhLLElBQU0sRUF5RGIsU0FBU0MsRUFBU0MsRUFBTUMsR0FDdEJqTCxLQUFLZ0wsS0FBT0EsRUFDWmhMLEtBQUtrTCxNQUFRLENBQUUsSUFBS2xMLEtBQUtnTCxNQUN6QmhMLEtBQUtrRSxPQUFTK0csRUF1R2hCLFNBQVNFLElBQ1BuTCxLQUFLb0wsY0FBZ0IsQ0FDbkJDLE9BQVEsR0FDUnZOLElBQUssU0FBY3FKLEVBQUtwSixHQUN0QmlDLEtBQUtxTCxPQUFPbEUsR0FBT3BKLEdBRXJCRixJQUFLLFNBQWNzSixHQUNqQixPQUFPbkgsS0FBS3FMLE9BQU9sRSxJQUVyQm1FLE1BQU8sV0FDTHRMLEtBQUtxTCxPQUFTLEtBdktwQlQsRUFBUS9PLFVBQVUwUCxJQUFNLFdBQ3RCLE1BQXFCLEtBQWR2TCxLQUFLNkssTUFPZEQsRUFBUS9PLFVBQVUyUCxLQUFPLFNBQWVwQixHQUN0QyxJQUFJcUIsRUFBUXpMLEtBQUs2SyxLQUFLWSxNQUFNckIsR0FFNUIsSUFBS3FCLEdBQXlCLElBQWhCQSxFQUFNQyxNQUNsQixNQUFPLEdBRVQsSUFBSWhDLEVBQVMrQixFQUFNLEdBS25CLE9BSEF6TCxLQUFLNkssS0FBTzdLLEtBQUs2SyxLQUFLYyxVQUFVakMsRUFBT2xLLFFBQ3ZDUSxLQUFLOEssS0FBT3BCLEVBQU9sSyxPQUVaa0ssR0FPVGtCLEVBQVEvTyxVQUFVK1AsVUFBWSxTQUFvQnhCLEdBQ2hELElBQWtDcUIsRUFBOUJDLEVBQVExTCxLQUFLNkssS0FBS2dCLE9BQU96QixHQUU3QixPQUFRc0IsR0FDTixLQUFNLEVBQ0pELEVBQVF6TCxLQUFLNkssS0FDYjdLLEtBQUs2SyxLQUFPLEdBQ1osTUFDRixLQUFLLEVBQ0hZLEVBQVEsR0FDUixNQUNGLFFBQ0VBLEVBQVF6TCxLQUFLNkssS0FBS2MsVUFBVSxFQUFHRCxHQUMvQjFMLEtBQUs2SyxLQUFPN0ssS0FBSzZLLEtBQUtjLFVBQVVELEdBS3BDLE9BRkExTCxLQUFLOEssS0FBT1csRUFBTWpNLE9BRVhpTSxHQWlCVFYsRUFBUWxQLFVBQVV3QixLQUFPLFNBQWUyTixHQUN0QyxPQUFPLElBQUlELEVBQVFDLEVBQU1oTCxPQU8zQitLLEVBQVFsUCxVQUFVaVEsT0FBUyxTQUFpQnBPLEdBQzFDLElBRUlLLEVBclc0QmdPLEVBQVdqQyxFQW1XdkNvQixFQUFRbEwsS0FBS2tMLE1BR2pCLEdBQUlBLEVBQU1wUCxlQUFlNEIsR0FDdkJLLEVBQVFtTixFQUFNeE4sT0FDVCxDQUdMLElBRkEsSUFBb0JzTyxFQUFtQkMsRUFBT1AsRUFBMUNRLEVBQVVsTSxLQUF1Q21NLEdBQVksRUFFMURELEdBQVMsQ0FDZCxHQUFJeE8sRUFBS04sUUFBUSxLQUFPLEVBc0J0QixJQXJCQTRPLEVBQW9CRSxFQUFRbEIsS0FDNUJpQixFQUFRdk8sRUFBSzBPLE1BQU0sS0FDbkJWLEVBQVEsRUFtQm9CLE1BQXJCTSxHQUE2Qk4sRUFBUU8sRUFBTXpNLFFBQzVDa00sSUFBVU8sRUFBTXpNLE9BQVMsSUFDM0IyTSxFQUNFdkMsRUFBWW9DLEVBQW1CQyxFQUFNUCxNQXJZakJLLEVBc1lPQyxFQXRZSWxDLEVBc1llbUMsRUFBTVAsR0FwWWpELE1BQWJLLEdBQ3dCLGlCQUFkQSxHQUNQQSxFQUFValEsZ0JBQ1ZpUSxFQUFValEsZUFBZWdPLEtBb1l0QmtDLEVBQW9CQSxFQUFrQkMsRUFBTVAsV0FHOUNNLEVBQW9CRSxFQUFRbEIsS0FBS3ROLEdBcUJqQ3lPLEVBQVl2QyxFQUFZc0MsRUFBUWxCLEtBQU10TixHQUd4QyxHQUFJeU8sRUFBVyxDQUNicE8sRUFBUWlPLEVBQ1IsTUFHRkUsRUFBVUEsRUFBUWhJLE9BR3BCZ0gsRUFBTXhOLEdBQVFLLEVBTWhCLE9BSEl5TCxFQUFXekwsS0FDYkEsRUFBUUEsRUFBTWhDLEtBQUtpRSxLQUFLZ0wsT0FFbkJqTixHQTBCVG9OLEVBQU90UCxVQUFVd1EsV0FBYSxnQkFDTSxJQUF2QnJNLEtBQUtvTCxlQUNkcEwsS0FBS29MLGNBQWNFLFNBU3ZCSCxFQUFPdFAsVUFBVXFHLE1BQVEsU0FBZ0JvSyxFQUFVQyxHQUNqRCxJQUFJckIsRUFBUWxMLEtBQUtvTCxjQUNib0IsRUFBV0YsRUFBVyxLQUFPQyxHQUFRRSxFQUFTRixNQUFNekgsS0FBSyxLQUN6RDRILE9BQWtDLElBQVZ4QixFQUN4QnlCLEVBQVNELEVBQWlCeEIsRUFBTXJOLElBQUkyTyxRQUFZbE4sRUFNcEQsT0FKY0EsTUFBVnFOLElBQ0ZBLEVBeFpKLFNBQXdCTCxFQUFVQyxHQUNoQyxJQUFLRCxFQUNILE1BQU8sR0FDVCxJQXVCSU0sRUFBY0MsRUFBY0MsRUF2QjVCQyxHQUFrQixFQUNsQkMsRUFBVyxHQUNYTCxFQUFTLEdBQ1RNLEVBQVMsR0FDVEMsR0FBUyxFQUNUQyxHQUFXLEVBQ1hDLEVBQWMsR0FDZEMsRUFBVyxFQUlmLFNBQVNDLElBQ1AsR0FBSUosSUFBV0MsRUFDYixLQUFPRixFQUFPek4sZUFDTG1OLEVBQU9NLEVBQU9sSixZQUV2QmtKLEVBQVMsR0FHWEMsR0FBUyxFQUNUQyxHQUFXLEVBSWIsU0FBU0ksRUFBYUMsR0FJcEIsR0FINkIsaUJBQWxCQSxJQUNUQSxFQUFnQkEsRUFBY3BCLE1BQU01QixFQUFTLEtBRTFDbEIsRUFBUWtFLElBQTJDLElBQXpCQSxFQUFjaE8sT0FDM0MsTUFBTSxJQUFJMkIsTUFBTSxpQkFBbUJxTSxHQUVyQ1osRUFBZSxJQUFJNUMsT0FBT1AsRUFBYStELEVBQWMsSUFBTSxRQUMzRFgsRUFBZSxJQUFJN0MsT0FBTyxPQUFTUCxFQUFhK0QsRUFBYyxLQUM5RFYsRUFBaUIsSUFBSTlDLE9BQU8sT0FBU1AsRUFBYSxJQUFNK0QsRUFBYyxLQUd4RUQsRUFBWWhCLEdBQVFFLEVBQVNGLE1BSzdCLElBSEEsSUFFSWtCLEVBQU96SixFQUFNakcsRUFBTzJQLEVBQUtDLEVBQU9DLEVBRmhDQyxFQUFVLElBQUlqRCxFQUFRMEIsSUFHbEJ1QixFQUFRdEMsT0FBTyxDQU1yQixHQUxBa0MsRUFBUUksRUFBUS9DLElBR2hCL00sRUFBUThQLEVBQVFqQyxVQUFVZ0IsR0FHeEIsSUFBSyxJQUFJck4sRUFBSSxFQUFHdU8sRUFBYy9QLEVBQU15QixPQUFRRCxFQUFJdU8sSUFBZXZPLEVBR3pENEssRUFGSnVELEVBQU0zUCxFQUFNZ1EsT0FBT3hPLEtBR2pCME4sRUFBTzVQLEtBQUtzUCxFQUFPbk4sUUFDbkI0TixHQUFlTSxJQUVmUCxHQUFXLEVBQ1hKLEdBQWtCLEVBQ2xCSyxHQUFlLEtBR2pCVCxFQUFPdFAsS0FBSyxDQUFFLE9BQVFxUSxFQUFLRCxFQUFPQSxFQUFRLElBQzFDQSxHQUFTLEVBR0csT0FBUkMsSUFDRkosSUFDQUYsRUFBYyxHQUNkQyxFQUFXLEVBQ1hOLEdBQWtCLEdBTXhCLElBQUtjLEVBQVFyQyxLQUFLb0IsR0FDaEIsTUF1QkYsR0FyQkFNLEdBQVMsRUFHVGxKLEVBQU82SixFQUFRckMsS0FBS2IsSUFBVSxPQUM5QmtELEVBQVFyQyxLQUFLakIsR0FHQSxNQUFUdkcsR0FDRmpHLEVBQVE4UCxFQUFRakMsVUFBVW5CLEdBQzFCb0QsRUFBUXJDLEtBQUtmLEdBQ2JvRCxFQUFRakMsVUFBVWlCLElBQ0EsTUFBVDdJLEdBQ1RqRyxFQUFROFAsRUFBUWpDLFVBQVVrQixHQUMxQmUsRUFBUXJDLEtBQUtkLEdBQ2JtRCxFQUFRakMsVUFBVWlCLEdBQ2xCN0ksRUFBTyxLQUVQakcsRUFBUThQLEVBQVFqQyxVQUFVaUIsSUFJdkJnQixFQUFRckMsS0FBS3FCLEdBQ2hCLE1BQU0sSUFBSTFMLE1BQU0sbUJBQXFCME0sRUFBUS9DLEtBVS9DLEdBUEU2QyxFQURVLEtBQVIzSixFQUNNLENBQUVBLEVBQU1qRyxFQUFPMFAsRUFBT0ksRUFBUS9DLElBQUtzQyxFQUFhQyxFQUFVTixHQUUxRCxDQUFFL0ksRUFBTWpHLEVBQU8wUCxFQUFPSSxFQUFRL0MsS0FFeEN1QyxJQUNBVixFQUFPdFAsS0FBS3NRLEdBRUMsTUFBVDNKLEdBQXlCLE1BQVRBLEVBQ2xCZ0osRUFBUzNQLEtBQUtzUSxRQUNULEdBQWEsTUFBVDNKLEVBQWMsQ0FJdkIsS0FGQTRKLEVBQWNaLEVBQVNqSixPQUdyQixNQUFNLElBQUk1QyxNQUFNLHFCQUF1QnBELEVBQVEsUUFBVTBQLEdBRTNELEdBQUlHLEVBQVksS0FBTzdQLEVBQ3JCLE1BQU0sSUFBSW9ELE1BQU0scUJBQXVCeU0sRUFBWSxHQUFLLFFBQVVILE9BQ2xELFNBQVR6SixHQUE0QixNQUFUQSxHQUF5QixNQUFUQSxFQUM1Q21KLEdBQVcsRUFDTyxNQUFUbkosR0FFVHVKLEVBQVl4UCxHQVNoQixHQUxBdVAsSUFHQU0sRUFBY1osRUFBU2pKLE1BR3JCLE1BQU0sSUFBSTVDLE1BQU0scUJBQXVCeU0sRUFBWSxHQUFLLFFBQVVDLEVBQVEvQyxLQUU1RSxPQWtDRixTQUFxQjZCLEdBTW5CLElBTEEsSUFJSWdCLEVBSkFLLEVBQWUsR0FDZkMsRUFBWUQsRUFDWmhCLEVBQVcsR0FHTnpOLEVBQUksRUFBRzJPLEVBQVl2QixFQUFPbk4sT0FBUUQsRUFBSTJPLElBQWEzTyxFQUcxRCxRQUZBb08sRUFBUWhCLEVBQU9wTixJQUVELElBQ1osSUFBSyxJQUNMLElBQUssSUFDSDBPLEVBQVU1USxLQUFLc1EsR0FDZlgsRUFBUzNQLEtBQUtzUSxHQUNkTSxFQUFZTixFQUFNLEdBQUssR0FDdkIsTUFDRixJQUFLLElBQ09YLEVBQVNqSixNQUNYLEdBQUs0SixFQUFNLEdBQ25CTSxFQUFZakIsRUFBU3hOLE9BQVMsRUFBSXdOLEVBQVNBLEVBQVN4TixPQUFTLEdBQUcsR0FBS3dPLEVBQ3JFLE1BQ0YsUUFDRUMsRUFBVTVRLEtBQUtzUSxHQUlyQixPQUFPSyxFQTVEQUcsQ0FPVCxTQUF1QnhCLEdBSXJCLElBSEEsSUFFSWdCLEVBQU9TLEVBRlBDLEVBQWlCLEdBR1o5TyxFQUFJLEVBQUcyTyxFQUFZdkIsRUFBT25OLE9BQVFELEVBQUkyTyxJQUFhM08sR0FDMURvTyxFQUFRaEIsRUFBT3BOLE1BR0ksU0FBYm9PLEVBQU0sSUFBaUJTLEdBQThCLFNBQWpCQSxFQUFVLElBQ2hEQSxFQUFVLElBQU1ULEVBQU0sR0FDdEJTLEVBQVUsR0FBS1QsRUFBTSxLQUVyQlUsRUFBZWhSLEtBQUtzUSxHQUNwQlMsRUFBWVQsSUFLbEIsT0FBT1UsRUF6QldDLENBQWEzQixJQTZRcEI0QixDQUFjakMsRUFBVUMsR0FDakNHLEdBQWtCeEIsRUFBTXBOLElBQUkwTyxFQUFVRyxJQUVqQ0EsR0FnQlR4QixFQUFPdFAsVUFBVTJTLE9BQVMsU0FBaUJsQyxFQUFVdEIsRUFBTXlELEVBQVVsQyxHQUNuRSxJQUFJSSxFQUFTM00sS0FBS2tDLE1BQU1vSyxFQUFVQyxHQUM5QkwsRUFBV2xCLGFBQWdCRCxFQUFXQyxFQUFPLElBQUlELEVBQVFDLE9BQU0xTCxHQUNuRSxPQUFPVSxLQUFLME8sYUFBYS9CLEVBQVFULEVBQVN1QyxFQUFVbkMsRUFBVUMsSUFZaEVwQixFQUFPdFAsVUFBVTZTLGFBQWUsU0FBdUIvQixFQUFRVCxFQUFTdUMsRUFBVUUsRUFBa0JwQyxHQUlsRyxJQUhBLElBRUlvQixFQUFPaUIsRUFBUTdRLEVBRmY4USxFQUFTLEdBR0p0UCxFQUFJLEVBQUcyTyxFQUFZdkIsRUFBT25OLE9BQVFELEVBQUkyTyxJQUFhM08sRUFDMUR4QixPQUFRdUIsRUFJTyxPQUZmc1AsR0FEQWpCLEVBQVFoQixFQUFPcE4sSUFDQSxJQUVLeEIsRUFBUWlDLEtBQUs4TyxjQUFjbkIsRUFBT3pCLEVBQVN1QyxFQUFVRSxHQUNyRCxNQUFYQyxFQUFnQjdRLEVBQVFpQyxLQUFLK08sZUFBZXBCLEVBQU96QixFQUFTdUMsRUFBVUUsR0FDM0QsTUFBWEMsRUFBZ0I3USxFQUFRaUMsS0FBS2dQLGNBQWNyQixFQUFPekIsRUFBU3VDLEVBQVVsQyxHQUMxRCxNQUFYcUMsRUFBZ0I3USxFQUFRaUMsS0FBS2lQLGVBQWV0QixFQUFPekIsR0FDeEMsU0FBWDBDLEVBQW1CN1EsRUFBUWlDLEtBQUtrUCxhQUFhdkIsRUFBT3pCLEdBQ3pDLFNBQVgwQyxJQUFtQjdRLEVBQVFpQyxLQUFLbVAsU0FBU3hCLFNBRXBDck8sSUFBVnZCLElBQ0Y4USxHQUFVOVEsR0FHZCxPQUFPOFEsR0FHVDFELEVBQU90UCxVQUFVaVQsY0FBZ0IsU0FBd0JuQixFQUFPekIsRUFBU3VDLEVBQVVFLEdBQ2pGLElBQUlTLEVBQU9wUCxLQUNQNk8sRUFBUyxHQUNUOVEsRUFBUW1PLEVBQVFKLE9BQU82QixFQUFNLElBUWpDLEdBQUs1UCxFQUFMLENBRUEsR0FBSXVMLEVBQVF2TCxHQUNWLElBQUssSUFBSXVGLEVBQUksRUFBR3dLLEVBQWMvUCxFQUFNeUIsT0FBUThELEVBQUl3SyxJQUFleEssRUFDN0R1TCxHQUFVN08sS0FBSzBPLGFBQWFmLEVBQU0sR0FBSXpCLEVBQVE3TyxLQUFLVSxFQUFNdUYsSUFBS21MLEVBQVVFLFFBRXJFLEdBQXFCLGlCQUFWNVEsR0FBdUMsaUJBQVZBLEdBQXVDLGlCQUFWQSxFQUMxRThRLEdBQVU3TyxLQUFLME8sYUFBYWYsRUFBTSxHQUFJekIsRUFBUTdPLEtBQUtVLEdBQVEwUSxFQUFVRSxRQUNoRSxHQUFJbkYsRUFBV3pMLEdBQVEsQ0FDNUIsR0FBZ0MsaUJBQXJCNFEsRUFDVCxNQUFNLElBQUl4TixNQUFNLGtFQUtMLE9BRmJwRCxFQUFRQSxFQUFNaEMsS0FBS21RLEVBQVFsQixLQUFNMkQsRUFBaUJySixNQUFNcUksRUFBTSxHQUFJQSxFQUFNLEtBakIxRSxTQUFvQnJCLEdBQ2xCLE9BQU84QyxFQUFLWixPQUFPbEMsRUFBVUosRUFBU3VDLFNBbUJwQ0ksR0FBVTlRLFFBRVo4USxHQUFVN08sS0FBSzBPLGFBQWFmLEVBQU0sR0FBSXpCLEVBQVN1QyxFQUFVRSxHQUUzRCxPQUFPRSxJQUdUMUQsRUFBT3RQLFVBQVVrVCxlQUFpQixTQUF5QnBCLEVBQU96QixFQUFTdUMsRUFBVUUsR0FDbkYsSUFBSTVRLEVBQVFtTyxFQUFRSixPQUFPNkIsRUFBTSxJQUlqQyxJQUFLNVAsR0FBVXVMLEVBQVF2TCxJQUEyQixJQUFqQkEsRUFBTXlCLE9BQ3JDLE9BQU9RLEtBQUswTyxhQUFhZixFQUFNLEdBQUl6QixFQUFTdUMsRUFBVUUsSUFHMUR4RCxFQUFPdFAsVUFBVXdULGNBQWdCLFNBQXdCQyxFQUFTbEMsRUFBYUwsR0FHN0UsSUFGQSxJQUFJd0MsRUFBc0JuQyxFQUFZekQsUUFBUSxVQUFXLElBQ3JENkYsRUFBY0YsRUFBUWxELE1BQU0sTUFDdkI3TSxFQUFJLEVBQUdBLEVBQUlpUSxFQUFZaFEsT0FBUUQsSUFDbENpUSxFQUFZalEsR0FBR0MsU0FBV0QsRUFBSSxJQUFNd04sS0FDdEN5QyxFQUFZalEsR0FBS2dRLEVBQXNCQyxFQUFZalEsSUFHdkQsT0FBT2lRLEVBQVkxSyxLQUFLLE9BRzFCcUcsRUFBT3RQLFVBQVVtVCxjQUFnQixTQUF3QnJCLEVBQU96QixFQUFTdUMsRUFBVWxDLEdBQ2pGLEdBQUtrQyxFQUFMLENBRUEsSUFBSTFRLEVBQVF5TCxFQUFXaUYsR0FBWUEsRUFBU2QsRUFBTSxJQUFNYyxFQUFTZCxFQUFNLElBQ3ZFLEdBQWEsTUFBVDVQLEVBQWUsQ0FDakIsSUFBSWdQLEVBQWtCWSxFQUFNLEdBQ3hCTixFQUFXTSxFQUFNLEdBQ2pCUCxFQUFjTyxFQUFNLEdBQ3BCOEIsRUFBZ0IxUixFQUlwQixPQUhnQixHQUFac1AsR0FBaUJELElBQ25CcUMsRUFBZ0J6UCxLQUFLcVAsY0FBY3RSLEVBQU9xUCxFQUFhTCxJQUVsRC9NLEtBQUswTyxhQUFhMU8sS0FBS2tDLE1BQU11TixFQUFlbEQsR0FBT0wsRUFBU3VDLEVBQVVnQixFQUFlbEQsTUFJaEdwQixFQUFPdFAsVUFBVW9ULGVBQWlCLFNBQXlCdEIsRUFBT3pCLEdBQ2hFLElBQUluTyxFQUFRbU8sRUFBUUosT0FBTzZCLEVBQU0sSUFDakMsR0FBYSxNQUFUNVAsRUFDRixPQUFPQSxHQUdYb04sRUFBT3RQLFVBQVVxVCxhQUFlLFNBQXVCdkIsRUFBT3pCLEdBQzVELElBQUluTyxFQUFRbU8sRUFBUUosT0FBTzZCLEVBQU0sSUFDakMsR0FBYSxNQUFUNVAsRUFDRixPQUFPME8sRUFBU2lELE9BQU8zUixJQUczQm9OLEVBQU90UCxVQUFVc1QsU0FBVyxTQUFtQnhCLEdBQzdDLE9BQU9BLEVBQU0sSUFHZixJQUFJbEIsRUFBVyxDQUNiL08sS0FBTSxjQUNOaVMsUUFBUyxRQUNUcEQsS0FBTSxDQUFFLEtBQU0sTUFDZEYsZ0JBQVkvTSxFQUNab1EsWUFBUXBRLEVBQ1I0QyxXQUFPNUMsRUFDUGtQLFlBQVFsUCxFQUNSc0wsYUFBU3RMLEVBQ1R5TCxhQUFTekwsRUFDVDZMLFlBQVE3TCxFQU1SLGtCQUFtQjRMLEdBQ2pCMEUsRUFBY3hFLGNBQWdCRixHQUtoQyxvQkFDRSxPQUFPMEUsRUFBY3hFLGdCQUtyQndFLEVBQWdCLElBQUl6RSxFQTJDeEIsT0F0Q0FzQixFQUFTSixXQUFhLFdBQ3BCLE9BQU91RCxFQUFjdkQsY0FRdkJJLEVBQVN2SyxNQUFRLFNBQWdCb0ssRUFBVUMsR0FDekMsT0FBT3FELEVBQWMxTixNQUFNb0ssRUFBVUMsSUFTdkNFLEVBQVMrQixPQUFTLFNBQWlCbEMsRUFBVXRCLEVBQU15RCxFQUFVbEMsR0FDM0QsR0FBd0IsaUJBQWJELEVBQ1QsTUFBTSxJQUFJdUQsVUFBVSx5REF0ckJmdkcsRUFEU08sRUF3ckJ3QnlDLEdBdnJCbEIsZUFBaUJ6QyxHQXNyQmpCLG1GQXZyQnhCLElBQWtCQSxFQTRyQmhCLE9BQU8rRixFQUFjcEIsT0FBT2xDLEVBQVV0QixFQUFNeUQsRUFBVWxDLElBS3hERSxFQUFTaUQsT0E3b0JULFNBQXFCaEcsR0FDbkIsT0FBT29HLE9BQU9wRyxHQUFRQyxRQUFRLGdCQUFnQixTQUF3Qm5DLEdBQ3BFLE9BQU84QyxFQUFVOUMsT0E4b0JyQmlGLEVBQVM3QixRQUFVQSxFQUNuQjZCLEVBQVMxQixRQUFVQSxFQUNuQjBCLEVBQVN0QixPQUFTQSxFQUVYc0IsRUEvdEJ5RXNELEksc0RDRmxGLElBQUlDLEVBQU0sRUFBUSxHQUNGQyxFQUFVLEVBQVEsR0FJQyxpQkFGdkJBLEVBQVVBLEVBQVFqSixXQUFhaUosRUFBUUMsUUFBVUQsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDMU0sRUFBT2hFLEVBQUkwUSxFQUFTLE1BRzlDLElBQUk5TSxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFaEJuQixFQUFTZ08sRUFBSUMsRUFBUzlNLEdBSXhCLElBQUs4TSxFQUFRRSxRQUFVNU0sRUFBT3RHLElBQUk4QyxXQUFZLENBQzVDLElBcUJJcVEsRUFBWUgsRUFBUUUsT0FFeEI1TSxFQUFPdEcsSUFBSWtDLE9BQ1QsR0FDQSxXQUsrQixpQkFGdkI4USxHQUZOQSxFQUFVLEVBQVEsSUFFTWpKLFdBQWFpSixFQUFRQyxRQUFVRCxLQUcvQ0EsRUFBVSxDQUFDLENBQUMxTSxFQUFPaEUsRUFBSTBRLEVBQVMsTUEvQnhCLFNBQXVCNUwsRUFBR0MsR0FDaEQsSUFBS0QsR0FBS0MsR0FBS0QsSUFBTUMsRUFDbkIsT0FBTyxFQUdULElBQUk1QyxFQUVKLElBQUtBLEtBQUsyQyxFQUNSLEdBQUlBLEVBQUUzQyxLQUFPNEMsRUFBRTVDLEdBQ2IsT0FBTyxFQUlYLElBQUtBLEtBQUs0QyxFQUNSLElBQUtELEVBQUUzQyxHQUNMLE9BQU8sRUFJWCxPQUFPLEVBZVUyTyxDQUFjRCxFQUFXSCxFQUFRRSxTQU10Q0MsRUFBWUgsRUFBUUUsT0FFcEJuTyxFQUFPaU8sSUFQTDFNLEVBQU90RyxJQUFJOEMsZ0JBWXpCd0QsRUFBT3RHLElBQUl5QyxTQUFRLFdBQ2pCc0MsT0FJSnVCLEVBQU9pRCxRQUFVeUosRUFBUUUsUUFBVSxJLDZCQ3JFbkMsSUFDTUcsRUFERkMsRUFFSyxXQVVMLFlBVG9CLElBQVRELElBTVRBLEVBQU9FLFFBQVFsVixRQUFVbUgsVUFBWUEsU0FBU2dPLE1BQVFuVixPQUFPb1YsT0FHeERKLEdBSVBLLEVBQVksV0FDZCxJQUFJTCxFQUFPLEdBQ1gsT0FBTyxTQUFrQk0sR0FDdkIsUUFBNEIsSUFBakJOLEVBQUtNLEdBQXlCLENBQ3ZDLElBQUlDLEVBQWNwTyxTQUFTcU8sY0FBY0YsR0FFekMsR0FBSXRWLE9BQU95VixtQkFBcUJGLGFBQXVCdlYsT0FBT3lWLGtCQUM1RCxJQUdFRixFQUFjQSxFQUFZRyxnQkFBZ0JuTyxLQUMxQyxNQUFPNUUsR0FFUDRTLEVBQWMsS0FJbEJQLEVBQUtNLEdBQVVDLEVBR2pCLE9BQU9QLEVBQUtNLElBcEJBLEdBd0JaSyxFQUFjLEdBRWxCLFNBQVNDLEVBQXFCQyxHQUc1QixJQUZBLElBQUlsTyxHQUFVLEVBRUwxRCxFQUFJLEVBQUdBLEVBQUkwUixFQUFZelIsT0FBUUQsSUFDdEMsR0FBSTBSLEVBQVkxUixHQUFHNFIsYUFBZUEsRUFBWSxDQUM1Q2xPLEVBQVMxRCxFQUNULE1BSUosT0FBTzBELEVBR1QsU0FBU21PLEVBQWE3SyxFQUFNcEQsR0FJMUIsSUFIQSxJQUFJa08sRUFBYSxHQUNiQyxFQUFjLEdBRVQvUixFQUFJLEVBQUdBLEVBQUlnSCxFQUFLL0csT0FBUUQsSUFBSyxDQUNwQyxJQUFJZ0YsRUFBT2dDLEVBQUtoSCxHQUNaMkIsRUFBS2lDLEVBQVFvTyxLQUFPaE4sRUFBSyxHQUFLcEIsRUFBUW9PLEtBQU9oTixFQUFLLEdBQ2xEaU4sRUFBUUgsRUFBV25RLElBQU8sRUFDMUJpUSxFQUFhLEdBQUdoTixPQUFPakQsRUFBSSxLQUFLaUQsT0FBT3FOLEdBQzNDSCxFQUFXblEsR0FBTXNRLEVBQVEsRUFDekIsSUFBSTlGLEVBQVF3RixFQUFxQkMsR0FDN0J0SCxFQUFNLENBQ1I1QixJQUFLMUQsRUFBSyxHQUNWa04sTUFBT2xOLEVBQUssR0FDWm1OLFVBQVduTixFQUFLLEtBR0gsSUFBWG1ILEdBQ0Z1RixFQUFZdkYsR0FBT2lHLGFBQ25CVixFQUFZdkYsR0FBT2tHLFFBQVEvSCxJQUUzQm9ILEVBQVk1VCxLQUFLLENBQ2Y4VCxXQUFZQSxFQUNaUyxRQUFTQyxFQUFTaEksRUFBSzFHLEdBQ3ZCd08sV0FBWSxJQUloQkwsRUFBWWpVLEtBQUs4VCxHQUduQixPQUFPRyxFQUdULFNBQVNRLEVBQW1CM08sR0FDMUIsSUFBSStFLEVBQVF6RixTQUFTQyxjQUFjLFNBQy9CcVAsRUFBYTVPLEVBQVE0TyxZQUFjLEdBRXZDLFFBQWdDLElBQXJCQSxFQUFXQyxNQUF1QixDQUMzQyxJQUFJQSxFQUFtRCxLQUVuREEsSUFDRkQsRUFBV0MsTUFBUUEsR0FRdkIsR0FKQXBXLE9BQU80SixLQUFLdU0sR0FBWXRNLFNBQVEsU0FBVTBCLEdBQ3hDZSxFQUFNK0osYUFBYTlLLEVBQUs0SyxFQUFXNUssT0FHUCxtQkFBbkJoRSxFQUFRK08sT0FDakIvTyxFQUFRK08sT0FBT2hLLE9BQ1YsQ0FDTCxJQUFJMEksRUFBU0QsRUFBVXhOLEVBQVErTyxRQUFVLFFBRXpDLElBQUt0QixFQUNILE1BQU0sSUFBSXpQLE1BQU0sMkdBR2xCeVAsRUFBTzlOLFlBQVlvRixHQUdyQixPQUFPQSxFQWNULElBQ01pSyxFQURGQyxHQUNFRCxFQUFZLEdBQ1QsU0FBaUJ6RyxFQUFPMkcsR0FFN0IsT0FEQUYsRUFBVXpHLEdBQVMyRyxFQUNaRixFQUFVRyxPQUFPOUIsU0FBUzFMLEtBQUssUUFJMUMsU0FBU3lOLEVBQW9CckssRUFBT3dELEVBQU84RyxFQUFRM0ksR0FDakQsSUFBSTVCLEVBQU11SyxFQUFTLEdBQUszSSxFQUFJNEgsTUFBUSxVQUFVdE4sT0FBTzBGLEVBQUk0SCxNQUFPLE1BQU10TixPQUFPMEYsRUFBSTVCLElBQUssS0FBTzRCLEVBQUk1QixJQUlqRyxHQUFJQyxFQUFNQyxXQUNSRCxFQUFNQyxXQUFXQyxRQUFVZ0ssRUFBWTFHLEVBQU96RCxPQUN6QyxDQUNMLElBQUl3SyxFQUFVaFEsU0FBUzRGLGVBQWVKLEdBQ2xDeUssRUFBYXhLLEVBQU13SyxXQUVuQkEsRUFBV2hILElBQ2J4RCxFQUFNeUssWUFBWUQsRUFBV2hILElBRzNCZ0gsRUFBV2xULE9BQ2IwSSxFQUFNMEssYUFBYUgsRUFBU0MsRUFBV2hILElBRXZDeEQsRUFBTXBGLFlBQVkyUCxJQUt4QixTQUFTSSxFQUFXM0ssRUFBTy9FLEVBQVMwRyxHQUNsQyxJQUFJNUIsRUFBTTRCLEVBQUk1QixJQUNWd0osRUFBUTVILEVBQUk0SCxNQUNaQyxFQUFZN0gsRUFBSTZILFVBZXBCLEdBYklELEVBQ0Z2SixFQUFNK0osYUFBYSxRQUFTUixHQUU1QnZKLEVBQU00SyxnQkFBZ0IsU0FHcEJwQixHQUFhcUIsT0FDZjlLLEdBQU8sdURBQXVEOUQsT0FBTzRPLEtBQUtDLFNBQVNDLG1CQUFtQmhSLEtBQUtpUixVQUFVeEIsTUFBZSxRQU1sSXhKLEVBQU1DLFdBQ1JELEVBQU1DLFdBQVdDLFFBQVVILE1BQ3RCLENBQ0wsS0FBT0MsRUFBTVUsWUFDWFYsRUFBTXlLLFlBQVl6SyxFQUFNVSxZQUcxQlYsRUFBTXBGLFlBQVlMLFNBQVM0RixlQUFlSixLQUk5QyxJQUFJa0wsRUFBWSxLQUNaQyxFQUFtQixFQUV2QixTQUFTdkIsRUFBU2hJLEVBQUsxRyxHQUNyQixJQUFJK0UsRUFDQWxHLEVBQ0F3USxFQUVKLEdBQUlyUCxFQUFRZ1EsVUFBVyxDQUNyQixJQUFJRSxFQUFhRCxJQUNqQmxMLEVBQVFpTCxJQUFjQSxFQUFZckIsRUFBbUIzTyxJQUNyRG5CLEVBQVN1USxFQUFvQm5MLEtBQUssS0FBTWMsRUFBT21MLEdBQVksR0FDM0RiLEVBQVNELEVBQW9CbkwsS0FBSyxLQUFNYyxFQUFPbUwsR0FBWSxRQUUzRG5MLEVBQVE0SixFQUFtQjNPLEdBQzNCbkIsRUFBUzZRLEVBQVd6TCxLQUFLLEtBQU1jLEVBQU8vRSxHQUV0Q3FQLEVBQVMsWUF4RmIsU0FBNEJ0SyxHQUUxQixHQUF5QixPQUFyQkEsRUFBTW9MLFdBQ1IsT0FBTyxFQUdUcEwsRUFBTW9MLFdBQVdYLFlBQVl6SyxHQW1GekJxTCxDQUFtQnJMLElBS3ZCLE9BREFsRyxFQUFPNkgsR0FDQSxTQUFxQjJKLEdBQzFCLEdBQUlBLEVBQVEsQ0FDVixHQUFJQSxFQUFPdkwsTUFBUTRCLEVBQUk1QixLQUFPdUwsRUFBTy9CLFFBQVU1SCxFQUFJNEgsT0FBUytCLEVBQU85QixZQUFjN0gsRUFBSTZILFVBQ25GLE9BR0YxUCxFQUFPNkgsRUFBTTJKLFFBRWJoQixLQUtOalAsRUFBT2lELFFBQVUsU0FBVUQsRUFBTXBELElBQy9CQSxFQUFVQSxHQUFXLElBR1JnUSxXQUEwQyxrQkFBdEJoUSxFQUFRZ1EsWUFDdkNoUSxFQUFRZ1EsVUFBWTVDLEtBSXRCLElBQUlrRCxFQUFrQnJDLEVBRHRCN0ssRUFBT0EsR0FBUSxHQUMwQnBELEdBQ3pDLE9BQU8sU0FBZ0J1USxHQUdyQixHQUZBQSxFQUFVQSxHQUFXLEdBRTJCLG1CQUE1QzlYLE9BQU9DLFVBQVV3TixTQUFTdE4sS0FBSzJYLEdBQW5DLENBSUEsSUFBSyxJQUFJblUsRUFBSSxFQUFHQSxFQUFJa1UsRUFBZ0JqVSxPQUFRRCxJQUFLLENBQy9DLElBQ0ltTSxFQUFRd0YsRUFES3VDLEVBQWdCbFUsSUFFakMwUixFQUFZdkYsR0FBT2lHLGFBS3JCLElBRkEsSUFBSWdDLEVBQXFCdkMsRUFBYXNDLEVBQVN2USxHQUV0Q3lRLEVBQUssRUFBR0EsRUFBS0gsRUFBZ0JqVSxPQUFRb1UsSUFBTSxDQUNsRCxJQUVJQyxFQUFTM0MsRUFGS3VDLEVBQWdCRyxJQUlLLElBQW5DM0MsRUFBWTRDLEdBQVFsQyxhQUN0QlYsRUFBWTRDLEdBQVFqQyxVQUVwQlgsRUFBWW5SLE9BQU8rVCxFQUFRLElBSS9CSixFQUFrQkUsTSw2QkNsUXRCcFEsRUFBT2lELFFBQVUsU0FBVXNOLEdBQ3pCLElBQUl2TixFQUFPLEdBdURYLE9BckRBQSxFQUFLOEMsU0FBVyxXQUNkLE9BQU9ySixLQUFLNEQsS0FBSSxTQUFVVyxHQUN4QixJQUFJMEwsRUFzRFYsU0FBZ0MxTCxFQUFNdVAsR0FDcEMsSUFBSTdELEVBQVUxTCxFQUFLLElBQU0sR0FFckJ3UCxFQUFheFAsRUFBSyxHQUV0QixJQUFLd1AsRUFDSCxPQUFPOUQsRUFHVCxHQUFJNkQsR0FBZ0MsbUJBQVRmLEtBQXFCLENBQzlDLElBQUlpQixHQVdXdEMsRUFYZXFDLEVBYTVCRSxFQUFTbEIsS0FBS0MsU0FBU0MsbUJBQW1CaFIsS0FBS2lSLFVBQVV4QixNQUN6RDdRLEVBQU8sK0RBQStEc0QsT0FBTzhQLEdBQzFFLE9BQU85UCxPQUFPdEQsRUFBTSxRQWRyQnFULEVBQWFILEVBQVdJLFFBQVF2USxLQUFJLFNBQVV3USxHQUNoRCxNQUFPLGlCQUFpQmpRLE9BQU80UCxFQUFXTSxZQUFjLElBQUlsUSxPQUFPaVEsRUFBUSxVQUU3RSxNQUFPLENBQUNuRSxHQUFTOUwsT0FBTytQLEdBQVkvUCxPQUFPLENBQUM2UCxJQUFnQmxQLEtBQUssTUFPckUsSUFBbUI0TSxFQUVidUMsRUFDQXBULEVBUEosTUFBTyxDQUFDb1AsR0FBU25MLEtBQUssTUF2RUp3UCxDQUF1Qi9QLEVBQU11UCxHQUUzQyxPQUFJdlAsRUFBSyxHQUNBLFVBQVVKLE9BQU9JLEVBQUssR0FBSSxNQUFNSixPQUFPOEwsRUFBUyxLQUdsREEsS0FDTm5MLEtBQUssS0FLVnlCLEVBQUtoSCxFQUFJLFNBQVVVLEVBQVNzVSxFQUFZQyxHQUNmLGlCQUFadlUsSUFFVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsRUFBUyxNQUc3QixJQUFJd1UsRUFBeUIsR0FFN0IsR0FBSUQsRUFDRixJQUFLLElBQUlqVixFQUFJLEVBQUdBLEVBQUlTLEtBQUtSLE9BQVFELElBQUssQ0FFcEMsSUFBSTJCLEVBQUtsQixLQUFLVCxHQUFHLEdBRVAsTUFBTjJCLElBQ0Z1VCxFQUF1QnZULElBQU0sR0FLbkMsSUFBSyxJQUFJMFMsRUFBSyxFQUFHQSxFQUFLM1QsRUFBUVQsT0FBUW9VLElBQU0sQ0FDMUMsSUFBSXJQLEVBQU8sR0FBR0osT0FBT2xFLEVBQVEyVCxJQUV6QlksR0FBVUMsRUFBdUJsUSxFQUFLLE1BS3RDZ1EsSUFDR2hRLEVBQUssR0FHUkEsRUFBSyxHQUFLLEdBQUdKLE9BQU9vUSxFQUFZLFNBQVNwUSxPQUFPSSxFQUFLLElBRnJEQSxFQUFLLEdBQUtnUSxHQU1kaE8sRUFBS2xKLEtBQUtrSCxNQUlQZ0MsSSxnQkNqRFQsTUFFRSxNQUFNLElBQUVtTyxHQUFRLEVBQVEsR0FDeEIsSUFDSXZSLEVBREF3UixFQUFPLFlBRVgsSUFDRXhSLEVBQVUsK1JBQ1YsTUFBT2xGLEdBQ1AsTUFBTSxJQUFFeUosR0FBUSxFQUFRLEdBQ3hCQSxFQUFJMUIsTUFDRiwrSUFJSixJQUVFMk8sRUFBTyxNQUNQLE1BQU8xVyxJQUVUeVcsRUFBSUMsRUFBTXhSLElBbkJaLEksZ0JDMkZBSSxFQUFPaUQsUUFBVSxDQUFFa08sSUEvRlAsQ0FBQ0UsRUFBV3pSLEtBQ3RCLE1BQU0sUUFBRTBSLEVBQU8sT0FBRUMsRUFBUyxHQUFFLFNBQUVDLEVBQVEsT0FBRUMsRUFBTSxPQUFFeFUsR0FBVzJDLEVBRTNEQSxFQUFROFIsZUFBaUIzWixPQUFPd00sbUJBRWhDeE0sT0FBT3dNLG1CQUFxQnhNLE9BQU93TSxvQkFBc0IsQ0FDdkRvTixVQUFXLElBRWI1WixPQUFPd00sbUJBQW1CRCxTQUFXaU4sRUFBT2pOLE9BRTVDLE1BQU0sYUFBRXNOLEdBQWlCLEVBQVEsS0FDM0IsUUFBRXhMLEdBQVksRUFBUSxLQUN0QixNQUFFM0QsRUFBSyxLQUFFeUIsRUFBSSxLQUFFakssR0FBUyxFQUFRLEVBQVIsR0FHeEJ1TCxFQUFTLElBQUlvTSxFQUFhTCxFQUFRLEdBRHZCRSxFQUFTLE1BQVEsVUFDdUJGLEVBQU9ELFNBQVdBLFVBRXJFLGFBQUVPLEdBQWlCalMsRUFnRHpCLEdBOUNBN0gsT0FBT3dNLG1CQUFtQm9OLFVBQVVFLEdBQWdCLEdBR3BEOVosT0FBTzJOLGlCQUFpQixlQUFnQixJQUFNRixFQUFPc00sU0FFckR0TSxFQUFPRSxpQkFBaUIsVUFBWUMsSUFDbEMsTUFBTSxPQUFFQyxFQUFNLEtBQUV0SSxFQUFPLElBQU9vQixLQUFLQyxNQUFNZ0gsRUFBUXJJLE9BQzNDLE9BQUV5VSxFQUFNLEtBQUVYLEVBQU8sTUFBSyxTQUFFWSxHQUFhMVUsR0FBUSxHQUM3QzJVLEVBQVliLEVBQUtyUCxNQUFNLEVBQUcsR0FDMUI2TCxFQUFhaE8sRUFBUWlTLGFBQWUsY0FBY2pTLEVBQVFpUyxpQkFBbUIsR0FDN0VLLEVBQVduYSxPQUFPd00sbUJBQW1Cb04sVUFBVUUsSUFDL0MsTUFBRU0sR0FBVTdVLEVBRWxCLE9BQVFzSSxHQUNOLElBQUssUUFDSHNNLEVBQVNFLE1BQU8sRUFDaEIsTUFDRixJQUFLLFlBQ0hsTyxFQUFLLHVCQUF1QjBKLEdBQzVCLE1BQ0YsSUFBSyxPQUNIc0UsRUFBU0UsTUFBTyxFQUNoQixNQUNGLElBQUssV0FDQzlVLEVBQUt5VSxPQUFPOVYsUUFDZHdHLEVBQU0sR0FBR21MLFVBQW1CcUUsdUJBQWdDRixHQUUxRHpVLEVBQUswVSxTQUFTL1YsUUFDaEJoQyxFQUFLLEdBQUcyVCxVQUFtQnFFLHlCQUFrQ0QsR0FFL0QsTUFDRixJQUFLLFNBQ0hqYSxPQUFPc2EsU0FBU0MsU0FDaEIsTUFDRixJQUFLLFVBSUNILEdBQVNBLElBQVV2UyxFQUFRdVMsT0FDN0IvTCxFQUFRaUwsRUFBV0QsTUFPdkJ4UixFQUFROFIsY0FBZSxDQUN6QixHQUFpQixZQUFiRixFQUF3QixDQUMxQixNQUFNLEtBQUVlLEdBQVMsRUFBUSxJQUN6QkEsRUFBSzNTLEVBQVM0RixRQUNULEdBQUlnTSxFQUFVLENBQ25CLE1BQU0sS0FBRWUsR0FBUyxFQUFRLElBQ3pCQSxFQUFLM1MsRUFBUzRGLEdBR2hCLEdBQUl2SSxFQUFRLENBQ1YsTUFBTSxLQUFFc1YsR0FBUyxFQUFRLElBQ3pCQSxFQUFLM1MsRUFBUzRGLEdBSWR0QixFQUFLLG9DQUVEdEUsRUFBUTRTLFlBQ1Z0TyxFQUFLLGlFLGdCQ3BGYixNQUFNLE1BQUV6QixFQUFLLFFBQUUyQixFQUFPLEtBQUVuSyxHQUFTLEVBQVEsRUFBUixHQUczQndZLEVBQWMsQ0FBQyxLQUFNLE1Ba0YzQnpTLEVBQU9pRCxRQUFVLENBQUUyTyxhQS9FbkIsTUFDRSxZQUFZaFMsS0FBWThTLEdBQ3RCalcsS0FBS2lXLEtBQU9BLEVBQ1pqVyxLQUFLa1csU0FBVyxFQUNoQmxXLEtBQUttVyxjQUFnQixHQUNyQm5XLEtBQUttRCxRQUFVQSxFQUNmbkQsS0FBS29XLFVBQVcsRUFFaEJwVyxLQUFLcVcsVUFHUCxvQkFBb0JKLEdBQ2xCalcsS0FBS21XLGNBQWM5WSxLQUFLNFksR0FDeEJqVyxLQUFLK0ksT0FBT0Usb0JBQW9CZ04sR0FHbEMsUUFDRWpXLEtBQUsrSSxPQUFPc00sUUFHZCxVQThCRSxHQTdCSXJWLEtBQUsrSSxlQUNBL0ksS0FBSytJLE9BR2QvSSxLQUFLc1csWUFBYSxFQUVsQnRXLEtBQUsrSSxPQUFTLElBQUl3TixhQUFhdlcsS0FBS2lXLE1BRWhDalcsS0FBS21ELFFBQVFxVCxNQUNmeFcsS0FBSytJLE9BQU9FLGlCQUFpQixRQUFVd04sSUFDakNULEVBQVlVLFNBQVNELEVBQU1FLFFBSTFCM1csS0FBS29XLFVBQ1I1WSxFQUFLLDBEQUdQd0MsS0FBSzRXLGVBR1A1VyxLQUFLK0ksT0FBTzhOLFFBQVUsSUFBTXJaLEVBQUssb0NBQW9DbUssR0FHdkUzSCxLQUFLK0ksT0FBT0UsaUJBQWlCLE9BQVEsS0FDbkNqSixLQUFLa1csU0FBVyxFQUNoQmxXLEtBQUtvVyxVQUFXLElBR2RwVyxLQUFLbVcsY0FBYzNXLE9BQ3JCLElBQUssTUFBTzlCLEVBQU1YLEtBQU9pRCxLQUFLbVcsY0FDNUJuVyxLQUFLK0ksT0FBT0UsaUJBQWlCdkwsRUFBTVgsR0FLekMsWUFJRSxHQUhBaUQsS0FBS2tXLFVBQVksRUFDakJsVyxLQUFLb1csVUFBVyxFQUVacFcsS0FBS2tXLFNBL0RPLEdBa0VkLE9BRkFsUSxFQUFNLDJDQUEyQzJCLFFBQ2pEM0gsS0FBS29XLFVBQVcsR0FJbEIsTUFBTXhVLEVBQVUsSUFBTzVCLEtBQUtrVyxVQUFZLEVBRXhDWSxXQUFXLElBQU05VyxLQUFLcVcsUUFBUXJXLEtBQUtpVyxNQUFPclUsR0FHNUMsdUJBQXVCcVUsR0FDckIsTUFBTyxDQUFFak4sR0FBV2lOLEVBQ3BCalcsS0FBS21XLGNBQWdCblcsS0FBS21XLGNBQWM3RCxPQUFPLEVBQUUsQ0FBRXZWLEtBQVFBLElBQU9pTSxHQUNsRWhKLEtBQUsrSSxPQUFPZ08sdUJBQXVCZCxPLGdCQ2pGdkMsTUFBTSxNQUFFalEsRUFBSyxLQUFFeUIsRUFBSSxRQUFFRSxFQUFPLEtBQUVuSyxHQUFTLEVBQVEsRUFBUixHQUV2QyxJQUFJd1osR0FBUyxFQUViLE1BQU1DLEVBQU0sQ0FDVixhQUFhcFcsR0FDWHJELEVBQUssb0NBQXFDcUQsR0FDMUNyRCxFQUFLcUQsSUFFUCxXQUFXQSxHQUNUckQsRUFBSyxrQ0FBbUNxRCxJQUUxQyxVQUFVQSxHQUNSbUYsRUFBTSx3QkFBeUJuRixLQTZDbkMwQyxFQUFPaUQsUUFBVSxDQUFFbUQsUUF6Q0h1TixNQUFPdEMsRUFBV0QsS0FDaEMsTUFBTSxNQUFFclUsRUFBSyxNQUFFRixFQUFLLE9BQUVJLEdBQVcrQyxFQUFPdEcsSUFPeEMsR0FMSTBYLElBRUZxQyxFQUFTckMsRUFBSytCLFNBQVM5QixLQUdwQm9DLEVBQVEsQ0FDWCxNQUFNRyxFQUFZM1csSUFFbEIsR0FBa0IsVUFBZDJXLEdBQXVDLFNBQWRBLEVBRTNCLFlBREEzWixFQUFLLG9DQUFvQzJaLFFBQWdCeFAsS0FJM0QsSUFBSTFILEVBRUosSUFDRUEsUUFBZ0JHLEdBQU0sR0FDdEIsTUFBT25DLEdBSVAsT0FHRixJQUFLZ0MsRUFFSCxZQURBekMsRUFBSyxxQ0FBcUNtSyxHQUk1QzFILFFBQWdCSyxFQUFNMlcsR0FFbEJoWCxJQUNGK1csR0FBUyxFQUNUdlAsRUFBSyxTQUFTa04sRUFBS3JQLE1BQU0sRUFBRyxpQkFBa0JyRixRLGdCQ3JEcEQsTUFBTSxPQUFFK0gsRUFBTSxRQUFFTSxHQUFZLEVBQVEsR0FFOUJyQixFQUFLLHVCQUNMc0IsRUFBTyxjQUNGdEIsYUFBY0EsMEJBQ1pBLDBCQUdQZ0IsRUFBTSxNQUNUaEIscUhBU0FBLDhIQU9BQSxtQ0FLR2pGLEVBQVVvVixJQUNGM1UsU0FBU3FPLGNBQWMsSUFBSTdKLFNBQ25DaUIsTUFBTW1QLE1BQVdELEVBQUgsS0FvQ3BCN1QsRUFBT2lELFFBQVUsQ0FDZnNQLEtBN0JXLENBQUMzUyxFQUFTNEYsS0FDakI1RixFQUFROFIsZUFDVnhTLFNBQVN3RyxpQkFBaUIsbUJBQW9CLEtBQzVDakIsRUFBT0MsR0FDUEssRUFBUUMsS0FJWlEsRUFBT0UsaUJBQWlCLFVBQVlDLElBQ2xDLE1BQU0sT0FBRUMsRUFBTSxLQUFFdEksR0FBU29CLEtBQUtDLE1BQU1nSCxFQUFRckksTUFFNUMsR0FBZSxhQUFYc0ksRUFDRixPQUdGLE1BQU1pTyxFQUFVRSxLQUFLQyxNQUFxQixJQUFmMVcsRUFBS3VXLFNBQzFCSSxFQUFVL1UsU0FBU3FPLGNBQWMsSUFBSTdKLEdBRTNDdVEsRUFBUUMsVUFBVWpGLE9BQVV2TCxFQUFILFdBRUosSUFBakJwRyxFQUFLdVcsU0FDUE4sV0FBVyxJQTFCSCxDQUFDVSxJQUNiQSxFQUFRQyxVQUFVQyxJQUFPelEsRUFBSCxXQUN0QjZQLFdBQVcsSUFBTTlVLEVBQU8sR0FBSSxNQXdCUDJWLENBQU1ILEdBQVUsS0FHbkN4VixFQUFPb1YsUSxnQkNoRVgsTUFBTSxPQUFFcFAsRUFBTSxRQUFFTSxHQUFZLEVBQVEsR0FFOUJyQixFQUFLLGVBQ0xnQixFQUFNLG1GQUdUaEIsa0tBVUFBLG1DQUlBQSw2UUFVQUEseUZBTUFBLGtGQUtBQSwyRkFNQUEsMk5BVVVBLDZWQW9CVkEsNEJBQ1lBLDBGQUtaQSwyQ0FLR3NCLEVBQU8sY0FDRnRCLGFBQWNBLGNBQWVBLHdFQUN4QkEseURBQ0ZBLHdFQUNBQSx5Q0FBMENBLHdDQUF5Q0EsOENBSTNGakYsRUFBVW9WLElBQ2QsTUFDTXJaLEVBQVEwRSxTQUFTcU8sY0FBYyxJQUFJN0osbUJBRW5DMlEsR0FBVyxJQUFNUixHQUFXLEtBSHJCLG1CQUVDM1UsU0FBU3FPLGNBQWMsSUFBSTdKLFVBR25DZ0wsYUFBYSxRQUFTLHNCQUFzQjJGLEdBQ2xEN1osRUFBTTJLLFVBQVkwTyxFQUFRL04sWUF5QzVCOUYsRUFBT2lELFFBQVUsQ0FBRXNQLEtBakNOLENBQUMzUyxFQUFTNEYsS0FDakI1RixFQUFROFIsZUFDVnhTLFNBQVN3RyxpQkFBaUIsbUJBQW9CLEtBQzVDakIsRUFBT0MsR0FDUEssRUFBUUMsS0FJWlEsRUFBT0UsaUJBQWlCLFVBQVlDLElBQ2xDLE1BQU0sT0FBRUMsRUFBTSxLQUFFdEksR0FBU29CLEtBQUtDLE1BQU1nSCxFQUFRckksTUFFNUMsR0FBZSxhQUFYc0ksRUFDRixPQUdGLE1BQU1pTyxFQUFVRSxLQUFLQyxNQUFxQixJQUFmMVcsRUFBS3VXLFNBQzFCUyxFQUFNcFYsU0FBU3FPLGNBQWMsSUFBSTdKLEdBRWxDNFEsSUFLTEEsRUFBSUosVUFBVWpGLE9BQVV2TCxFQUFILFVBQW1CQSxFQUFILGtCQUVoQixJQUFqQnBHLEVBQUt1VyxTQUNQTixXQUFXLElBL0JILENBQUNlLElBQ2JBLEVBQUlKLFVBQVVDLElBQU96USxFQUFILFdBQ2xCNlAsV0FBVyxJQUFNOVUsRUFBTyxHQUFJLE1BNkJQMlYsQ0FBTUUsR0FBTSxLQUcvQjdWLEVBQU9vVixTLGdCQzVJWCxNQUFNLE9BQUVwUCxFQUFNLFFBQUVNLEVBQU8sY0FBRVEsR0FBa0IsRUFBUSxHQUU3QzdCLEVBQUssYUFDTGdCLEVBQU0sbUZBR1RoQix5Y0FxQlVBLHlLQWNWQSxLQUFNQSw0QkFDTUEsbUZBS1pBLEtBQU1BLGtQQWVOQSxLQUFNQSxVQUFXQSx3Q0FJakJBLDJKQVVBQSxLQUFNQSxVQUFXQSxzQ0FJakJBLDJGQU1BQSw2RkFNQUEsaUVBS0FBLGdNQVNBQSxnT0FXR0Esd0VBS0FBLGtFQUtBQSxvRUFLSEEsY0FBZUEsY0FBZUEseUNBSTlCQSxLQUFNQSxVQUFXQSx5Q0FJakJBLDZFQU1BQSxLQUFNQSxVQUFXQSxvQ0FJakJBLHVDQUlBQSxrTEFVR0EsaUVBS0hBLCtKQVVBQSxxQkFBc0JBLHFNQVl0QkEsbUNBQ1lBLDhEQUlaQSxrQ0FDWUEscURBSUZBLG1NQWVWQSw2S0FVQUEsWUFBYUEsaURBSWJBLFlBQWFBLG9CQUFxQkEsd0VBSWxDQSxZQUFhQSxtREFJYkEsWUFBYUEsc0JBQXVCQSx3RUFLakNzQixFQUFPLGdCQUNBdEIsYUFBY0Esa0RBQ1hBLG9EQUdIQSx5QkFDRUEsK0NBQ0FBLHNEQUVIQSw0Q0FFRUEsc0NBQ0FBLG9EQUVHQSw4QkFDRkEsNERBQ0FBLGtDQUNBQSwrQ0FvSWYxRCxFQUFPaUQsUUFBVSxDQUFFc1AsS0EvSE4sQ0FBQzNTLEVBQVM0RixLQUNyQixNQUFNK08sRUFBWTdRLEVBQUgsVUFDZixJQUNJOFEsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFQQUMsR0FBYyxFQVNsQixNQUFNWCxFQUFRLEtBQ1pPLEVBQVV4UCxVQUFZLEdBQ3RCeVAsRUFBWXpQLFVBQVksR0FDeEJ1UCxFQUFTUixVQUFVakYsT0FBVXZMLEVBQUgsWUFDMUIrUSxFQUFPTyxVQUFZLEdBQ25CSCxFQUFZSSxVQUFZLEdBQ3hCSCxFQUFjRyxVQUFZLElBeUN4QnJWLEVBQVE4UixlQUNWeFMsU0FBU3dHLGlCQUFpQixtQkFBb0IsS0FDNUNqQixFQUFPQyxJQUNOOFAsR0FBU3pQLEVBQVFDLEdBQ2xCeVAsRUFBU3ZWLFNBQVNxTyxjQUFjLElBQUk3SixZQUNwQ2dSLEVBQVd4VixTQUFTcU8sY0FBYyxJQUFJN0osY0FDdENpUixFQUFZelYsU0FBU3FPLGNBQWMsSUFBSTdKLFlBQ3ZDa1IsRUFBYzFWLFNBQVNxTyxjQUFjLElBQUk3SixjQUN6Q21SLEVBQWMzVixTQUFTcU8sY0FBYyxJQUFJN0osa0JBQ3pDb1IsRUFBZ0I1VixTQUFTcU8sY0FBYyxJQUFJN0osb0JBRTNDLE1BQU1vTyxFQUFRNVMsU0FBU3FPLGNBQWMsSUFBSTdKLFdBQ25Dd1IsRUFBTWhXLFNBQVNxTyxjQUFjLElBQUk3SixTQUV2QzhRLEVBQU05TyxpQkFBaUIsUUFBUyxLQUM5QjhPLEVBQU1OLFVBQVVqRixPQUFVdkwsRUFBSCxVQUd6Qm9PLEVBQU1wTSxpQkFBaUIsUUFBUyxLQUM5QjhPLEVBQU1OLFVBQVVDLElBQU96USxFQUFILGFBR3RCd1IsRUFBSXhQLGlCQUFpQixRQUFVaEwsSUFDN0I4WixFQUFNTixVQUFVQyxJQUFPelEsRUFBSCxRQUNwQmhKLEVBQUV5YSwrQkFLUjVQLEVBQWNDLEVBQVEsQ0FBQ0ksRUFBUXRJLEtBQzdCLElBQUtrWCxFQUNILE9BR0YsTUFBTSxVQUFFN0MsR0FBYzVaLE9BQU93TSxtQkFFN0IsT0FBUXFCLEdBQ04sSUFBSyxRQUVId08sSUFDQSxNQUNGLElBQUssV0EvRVMsQ0FBQ3JDLElBQ2pCLEdBQUlBLEVBQU85VixPQUFRLENBQ2pCeVksRUFBU1IsVUFBVWpGLE9BQVV2TCxFQUFILFlBQzFCK1EsRUFBT1AsVUFBVUMsSUFBT3pRLEVBQUgsVUFFckIsSUFBSyxNQUFNakIsS0FBU3NQLEVBQVEsQ0FFMUJoTixFQURlLDBCQUEwQnRDLFVBQ3pCa1MsR0FHbEJFLEVBQVlJLFVBQWVsRCxFQUFPOVYsT0FBVixpQkFFeEI0WSxFQUFZSSxVQUFZLEdBRTFCVCxFQUFNTixVQUFVakYsT0FBT3NGLElBa0VuQmEsQ0FBVTlYLEVBQUt5VSxRQS9ERCxDQUFDQyxJQUNuQixHQUFJQSxFQUFTL1YsT0FBUSxDQUNuQnlZLEVBQVNSLFVBQVVqRixPQUFVdkwsRUFBSCxZQUVyQitRLEVBQU9QLFVBQVVtQixTQUFZM1IsRUFBSCxXQUM3QitRLEVBQU9QLFVBQVVDLElBQU96USxFQUFILFlBR3ZCLElBQUssTUFBTTRSLEtBQVd0RCxFQUFVLENBRTlCak4sRUFEZSw0QkFBNEJ1USxVQUMzQlYsR0FHbEJFLEVBQWNHLFVBQWVqRCxFQUFTL1YsT0FBWixtQkFFMUI2WSxFQUFjRyxVQUFZLEdBRzVCVCxFQUFNTixVQUFVakYsT0FBT3NGLElBOENuQmdCLENBQVlqWSxFQUFLMFUsVUFDakJ3QyxFQUFNTixVQUFVakYsT0FBT3NGLEdBQ3ZCUSxFQUFjelgsRUFBS3lVLE9BQU85VixRQUFVcUIsRUFBSzBVLFNBQVMvVixPQUNsRCxNQUNGLElBQUssVUFFSCxJQUFLLE1BQU00VixLQUFnQnhaLE9BQU80SixLQUFLMFAsR0FDckMsSUFBS0EsRUFBVUUsR0FDYixRQUlBa0QsR0FBZ0JKLEVBQVU1YSxTQUFTa0MsUUFBVzJZLEVBQVk3YSxTQUFTa0MsU0FDckVtWSxJQUNBVyxHQUFjLEVBQ2RMLEVBQVNSLFVBQVVDLElBQU96USxFQUFILFlBQ3ZCOFEsRUFBTU4sVUFBVWpGLE9BQU9zRixHQUV2QmhCLFdBQVcsSUFBTWlCLEVBQU1OLFVBQVVDLElBQUlJLEdBQVMsWSxvREN6WWpEaUIsRUFBaUJDLEtBQUtELGVBR1IsRUFBckIsd0JBVVksS0FBQUUsU0FBbUIsRUEyRy9CLE9BdkZJLFlBQUFDLE1BQUEsU0FBTWhZLEdBQ0ZsQixLQUFLa0IsR0FBS0EsR0FHZCxZQUFBaVksU0FBQSxTQUFTQyxHQUNMcFosS0FBS29aLE1BQVFBLEdBR2pCLFlBQUFDLFdBQUEsU0FBV3BKLEdBQ1BqUSxLQUFLaVEsUUFBVUEsR0FHbkIsWUFBQXFKLFVBQUEsU0FBVTlZLEdBQ05SLEtBQUtRLE9BQVNBLEdBR2xCLFlBQUErWSxNQUFBLFdBQ0ksT0FBT3ZaLEtBQUtrQixJQUdoQixZQUFBc1ksU0FBQSxXQUNJLE9BQU94WixLQUFLb1osT0FHaEIsWUFBQUssV0FBQSxXQUNJLE9BQU96WixLQUFLaVEsU0FHaEIsWUFBQXlKLFVBQUEsV0FDSSxPQUFPMVosS0FBS1EsUUFHVCxFQUFBbVosV0FBUCxXQUNJLE9BQU9yQyxLQUFLQyxNQUFzQixJQUFoQkQsS0FBS3NDLFdBRzNCLFlBQUFDLFNBQUEsU0FBU0MsR0FDTDlaLEtBQUs4WixNQUFRQSxHQUdqQixZQUFBQyxTQUFBLFdBQ0ksT0FBTy9aLEtBQUs4WixPQUdoQixZQUFBRSxhQUFBLFNBQWF0TyxHQUNUMUwsS0FBS2lhLFVBQVl2TyxHQUdyQixZQUFBd08sYUFBQSxXQUNJLE9BQU9sYSxLQUFLaWEsV0FHaEIsWUFBQUUsT0FBQSxXQUNJbmEsS0FBS2laLFNBQVUsR0FHbkIsWUFBQW1CLFFBQUEsV0FDSXBhLEtBQUtpWixTQUFVLEdBR25CLFlBQUFvQixVQUFBLFdBQ0ksT0FBd0IsSUFBakJyYSxLQUFLaVosU0FHVCxFQUFBcUIsY0FBUCxXQUNJLElBQU1sTCxFQUFPLElBQUltTCxFQUNiQyxFQUFNLElBQUl6QixFQUFlLFFBQVN3QixFQUFLRSxhQUszQyxPQUhBckwsRUFBS2xPLEdBQUtxWixFQUFLWixhQUNmdkssRUFBS2dLLE1BQVFvQixFQUFJRSxPQUFRQyxLQUFLQyxPQUM5QnhMLEVBQUthLFFBQVVzSyxFQUFLTSxVQUFVdkQsS0FBS0MsTUFBTUQsS0FBS3NDLFNBQVdXLEVBQUtNLFVBQVVyYixTQUNqRTRQLEdBR0osRUFBQTBMLGVBQVAsU0FBc0JqYSxHQUNsQixJQUFJdU8sRUFBTyxJQUFJbUwsRUFRZixPQVBBbkwsRUFBS2xPLEdBQUtMLEVBQUtLLEdBQ2ZrTyxFQUFLZ0ssTUFBUXZZLEVBQUt1WSxNQUNsQmhLLEVBQUthLFFBQVVwUCxFQUFLb1AsUUFDcEJiLEVBQUswSyxNQUFRalosRUFBS2laLE1BQ2xCMUssRUFBSzZLLFVBQVlwWixFQUFLb1osVUFDdEI3SyxFQUFLNkosUUFBVXBZLEVBQUtvWSxRQUViN0osR0FyR0ksRUFBQXlMLFVBQWlCLENBQzVCLHlHQUNBLDREQUdBLCtHQUNBLCtDQUNBLCtFQUdXLEVBQUFKLFlBQWMsQ0FDekJNLEtBQU0sVUFDTkMsTUFBTyxPQUNQQyxJQUFLLFVBQ0xDLEtBQU0sVUFDTkMsT0FBUSxXQTBGaEIsRUFySEE7Ozs7Ozs7QUNFQSxTQUFTQyxFQUFRdlIsR0FXZixPQVRFdVIsRUFEb0IsbUJBQVh0VSxRQUFvRCxpQkFBcEJBLE9BQU91VSxTQUN0QyxTQUFVeFIsR0FDbEIsY0FBY0EsR0FHTixTQUFVQSxHQUNsQixPQUFPQSxHQUF5QixtQkFBWC9DLFFBQXlCK0MsRUFBSXlSLGNBQWdCeFUsUUFBVStDLElBQVEvQyxPQUFPakwsVUFBWSxnQkFBa0JnTyxJQUk5R0EsR0FHakIsU0FBUzBSLEVBQWdCMVIsRUFBSzFDLEVBQUtwSixHQVlqQyxPQVhJb0osS0FBTzBDLEVBQ1RqTyxPQUFPb0MsZUFBZTZMLEVBQUsxQyxFQUFLLENBQzlCcEosTUFBT0EsRUFDUEgsWUFBWSxFQUNaRCxjQUFjLEVBQ2Q2ZCxVQUFVLElBR1ozUixFQUFJMUMsR0FBT3BKLEVBR044TCxFQUdULFNBQVM0UixJQWVQLE9BZEFBLEVBQVc3ZixPQUFPOGYsUUFBVSxTQUFVOUssR0FDcEMsSUFBSyxJQUFJclIsRUFBSSxFQUFHQSxFQUFJb2MsVUFBVW5jLE9BQVFELElBQUssQ0FDekMsSUFBSTZVLEVBQVN1SCxVQUFVcGMsR0FFdkIsSUFBSyxJQUFJNEgsS0FBT2lOLEVBQ1Z4WSxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLcVksRUFBUWpOLEtBQy9DeUosRUFBT3pKLEdBQU9pTixFQUFPak4sSUFLM0IsT0FBT3lKLElBR090USxNQUFNTixLQUFNMmIsV0FHOUIsU0FBU0MsRUFBY2hMLEdBQ3JCLElBQUssSUFBSXJSLEVBQUksRUFBR0EsRUFBSW9jLFVBQVVuYyxPQUFRRCxJQUFLLENBQ3pDLElBQUk2VSxFQUF5QixNQUFoQnVILFVBQVVwYyxHQUFhb2MsVUFBVXBjLEdBQUssR0FDL0NzYyxFQUFVamdCLE9BQU80SixLQUFLNE8sR0FFa0IsbUJBQWpDeFksT0FBT2tnQix3QkFDaEJELEVBQVVBLEVBQVExWCxPQUFPdkksT0FBT2tnQixzQkFBc0IxSCxHQUFROUIsUUFBTyxTQUFVeUosR0FDN0UsT0FBT25nQixPQUFPb2dCLHlCQUF5QjVILEVBQVEySCxHQUFLbmUsZ0JBSXhEaWUsRUFBUXBXLFNBQVEsU0FBVTBCLEdBQ3hCb1UsRUFBZ0IzSyxFQUFRekosRUFBS2lOLEVBQU9qTixPQUl4QyxPQUFPeUosRUFrQlQsU0FBU3FMLEVBQXlCN0gsRUFBUThILEdBQ3hDLEdBQWMsTUFBVjlILEVBQWdCLE1BQU8sR0FFM0IsSUFFSWpOLEVBQUs1SCxFQUZMcVIsRUFsQk4sU0FBdUN3RCxFQUFROEgsR0FDN0MsR0FBYyxNQUFWOUgsRUFBZ0IsTUFBTyxHQUMzQixJQUVJak4sRUFBSzVILEVBRkxxUixFQUFTLEdBQ1R1TCxFQUFhdmdCLE9BQU80SixLQUFLNE8sR0FHN0IsSUFBSzdVLEVBQUksRUFBR0EsRUFBSTRjLEVBQVczYyxPQUFRRCxJQUNqQzRILEVBQU1nVixFQUFXNWMsR0FDYjJjLEVBQVM5ZSxRQUFRK0osSUFBUSxJQUM3QnlKLEVBQU96SixHQUFPaU4sRUFBT2pOLElBR3ZCLE9BQU95SixFQU1Nd0wsQ0FBOEJoSSxFQUFROEgsR0FJbkQsR0FBSXRnQixPQUFPa2dCLHNCQUF1QixDQUNoQyxJQUFJTyxFQUFtQnpnQixPQUFPa2dCLHNCQUFzQjFILEdBRXBELElBQUs3VSxFQUFJLEVBQUdBLEVBQUk4YyxFQUFpQjdjLE9BQVFELElBQ3ZDNEgsRUFBTWtWLEVBQWlCOWMsR0FDbkIyYyxFQUFTOWUsUUFBUStKLElBQVEsR0FDeEJ2TCxPQUFPQyxVQUFVeWdCLHFCQUFxQnZnQixLQUFLcVksRUFBUWpOLEtBQ3hEeUosRUFBT3pKLEdBQU9pTixFQUFPak4sSUFJekIsT0FBT3lKLEVBeUJULFNBQVMyTCxFQUFVQyxHQUNqQixHQUFzQixvQkFBWGxoQixRQUEwQkEsT0FBT21oQixVQUMxQyxRQUVBQSxVQUFVRixVQUFVOVEsTUFBTStRLEdBSTlCLElBQUlFLEVBQWFILEVBQVUseURBQ3ZCSSxFQUFPSixFQUFVLFNBQ2pCSyxFQUFVTCxFQUFVLFlBQ3BCTSxFQUFTTixFQUFVLGFBQWVBLEVBQVUsYUFBZUEsRUFBVSxZQUNyRU8sRUFBTVAsRUFBVSxtQkFDaEJRLEVBQW1CUixFQUFVLFlBQWNBLEVBQVUsWUFFckRTLEVBQWMsQ0FDaEJDLFNBQVMsRUFDVEMsU0FBUyxHQUdYLFNBQVNDLEVBQUdDLEVBQUkzRyxFQUFPMVosR0FDckJxZ0IsRUFBR25VLGlCQUFpQndOLEVBQU8xWixHQUFLMmYsR0FBY00sR0FHaEQsU0FBU0ssRUFBSUQsRUFBSTNHLEVBQU8xWixHQUN0QnFnQixFQUFHckcsb0JBQW9CTixFQUFPMVosR0FBSzJmLEdBQWNNLEdBR25ELFNBQVNNLEVBRVRGLEVBRUFHLEdBQ0UsR0FBS0EsRUFBTCxDQUdBLEdBRmdCLE1BQWhCQSxFQUFTLEtBQWVBLEVBQVdBLEVBQVM1UixVQUFVLElBRWxEeVIsRUFDRixJQUNFLEdBQUlBLEVBQUdFLFFBQ0wsT0FBT0YsRUFBR0UsUUFBUUMsR0FDYixHQUFJSCxFQUFHSSxrQkFDWixPQUFPSixFQUFHSSxrQkFBa0JELEdBQ3ZCLEdBQUlILEVBQUdLLHNCQUNaLE9BQU9MLEVBQUdLLHNCQUFzQkYsR0FFbEMsTUFBT0csR0FDUCxPQUFPLEVBSVgsT0FBTyxHQUdULFNBQVNDLEVBQWdCUCxHQUN2QixPQUFPQSxFQUFHUSxNQUFRUixJQUFPM2EsVUFBWTJhLEVBQUdRLEtBQUtDLFNBQVdULEVBQUdRLEtBQU9SLEVBQUc5SixXQUd2RSxTQUFTd0ssRUFFVFYsRUFFQUcsRUFFQVEsRUFBS0MsR0FDSCxHQUFJWixFQUFJLENBQ05XLEVBQU1BLEdBQU90YixTQUViLEVBQUcsQ0FDRCxHQUFnQixNQUFaOGEsSUFBcUMsTUFBaEJBLEVBQVMsR0FBYUgsRUFBRzlKLGFBQWV5SyxHQUFPVCxFQUFRRixFQUFJRyxHQUFZRCxFQUFRRixFQUFJRyxLQUFjUyxHQUFjWixJQUFPVyxFQUM3SSxPQUFPWCxFQUdULEdBQUlBLElBQU9XLEVBQUssWUFFVFgsRUFBS08sRUFBZ0JQLElBR2hDLE9BQU8sS0FHVCxJQWdXSWEsRUFoV0FDLEVBQVUsT0FFZCxTQUFTQyxFQUFZZixFQUFJMWYsRUFBTTBnQixHQUM3QixHQUFJaEIsR0FBTTFmLEVBQ1IsR0FBSTBmLEVBQUczRixVQUNMMkYsRUFBRzNGLFVBQVUyRyxFQUFRLE1BQVEsVUFBVTFnQixPQUNsQyxDQUNMLElBQUk2YSxHQUFhLElBQU02RSxFQUFHN0UsVUFBWSxLQUFLNU8sUUFBUXVVLEVBQVMsS0FBS3ZVLFFBQVEsSUFBTWpNLEVBQU8sSUFBSyxLQUMzRjBmLEVBQUc3RSxXQUFhQSxHQUFhNkYsRUFBUSxJQUFNMWdCLEVBQU8sS0FBS2lNLFFBQVF1VSxFQUFTLE1BSzlFLFNBQVNqVyxFQUFJbVYsRUFBSWlCLEVBQU1DLEdBQ3JCLElBQUlwVyxFQUFRa1YsR0FBTUEsRUFBR2xWLE1BRXJCLEdBQUlBLEVBQU8sQ0FDVCxRQUFZLElBQVJvVyxFQU9GLE9BTkk3YixTQUFTOGIsYUFBZTliLFNBQVM4YixZQUFZQyxpQkFDL0NGLEVBQU03YixTQUFTOGIsWUFBWUMsaUJBQWlCcEIsRUFBSSxJQUN2Q0EsRUFBR3FCLGVBQ1pILEVBQU1sQixFQUFHcUIsbUJBR0ssSUFBVEosRUFBa0JDLEVBQU1BLEVBQUlELEdBRTdCQSxLQUFRblcsSUFBc0MsSUFBNUJtVyxFQUFLamhCLFFBQVEsWUFDbkNpaEIsRUFBTyxXQUFhQSxHQUd0Qm5XLEVBQU1tVyxHQUFRQyxHQUFzQixpQkFBUkEsRUFBbUIsR0FBSyxPQUsxRCxTQUFTSSxFQUFPdEIsRUFBSXVCLEdBQ2xCLElBQUlDLEVBQW9CLEdBRXhCLEdBQWtCLGlCQUFQeEIsRUFDVHdCLEVBQW9CeEIsT0FFcEIsRUFBRyxDQUNELElBQUl5QixFQUFZNVcsRUFBSW1WLEVBQUksYUFFcEJ5QixHQUEyQixTQUFkQSxJQUNmRCxFQUFvQkMsRUFBWSxJQUFNRCxVQUloQ0QsSUFBYXZCLEVBQUtBLEVBQUc5SixhQUdqQyxJQUFJd0wsRUFBV3hqQixPQUFPeWpCLFdBQWF6akIsT0FBTzBqQixpQkFBbUIxakIsT0FBTzJqQixXQUFhM2pCLE9BQU80akIsWUFHeEYsT0FBT0osR0FBWSxJQUFJQSxFQUFTRixHQUdsQyxTQUFTTyxFQUFLcEIsRUFBS3FCLEVBQVMvRCxHQUMxQixHQUFJMEMsRUFBSyxDQUNQLElBQUl4WCxFQUFPd1gsRUFBSXNCLHFCQUFxQkQsR0FDaEM3ZixFQUFJLEVBQ0o4SCxFQUFJZCxFQUFLL0csT0FFYixHQUFJNmIsRUFDRixLQUFPOWIsRUFBSThILEVBQUc5SCxJQUNaOGIsRUFBUzlVLEVBQUtoSCxHQUFJQSxHQUl0QixPQUFPZ0gsRUFHVCxNQUFPLEdBR1QsU0FBUytZLElBQ1AsSUFBSUMsRUFBbUI5YyxTQUFTOGMsaUJBRWhDLE9BQUlBLEdBR0s5YyxTQUFTK2MsZ0JBY3BCLFNBQVNDLEVBQVFyQyxFQUFJc0MsRUFBMkJDLEVBQTJCQyxFQUFXQyxHQUNwRixHQUFLekMsRUFBRzBDLHVCQUF5QjFDLElBQU85aEIsT0FBeEMsQ0FDQSxJQUFJeWtCLEVBQVFDLEVBQUtDLEVBQU1DLEVBQVFDLEVBQU9DLEVBQVEvSSxFQW1COUMsR0FqQkkrRixJQUFPOWhCLFFBQVU4aEIsSUFBT2tDLEtBRTFCVSxHQURBRCxFQUFTM0MsRUFBRzBDLHlCQUNDRSxJQUNiQyxFQUFPRixFQUFPRSxLQUNkQyxFQUFTSCxFQUFPRyxPQUNoQkMsRUFBUUosRUFBT0ksTUFDZkMsRUFBU0wsRUFBT0ssT0FDaEIvSSxFQUFRMEksRUFBTzFJLFFBRWYySSxFQUFNLEVBQ05DLEVBQU8sRUFDUEMsRUFBUzVrQixPQUFPK2tCLFlBQ2hCRixFQUFRN2tCLE9BQU9nbEIsV0FDZkYsRUFBUzlrQixPQUFPK2tCLFlBQ2hCaEosRUFBUS9iLE9BQU9nbEIsYUFHWlosR0FBNkJDLElBQThCdkMsSUFBTzloQixTQUVyRXVrQixFQUFZQSxHQUFhekMsRUFBRzlKLFlBR3ZCb0osR0FDSCxHQUNFLEdBQUltRCxHQUFhQSxFQUFVQyx3QkFBMEQsU0FBaEM3WCxFQUFJNFgsRUFBVyxjQUEyQkYsR0FBNEQsV0FBL0IxWCxFQUFJNFgsRUFBVyxhQUEyQixDQUNwSyxJQUFJVSxFQUFnQlYsRUFBVUMsd0JBRTlCRSxHQUFPTyxFQUFjUCxJQUFNUSxTQUFTdlksRUFBSTRYLEVBQVcscUJBQ25ESSxHQUFRTSxFQUFjTixLQUFPTyxTQUFTdlksRUFBSTRYLEVBQVcsc0JBQ3JESyxFQUFTRixFQUFNRCxFQUFPSyxPQUN0QkQsRUFBUUYsRUFBT0YsRUFBTzFJLE1BQ3RCLGFBSUt3SSxFQUFZQSxFQUFVdk0sWUFJbkMsR0FBSXNNLEdBQWF4QyxJQUFPOWhCLE9BQVEsQ0FFOUIsSUFBSW1sQixFQUFXL0IsRUFBT21CLEdBQWF6QyxHQUMvQnNELEVBQVNELEdBQVlBLEVBQVNwYyxFQUM5QnNjLEVBQVNGLEdBQVlBLEVBQVMvWixFQUU5QitaLElBS0ZQLEdBSkFGLEdBQU9XLElBR1BQLEdBQVVPLEdBRVZSLEdBSkFGLEdBQVFTLElBQ1JySixHQUFTcUosSUFPYixNQUFPLENBQ0xWLElBQUtBLEVBQ0xDLEtBQU1BLEVBQ05DLE9BQVFBLEVBQ1JDLE1BQU9BLEVBQ1A5SSxNQUFPQSxFQUNQK0ksT0FBUUEsSUFZWixTQUFTUSxFQUFleEQsRUFBSXlELEVBQVFDLEdBS2xDLElBSkEsSUFBSTVjLEVBQVM2YyxFQUEyQjNELEdBQUksR0FDeEM0RCxFQUFZdkIsRUFBUXJDLEdBQUl5RCxHQUdyQjNjLEdBQVEsQ0FDYixJQUFJK2MsRUFBZ0J4QixFQUFRdmIsR0FBUTRjLEdBU3BDLEtBTm1CLFFBQWZBLEdBQXVDLFNBQWZBLEVBQ2hCRSxHQUFhQyxFQUViRCxHQUFhQyxHQUdYLE9BQU8vYyxFQUNyQixHQUFJQSxJQUFXb2IsSUFBNkIsTUFDNUNwYixFQUFTNmMsRUFBMkI3YyxHQUFRLEdBRzlDLE9BQU8sRUFZVCxTQUFTZ2QsRUFBUzlELEVBQUkrRCxFQUFVaGUsR0FLOUIsSUFKQSxJQUFJaWUsRUFBZSxFQUNmN2hCLEVBQUksRUFDSmpDLEVBQVc4ZixFQUFHOWYsU0FFWGlDLEVBQUlqQyxFQUFTa0MsUUFBUSxDQUMxQixHQUFrQyxTQUE5QmxDLEVBQVNpQyxHQUFHMkksTUFBTW1aLFNBQXNCL2pCLEVBQVNpQyxLQUFPK2hCLEdBQVNDLE9BQVNqa0IsRUFBU2lDLEtBQU8raEIsR0FBU0UsU0FBVzFELEVBQVF4Z0IsRUFBU2lDLEdBQUk0RCxFQUFRc2UsVUFBV3JFLEdBQUksR0FBUSxDQUNwSyxHQUFJZ0UsSUFBaUJELEVBQ25CLE9BQU83akIsRUFBU2lDLEdBR2xCNmhCLElBR0Y3aEIsSUFHRixPQUFPLEtBVVQsU0FBU21pQixFQUFVdEUsRUFBSUcsR0FHckIsSUFGQSxJQUFJb0UsRUFBT3ZFLEVBQUd3RSxpQkFFUEQsSUFBU0EsSUFBU0wsR0FBU0MsT0FBa0MsU0FBekJ0WixFQUFJMFosRUFBTSxZQUF5QnBFLElBQWFELEVBQVFxRSxFQUFNcEUsS0FDdkdvRSxFQUFPQSxFQUFLRSx1QkFHZCxPQUFPRixHQUFRLEtBV2pCLFNBQVNqVyxFQUFNMFIsRUFBSUcsR0FDakIsSUFBSTdSLEVBQVEsRUFFWixJQUFLMFIsSUFBT0EsRUFBRzlKLFdBQ2IsT0FBUSxFQUtWLEtBQU84SixFQUFLQSxFQUFHeUUsd0JBQ3FCLGFBQTlCekUsRUFBRzBFLFNBQVNDLGVBQWdDM0UsSUFBT2tFLEdBQVNVLE9BQVd6RSxJQUFZRCxFQUFRRixFQUFJRyxJQUNqRzdSLElBSUosT0FBT0EsRUFVVCxTQUFTdVcsRUFBd0I3RSxHQUMvQixJQUFJOEUsRUFBYSxFQUNiQyxFQUFZLEVBQ1pDLEVBQWM5QyxJQUVsQixHQUFJbEMsRUFDRixFQUFHLENBQ0QsSUFBSXFELEVBQVcvQixFQUFPdEIsR0FDbEJzRCxFQUFTRCxFQUFTcGMsRUFDbEJzYyxFQUFTRixFQUFTL1osRUFDdEJ3YixHQUFjOUUsRUFBR2lGLFdBQWEzQixFQUM5QnlCLEdBQWEvRSxFQUFHa0YsVUFBWTNCLFFBQ3JCdkQsSUFBT2dGLElBQWdCaEYsRUFBS0EsRUFBRzlKLGFBRzFDLE1BQU8sQ0FBQzRPLEVBQVlDLEdBc0J0QixTQUFTcEIsRUFBMkIzRCxFQUFJbUYsR0FFdEMsSUFBS25GLElBQU9BLEVBQUcwQyxzQkFBdUIsT0FBT1IsSUFDN0MsSUFBSWtELEVBQU9wRixFQUNQcUYsR0FBVSxFQUVkLEdBRUUsR0FBSUQsRUFBS0UsWUFBY0YsRUFBS0csYUFBZUgsRUFBS0ksYUFBZUosRUFBS0ssYUFBYyxDQUNoRixJQUFJQyxFQUFVN2EsRUFBSXVhLEdBRWxCLEdBQUlBLEVBQUtFLFlBQWNGLEVBQUtHLGNBQXFDLFFBQXJCRyxFQUFRQyxXQUE0QyxVQUFyQkQsRUFBUUMsWUFBMEJQLEVBQUtJLGFBQWVKLEVBQUtLLGVBQXNDLFFBQXJCQyxFQUFRRSxXQUE0QyxVQUFyQkYsRUFBUUUsV0FBd0IsQ0FDcE4sSUFBS1IsRUFBSzFDLHVCQUF5QjBDLElBQVMvZixTQUFTb0csS0FBTSxPQUFPeVcsSUFDbEUsR0FBSW1ELEdBQVdGLEVBQWEsT0FBT0MsRUFDbkNDLEdBQVUsVUFLUEQsRUFBT0EsRUFBS2xQLFlBRXJCLE9BQU9nTSxJQWVULFNBQVMyRCxFQUFZQyxFQUFPQyxHQUMxQixPQUFPN0wsS0FBSzhMLE1BQU1GLEVBQU1sRCxPQUFTMUksS0FBSzhMLE1BQU1ELEVBQU1uRCxNQUFRMUksS0FBSzhMLE1BQU1GLEVBQU1qRCxRQUFVM0ksS0FBSzhMLE1BQU1ELEVBQU1sRCxPQUFTM0ksS0FBSzhMLE1BQU1GLEVBQU05QyxVQUFZOUksS0FBSzhMLE1BQU1ELEVBQU0vQyxTQUFXOUksS0FBSzhMLE1BQU1GLEVBQU03TCxTQUFXQyxLQUFLOEwsTUFBTUQsRUFBTTlMLE9BS3ZOLFNBQVNnTSxFQUFTaGtCLEVBQVVpa0IsR0FDMUIsT0FBTyxXQUNMLElBQUtyRixFQUFrQixDQUNyQixJQUFJaEksRUFBTzBGLFVBQ1A0SCxFQUFRdmpCLEtBRVEsSUFBaEJpVyxFQUFLelcsT0FDUEgsRUFBU3RELEtBQUt3bkIsRUFBT3ROLEVBQUssSUFFMUI1VyxFQUFTaUIsTUFBTWlqQixFQUFPdE4sR0FHeEJnSSxFQUFtQm5ILFlBQVcsV0FDNUJtSCxPQUFtQixJQUNsQnFGLEtBVVQsU0FBU0UsRUFBU3BHLEVBQUlxRyxFQUFHQyxHQUN2QnRHLEVBQUdpRixZQUFjb0IsRUFDakJyRyxFQUFHa0YsV0FBYW9CLEVBR2xCLFNBQVMxQixFQUFNNUUsR0FDYixJQUFJdUcsRUFBVXJvQixPQUFPcW9CLFFBQ2pCQyxFQUFJdG9CLE9BQU91b0IsUUFBVXZvQixPQUFPd29CLE1BRWhDLE9BQUlILEdBQVdBLEVBQVFJLElBQ2RKLEVBQVFJLElBQUkzRyxHQUFJNEcsV0FBVSxHQUN4QkosRUFDRkEsRUFBRXhHLEdBQUk0RSxPQUFNLEdBQU0sR0FFbEI1RSxFQUFHNEcsV0FBVSxHQW9CeEIsSUFBSUMsRUFBVSxZQUFhLElBQUl0SixNQUFPdUosVUFFdEMsU0FBU0MsSUFDUCxJQUNJQyxFQURBQyxFQUFrQixHQUV0QixNQUFPLENBQ0xDLHNCQUF1QixZQUNyQkQsRUFBa0IsR0FDYnJrQixLQUFLbUQsUUFBUW9oQixZQUNILEdBQUdqZixNQUFNdkosS0FBS2lFLEtBQUtvZCxHQUFHOWYsVUFDNUJtSSxTQUFRLFNBQVVNLEdBQ3pCLEdBQThCLFNBQTFCa0MsRUFBSWxDLEVBQU8sWUFBeUJBLElBQVV1YixHQUFTQyxNQUEzRCxDQUNBOEMsRUFBZ0JobkIsS0FBSyxDQUNuQnVULE9BQVE3SyxFQUNSeWUsS0FBTS9FLEVBQVExWixLQUdoQixJQUFJMGUsRUFBVzdJLEVBQWMsR0FBSXlJLEVBQWdCQSxFQUFnQjdrQixPQUFTLEdBQUdnbEIsTUFHN0UsR0FBSXplLEVBQU0yZSxzQkFBdUIsQ0FDL0IsSUFBSUMsRUFBY2pHLEVBQU8zWSxHQUFPLEdBRTVCNGUsSUFDRkYsRUFBU3pFLEtBQU8yRSxFQUFZQyxFQUM1QkgsRUFBU3hFLE1BQVEwRSxFQUFZMW1CLEdBSWpDOEgsRUFBTTBlLFNBQVdBLE9BR3JCSSxrQkFBbUIsU0FBMkJ6RyxHQUM1Q2lHLEVBQWdCaG5CLEtBQUsrZ0IsSUFFdkIwRyxxQkFBc0IsU0FBOEJsVSxHQUNsRHlULEVBQWdCdmtCLE9BcEp0QixTQUF1QmlsQixFQUFLbGIsR0FDMUIsSUFBSyxJQUFJdEssS0FBS3dsQixFQUNaLEdBQUtBLEVBQUlqcEIsZUFBZXlELEdBRXhCLElBQUssSUFBSTRILEtBQU8wQyxFQUNkLEdBQUlBLEVBQUkvTixlQUFlcUwsSUFBUTBDLEVBQUkxQyxLQUFTNGQsRUFBSXhsQixHQUFHNEgsR0FBTSxPQUFPNmQsT0FBT3psQixHQUkzRSxPQUFRLEVBMkltQjBsQixDQUFjWixFQUFpQixDQUNwRHpULE9BQVFBLElBQ04sSUFFTnNVLFdBQVksU0FBb0I3bEIsR0FDOUIsSUFBSWtrQixFQUFRdmpCLEtBRVosSUFBS0EsS0FBS21ELFFBQVFvaEIsVUFHaEIsT0FGQVksYUFBYWYsUUFDVyxtQkFBYi9rQixHQUF5QkEsS0FJdEMsSUFBSStsQixHQUFZLEVBQ1pDLEVBQWdCLEVBQ3BCaEIsRUFBZ0I1ZSxTQUFRLFNBQVUyWSxHQUNoQyxJQUFJa0gsRUFBTyxFQUNQMVUsRUFBU3dOLEVBQU14TixPQUNmNlQsRUFBVzdULEVBQU82VCxTQUNsQmMsRUFBUzlGLEVBQVE3TyxHQUNqQjRVLEVBQWU1VSxFQUFPNFUsYUFDdEJDLEVBQWE3VSxFQUFPNlUsV0FDcEJDLEVBQWdCdEgsRUFBTW9HLEtBQ3RCbUIsRUFBZWpILEVBQU85TixHQUFRLEdBRTlCK1UsSUFFRkosRUFBT3ZGLEtBQU8yRixFQUFhZixFQUMzQlcsRUFBT3RGLE1BQVEwRixFQUFhMW5CLEdBRzlCMlMsRUFBTzJVLE9BQVNBLEVBRVozVSxFQUFPOFQsdUJBRUx6QixFQUFZdUMsRUFBY0QsS0FBWXRDLEVBQVl3QixFQUFVYyxLQUMvREcsRUFBYzFGLElBQU11RixFQUFPdkYsTUFBUTBGLEVBQWN6RixLQUFPc0YsRUFBT3RGLFFBQVd3RSxFQUFTekUsSUFBTXVGLEVBQU92RixNQUFReUUsRUFBU3hFLEtBQU9zRixFQUFPdEYsUUFFOUhxRixFQTJFWixTQUEyQkksRUFBZWpCLEVBQVVjLEVBQVFwaUIsR0FDMUQsT0FBT21VLEtBQUtzTyxLQUFLdE8sS0FBS3VPLElBQUlwQixFQUFTekUsSUFBTTBGLEVBQWMxRixJQUFLLEdBQUsxSSxLQUFLdU8sSUFBSXBCLEVBQVN4RSxLQUFPeUYsRUFBY3pGLEtBQU0sSUFBTTNJLEtBQUtzTyxLQUFLdE8sS0FBS3VPLElBQUlwQixFQUFTekUsSUFBTXVGLEVBQU92RixJQUFLLEdBQUsxSSxLQUFLdU8sSUFBSXBCLEVBQVN4RSxLQUFPc0YsRUFBT3RGLEtBQU0sSUFBTTljLEVBQVFvaEIsVUE1RTFNdUIsQ0FBa0JKLEVBQWVGLEVBQWNDLEVBQVlsQyxFQUFNcGdCLFVBS3ZFOGYsRUFBWXNDLEVBQVFkLEtBQ3ZCN1QsRUFBTzRVLGFBQWVmLEVBQ3RCN1QsRUFBTzZVLFdBQWFGLEVBRWZELElBQ0hBLEVBQU8vQixFQUFNcGdCLFFBQVFvaEIsV0FHdkJoQixFQUFNd0MsUUFBUW5WLEVBQVE4VSxFQUFlSCxFQUFRRCxJQUczQ0EsSUFDRkYsR0FBWSxFQUNaQyxFQUFnQi9OLEtBQUswTyxJQUFJWCxFQUFlQyxHQUN4Q0gsYUFBYXZVLEVBQU9xVixxQkFDcEJyVixFQUFPcVYsb0JBQXNCblAsWUFBVyxXQUN0Q2xHLEVBQU95VSxjQUFnQixFQUN2QnpVLEVBQU80VSxhQUFlLEtBQ3RCNVUsRUFBTzZULFNBQVcsS0FDbEI3VCxFQUFPNlUsV0FBYSxLQUNwQjdVLEVBQU84VCxzQkFBd0IsT0FDOUJZLEdBQ0gxVSxFQUFPOFQsc0JBQXdCWSxNQUduQ0gsYUFBYWYsR0FFUmdCLEVBR0hoQixFQUFzQnROLFlBQVcsV0FDUCxtQkFBYnpYLEdBQXlCQSxNQUNuQ2dtQixHQUpxQixtQkFBYmhtQixHQUF5QkEsSUFPdENnbEIsRUFBa0IsSUFFcEIwQixRQUFTLFNBQWlCblYsRUFBUXNWLEVBQWFYLEVBQVFZLEdBQ3JELEdBQUlBLEVBQVUsQ0FDWmxlLEVBQUkySSxFQUFRLGFBQWMsSUFDMUIzSSxFQUFJMkksRUFBUSxZQUFhLElBQ3pCLElBQUk2UCxFQUFXL0IsRUFBTzFlLEtBQUtvZCxJQUN2QnNELEVBQVNELEdBQVlBLEVBQVNwYyxFQUM5QnNjLEVBQVNGLEdBQVlBLEVBQVMvWixFQUM5QjBmLEdBQWNGLEVBQVlqRyxLQUFPc0YsRUFBT3RGLE9BQVNTLEdBQVUsR0FDM0QyRixHQUFjSCxFQUFZbEcsSUFBTXVGLEVBQU92RixNQUFRVyxHQUFVLEdBQzdEL1AsRUFBTzBWLGFBQWVGLEVBQ3RCeFYsRUFBTzJWLGFBQWVGLEVBQ3RCcGUsRUFBSTJJLEVBQVEsWUFBYSxlQUFpQndWLEVBQWEsTUFBUUMsRUFBYSxTQWtCcEYsU0FBaUJ6VixHQUNSQSxFQUFPNFYsWUFsQlJDLENBQVE3VixHQUVSM0ksRUFBSTJJLEVBQVEsYUFBYyxhQUFldVYsRUFBVyxNQUFRbm1CLEtBQUttRCxRQUFRdWpCLE9BQVMsSUFBTTFtQixLQUFLbUQsUUFBUXVqQixPQUFTLEtBQzlHemUsRUFBSTJJLEVBQVEsWUFBYSxzQkFDRSxpQkFBcEJBLEVBQU8rVixVQUF5QnhCLGFBQWF2VSxFQUFPK1YsVUFDM0QvVixFQUFPK1YsU0FBVzdQLFlBQVcsV0FDM0I3TyxFQUFJMkksRUFBUSxhQUFjLElBQzFCM0ksRUFBSTJJLEVBQVEsWUFBYSxJQUN6QkEsRUFBTytWLFVBQVcsRUFDbEIvVixFQUFPMFYsWUFBYSxFQUNwQjFWLEVBQU8yVixZQUFhLElBQ25CSixNQWNYLElBQUlTLEVBQVUsR0FDVkMsRUFBVyxDQUNiQyxxQkFBcUIsR0FFbkJDLEVBQWdCLENBQ2xCQyxNQUFPLFNBQWVDLEdBRXBCLElBQUssSUFBSUMsS0FBVUwsRUFDYkEsRUFBUy9xQixlQUFlb3JCLE1BQWFBLEtBQVVELEtBQ2pEQSxFQUFPQyxHQUFVTCxFQUFTSyxJQUk5Qk4sRUFBUXZwQixLQUFLNHBCLElBRWZFLFlBQWEsU0FBcUJDLEVBQVdDLEVBQVVDLEdBQ3JELElBQUkvRCxFQUFRdmpCLEtBRVpBLEtBQUt1bkIsZUFBZ0IsRUFFckJELEVBQUlFLE9BQVMsV0FDWGpFLEVBQU1nRSxlQUFnQixHQUd4QixJQUFJRSxFQUFrQkwsRUFBWSxTQUNsQ1IsRUFBUW5oQixTQUFRLFNBQVV3aEIsR0FDbkJJLEVBQVNKLEVBQU9TLGNBRWpCTCxFQUFTSixFQUFPUyxZQUFZRCxJQUM5QkosRUFBU0osRUFBT1MsWUFBWUQsR0FBaUI3TCxFQUFjLENBQ3pEeUwsU0FBVUEsR0FDVEMsSUFLREQsRUFBU2xrQixRQUFROGpCLEVBQU9TLGFBQWVMLEVBQVNKLEVBQU9TLFlBQVlOLElBQ3JFQyxFQUFTSixFQUFPUyxZQUFZTixHQUFXeEwsRUFBYyxDQUNuRHlMLFNBQVVBLEdBQ1RDLFNBSVRLLGtCQUFtQixTQUEyQk4sRUFBVWpLLEVBQUl5SixFQUFVMWpCLEdBWXBFLElBQUssSUFBSStqQixLQVhUTixFQUFRbmhCLFNBQVEsU0FBVXdoQixHQUN4QixJQUFJUyxFQUFhVCxFQUFPUyxXQUN4QixHQUFLTCxFQUFTbGtCLFFBQVF1a0IsSUFBZ0JULEVBQU9ILG9CQUE3QyxDQUNBLElBQUljLEVBQWMsSUFBSVgsRUFBT0ksRUFBVWpLLEVBQUlpSyxFQUFTbGtCLFNBQ3BEeWtCLEVBQVlQLFNBQVdBLEVBQ3ZCTyxFQUFZemtCLFFBQVVra0IsRUFBU2xrQixRQUMvQmtrQixFQUFTSyxHQUFjRSxFQUV2Qm5NLEVBQVNvTCxFQUFVZSxFQUFZZixjQUdkUSxFQUFTbGtCLFFBQzFCLEdBQUtra0IsRUFBU2xrQixRQUFRckgsZUFBZW9yQixHQUFyQyxDQUNBLElBQUlXLEVBQVc3bkIsS0FBSzhuQixhQUFhVCxFQUFVSCxFQUFRRyxFQUFTbGtCLFFBQVErakIsU0FFNUMsSUFBYlcsSUFDVFIsRUFBU2xrQixRQUFRK2pCLEdBQVVXLEtBSWpDRSxtQkFBb0IsU0FBNEJycUIsRUFBTTJwQixHQUNwRCxJQUFJVyxFQUFrQixHQU10QixPQUxBcEIsRUFBUW5oQixTQUFRLFNBQVV3aEIsR0FDYyxtQkFBM0JBLEVBQU9lLGlCQUVsQnZNLEVBQVN1TSxFQUFpQmYsRUFBT2UsZ0JBQWdCanNCLEtBQUtzckIsRUFBU0osRUFBT1MsWUFBYWhxQixPQUU5RXNxQixHQUVURixhQUFjLFNBQXNCVCxFQUFVM3BCLEVBQU1LLEdBQ2xELElBQUlrcUIsRUFTSixPQVJBckIsRUFBUW5oQixTQUFRLFNBQVV3aEIsR0FFbkJJLEVBQVNKLEVBQU9TLGFBRWpCVCxFQUFPaUIsaUJBQTJELG1CQUFqQ2pCLEVBQU9pQixnQkFBZ0J4cUIsS0FDMUR1cUIsRUFBZ0JoQixFQUFPaUIsZ0JBQWdCeHFCLEdBQU0zQixLQUFLc3JCLEVBQVNKLEVBQU9TLFlBQWEzcEIsT0FHNUVrcUIsSUFJWCxTQUFTRSxFQUFjQyxHQUNyQixJQUFJZixFQUFXZSxFQUFLZixTQUNoQmdCLEVBQVNELEVBQUtDLE9BQ2QzcUIsRUFBTzBxQixFQUFLMXFCLEtBQ1o0cUIsRUFBV0YsRUFBS0UsU0FDaEJDLEVBQVVILEVBQUtHLFFBQ2ZDLEVBQU9KLEVBQUtJLEtBQ1pDLEVBQVNMLEVBQUtLLE9BQ2RDLEVBQVdOLEVBQUtNLFNBQ2hCQyxFQUFXUCxFQUFLTyxTQUNoQkMsRUFBb0JSLEVBQUtRLGtCQUN6QkMsRUFBb0JULEVBQUtTLGtCQUN6QkMsRUFBZ0JWLEVBQUtVLGNBQ3JCQyxFQUFjWCxFQUFLVyxZQUNuQkMsRUFBdUJaLEVBQUtZLHFCQUVoQyxHQURBM0IsRUFBV0EsR0FBWWdCLEdBQVVBLEVBQU9wRSxHQUN4QyxDQUNBLElBQUlxRCxFQUNBbmtCLEVBQVVra0IsRUFBU2xrQixRQUNuQjhsQixFQUFTLEtBQU92ckIsRUFBS3FRLE9BQU8sR0FBR2dVLGNBQWdCcmtCLEVBQUt3ckIsT0FBTyxJQUUzRDV0QixPQUFPNnRCLGFBQWdCek0sR0FBZUMsR0FNeEMySyxFQUFNN2tCLFNBQVMybUIsWUFBWSxVQUN2QkMsVUFBVTNyQixHQUFNLEdBQU0sR0FOMUI0cEIsRUFBTSxJQUFJNkIsWUFBWXpyQixFQUFNLENBQzFCNHJCLFNBQVMsRUFDVEMsWUFBWSxJQU9oQmpDLEVBQUlrQyxHQUFLaEIsR0FBUUgsRUFDakJmLEVBQUltQyxLQUFPaEIsR0FBVUosRUFDckJmLEVBQUkvaUIsS0FBTytqQixHQUFZRCxFQUN2QmYsRUFBSXRGLE1BQVF1RyxFQUNaakIsRUFBSW9CLFNBQVdBLEVBQ2ZwQixFQUFJcUIsU0FBV0EsRUFDZnJCLEVBQUlzQixrQkFBb0JBLEVBQ3hCdEIsRUFBSXVCLGtCQUFvQkEsRUFDeEJ2QixFQUFJd0IsY0FBZ0JBLEVBQ3BCeEIsRUFBSW9DLFNBQVdYLEVBQWNBLEVBQVlZLGlCQUFjcnFCLEVBRXZELElBQUlzcUIsRUFBcUJoTyxFQUFjLEdBQUlvTixFQUFzQmpDLEVBQWNnQixtQkFBbUJycUIsRUFBTTJwQixJQUV4RyxJQUFLLElBQUlILEtBQVUwQyxFQUNqQnRDLEVBQUlKLEdBQVUwQyxFQUFtQjFDLEdBRy9CbUIsR0FDRkEsRUFBT0YsY0FBY2IsR0FHbkJua0IsRUFBUThsQixJQUNWOWxCLEVBQVE4bEIsR0FBUWx0QixLQUFLc3JCLEVBQVVDLElBSW5DLElBQUlILEVBQWMsU0FBcUJDLEVBQVdDLEdBQ2hELElBQUllLEVBQU96TSxVQUFVbmMsT0FBUyxRQUFzQkYsSUFBakJxYyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssR0FDM0VtTixFQUFnQlYsRUFBS2QsSUFDckJ6bUIsRUFBT29iLEVBQXlCbU0sRUFBTSxDQUFDLFFBRTNDckIsRUFBY0ksWUFBWS9mLEtBQUtrYSxHQUEvQnlGLENBQXlDSyxFQUFXQyxFQUFVekwsRUFBYyxDQUMxRWlPLE9BQVFBLEVBQ1JDLFNBQVVBLEVBQ1ZDLFFBQVNBLEVBQ1QxQixPQUFRQSxFQUNSMkIsT0FBUUEsR0FDUkMsV0FBWUEsR0FDWjFCLFFBQVNBLEdBQ1QyQixZQUFhQSxHQUNiQyxZQUFhQyxHQUNickIsWUFBYUEsR0FDYnNCLGVBQWdCL0ksR0FBU3BrQixPQUN6QjRyQixjQUFlQSxFQUNmSixTQUFVQSxHQUNWRSxrQkFBbUJBLEdBQ25CRCxTQUFVQSxHQUNWRSxrQkFBbUJBLEdBQ25CeUIsbUJBQW9CQyxHQUNwQkMscUJBQXNCQyxHQUN0QkMsZUFBZ0IsV0FDZFIsSUFBYyxHQUVoQlMsY0FBZSxXQUNiVCxJQUFjLEdBRWhCVSxzQkFBdUIsU0FBK0JsdEIsR0FDcERtdEIsRUFBZSxDQUNieEQsU0FBVUEsRUFDVjNwQixLQUFNQSxFQUNOb3JCLGNBQWVBLE1BR2xCam9CLEtBR0wsU0FBU2dxQixFQUFlcGpCLEdBQ3RCMGdCLEVBQWN2TSxFQUFjLENBQzFCbU4sWUFBYUEsR0FDYlIsUUFBU0EsR0FDVEQsU0FBVXVCLEVBQ1Z4QixPQUFRQSxFQUNSSyxTQUFVQSxHQUNWRSxrQkFBbUJBLEdBQ25CRCxTQUFVQSxHQUNWRSxrQkFBbUJBLElBQ2xCcGhCLElBR0wsSUFBSW9pQixFQUNBQyxFQUNBQyxFQUNBMUIsRUFDQTJCLEdBQ0FDLEdBQ0ExQixHQUNBMkIsR0FDQXhCLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FpQyxHQUNBL0IsR0FJQWdDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBQ0FoQixHQUNBaUIsR0FDQUMsR0FHQUMsR0FFSkMsR0FoQklDLElBQXNCLEVBQ3RCQyxJQUFrQixFQUNsQkMsR0FBWSxHQVVaQyxJQUF3QixFQUN4QkMsSUFBeUIsRUFJekJDLEdBQW1DLEdBRXZDQyxJQUFVLEVBQ05DLEdBQW9CLEdBR3BCQyxHQUFxQyxvQkFBYnhwQixTQUN4QnlwQixHQUEwQnBQLEVBQzFCcVAsR0FBbUJ4UCxHQUFRRCxFQUFhLFdBQWEsUUFFekQwUCxHQUFtQkgsS0FBbUJsUCxJQUFxQkQsR0FBTyxjQUFlcmEsU0FBU0MsY0FBYyxPQUNwRzJwQixHQUEwQixXQUM1QixHQUFLSixHQUFMLENBRUEsR0FBSXZQLEVBQ0YsT0FBTyxFQUdULElBQUlVLEVBQUszYSxTQUFTQyxjQUFjLEtBRWhDLE9BREEwYSxFQUFHbFYsTUFBTUUsUUFBVSxzQkFDZSxTQUEzQmdWLEVBQUdsVixNQUFNb2tCLGVBVFksR0FXMUJDLEdBQW1CLFNBQTBCblAsRUFBSWphLEdBQ25ELElBQUlxcEIsRUFBUXZrQixFQUFJbVYsR0FDWnFQLEVBQVVqTSxTQUFTZ00sRUFBTW5WLE9BQVNtSixTQUFTZ00sRUFBTUUsYUFBZWxNLFNBQVNnTSxFQUFNRyxjQUFnQm5NLFNBQVNnTSxFQUFNSSxpQkFBbUJwTSxTQUFTZ00sRUFBTUssa0JBQ2hKQyxFQUFTNUwsRUFBUzlELEVBQUksRUFBR2phLEdBQ3pCNHBCLEVBQVM3TCxFQUFTOUQsRUFBSSxFQUFHamEsR0FDekI2cEIsRUFBZ0JGLEdBQVU3a0IsRUFBSTZrQixHQUM5QkcsRUFBaUJGLEdBQVU5a0IsRUFBSThrQixHQUMvQkcsRUFBa0JGLEdBQWlCeE0sU0FBU3dNLEVBQWNHLFlBQWMzTSxTQUFTd00sRUFBY0ksYUFBZTNOLEVBQVFxTixHQUFRelYsTUFDOUhnVyxFQUFtQkosR0FBa0J6TSxTQUFTeU0sRUFBZUUsWUFBYzNNLFNBQVN5TSxFQUFlRyxhQUFlM04sRUFBUXNOLEdBQVExVixNQUV0SSxHQUFzQixTQUFsQm1WLEVBQU1uTCxRQUNSLE1BQStCLFdBQXhCbUwsRUFBTWMsZUFBc0QsbUJBQXhCZCxFQUFNYyxjQUFxQyxXQUFhLGFBR3JHLEdBQXNCLFNBQWxCZCxFQUFNbkwsUUFDUixPQUFPbUwsRUFBTWUsb0JBQW9CbmhCLE1BQU0sS0FBSzVNLFFBQVUsRUFBSSxXQUFhLGFBR3pFLEdBQUlzdEIsR0FBVUUsRUFBcUIsT0FBZ0MsU0FBM0JBLEVBQXFCLE1BQWMsQ0FDekUsSUFBSVEsRUFBZ0QsU0FBM0JSLEVBQXFCLE1BQWUsT0FBUyxRQUN0RSxPQUFPRCxHQUFvQyxTQUF6QkUsRUFBZTNoQixPQUFvQjJoQixFQUFlM2hCLFFBQVVraUIsRUFBbUMsYUFBYixXQUd0RyxPQUFPVixJQUFxQyxVQUExQkUsRUFBYzNMLFNBQWlELFNBQTFCMkwsRUFBYzNMLFNBQWdELFVBQTFCMkwsRUFBYzNMLFNBQWlELFNBQTFCMkwsRUFBYzNMLFNBQXNCNkwsR0FBbUJULEdBQXVDLFNBQTVCRCxFQUFNTCxLQUFnQ1ksR0FBc0MsU0FBNUJQLEVBQU1MLEtBQWdDZSxFQUFrQkcsRUFBbUJaLEdBQVcsV0FBYSxjQWlDblZnQixHQUFnQixTQUF1QnRxQixHQUN6QyxTQUFTdXFCLEVBQUszdkIsRUFBTzR2QixHQUNuQixPQUFPLFNBQVVuRSxFQUFJQyxFQUFNSSxFQUFRdkMsR0FDakMsSUFBSXNHLEVBQVlwRSxFQUFHcm1CLFFBQVEwcUIsTUFBTW53QixNQUFRK3JCLEVBQUt0bUIsUUFBUTBxQixNQUFNbndCLE1BQVE4ckIsRUFBR3JtQixRQUFRMHFCLE1BQU1ud0IsT0FBUytyQixFQUFLdG1CLFFBQVEwcUIsTUFBTW53QixLQUVqSCxHQUFhLE1BQVRLLElBQWtCNHZCLEdBQVFDLEdBRzVCLE9BQU8sRUFDRixHQUFhLE1BQVQ3dkIsSUFBMkIsSUFBVkEsRUFDMUIsT0FBTyxFQUNGLEdBQUk0dkIsR0FBa0IsVUFBVjV2QixFQUNqQixPQUFPQSxFQUNGLEdBQXFCLG1CQUFWQSxFQUNoQixPQUFPMnZCLEVBQUszdkIsRUFBTXlyQixFQUFJQyxFQUFNSSxFQUFRdkMsR0FBTXFHLEVBQW5DRCxDQUF5Q2xFLEVBQUlDLEVBQU1JLEVBQVF2QyxHQUVsRSxJQUFJd0csR0FBY0gsRUFBT25FLEVBQUtDLEdBQU10bUIsUUFBUTBxQixNQUFNbndCLEtBQ2xELE9BQWlCLElBQVZLLEdBQW1DLGlCQUFWQSxHQUFzQkEsSUFBVSt2QixHQUFjL3ZCLEVBQU0rRyxNQUFRL0csRUFBTVgsUUFBUTB3QixJQUFlLEdBSy9ILElBQUlELEVBQVEsR0FDUkUsRUFBZ0I1cUIsRUFBUTBxQixNQUV2QkUsR0FBMkMsVUFBMUIzUyxFQUFRMlMsS0FDNUJBLEVBQWdCLENBQ2Ryd0IsS0FBTXF3QixJQUlWRixFQUFNbndCLEtBQU9xd0IsRUFBY3J3QixLQUMzQm13QixFQUFNRyxVQUFZTixFQUFLSyxFQUFjSixNQUFNLEdBQzNDRSxFQUFNSSxTQUFXUCxFQUFLSyxFQUFjRyxLQUNwQ0wsRUFBTU0sWUFBY0osRUFBY0ksWUFDbENockIsRUFBUTBxQixNQUFRQSxHQUVkdEQsR0FBc0IsWUFDbkI4QixJQUEyQnRDLEdBQzlCOWhCLEVBQUk4aEIsRUFBUyxVQUFXLFNBR3hCVSxHQUF3QixZQUNyQjRCLElBQTJCdEMsR0FDOUI5aEIsRUFBSThoQixFQUFTLFVBQVcsS0FLeEJrQyxJQUNGeHBCLFNBQVN3RyxpQkFBaUIsU0FBUyxTQUFVcWUsR0FDM0MsR0FBSW9FLEdBS0YsT0FKQXBFLEVBQUk4RyxpQkFDSjlHLEVBQUkrRyxpQkFBbUIvRyxFQUFJK0csa0JBQzNCL0csRUFBSTVPLDBCQUE0QjRPLEVBQUk1TywyQkFDcENnVCxJQUFrQixHQUNYLEtBRVIsR0FHTCxJQUFJNEMsR0FBZ0MsU0FBdUNoSCxHQUN6RSxHQUFJdUMsRUFBUSxDQUNWdkMsRUFBTUEsRUFBSWlILFFBQVVqSCxFQUFJaUgsUUFBUSxHQUFLakgsRUFFckMsSUFBSWtILEdBaEYyRC9LLEVBZ0ZyQjZELEVBQUltSCxRQWhGb0IvSyxFQWdGWDRELEVBQUlvSCxRQTlFN0QvQyxHQUFVZ0QsTUFBSyxTQUFVdEgsR0FDdkIsSUFBSTNGLEVBQVUyRixHQUFkLENBQ0EsSUFBSTdDLEVBQU8vRSxFQUFRNEgsR0FDZnVILEVBQVl2SCxFQUFTcEQsR0FBUzlnQixRQUFRMHJCLHFCQUN0Q0MsRUFBcUJyTCxHQUFLZSxFQUFLdkUsS0FBTzJPLEdBQWFuTCxHQUFLZSxFQUFLckUsTUFBUXlPLEVBQ3JFRyxFQUFtQnJMLEdBQUtjLEVBQUt4RSxJQUFNNE8sR0FBYWxMLEdBQUtjLEVBQUt0RSxPQUFTME8sRUFFdkUsT0FBSUEsR0FBYUUsR0FBc0JDLEVBQzlCQyxFQUFNM0gsT0FEZixNQUlLMkgsR0FxRUwsR0FBSVIsRUFBUyxDQUVYLElBQUkvWCxFQUFRLEdBRVosSUFBSyxJQUFJbFgsS0FBSytuQixFQUNSQSxFQUFJeHJCLGVBQWV5RCxLQUNyQmtYLEVBQU1sWCxHQUFLK25CLEVBQUkvbkIsSUFJbkJrWCxFQUFNN0YsT0FBUzZGLEVBQU00UixPQUFTbUcsRUFDOUIvWCxFQUFNMlgsb0JBQWlCLEVBQ3ZCM1gsRUFBTTRYLHFCQUFrQixFQUV4QkcsRUFBUXZLLEdBQVNnTCxZQUFZeFksSUFoR0wsSUFBcUNnTixFQUFHQyxFQUNoRXNMLEdBb0dGRSxHQUF3QixTQUErQjVILEdBQ3JEdUMsR0FDRkEsRUFBT3ZXLFdBQVcyUSxHQUFTa0wsaUJBQWlCN0gsRUFBSTFXLFNBVXBELFNBQVMwUSxHQUFTbEUsRUFBSWphLEdBQ3BCLElBQU1pYSxJQUFNQSxFQUFHUyxVQUE0QixJQUFoQlQsRUFBR1MsU0FDNUIsS0FBTSw4Q0FBOEMxWixPQUFPLEdBQUdrRixTQUFTdE4sS0FBS3FoQixJQUc5RXBkLEtBQUtvZCxHQUFLQSxFQUVWcGQsS0FBS21ELFFBQVVBLEVBQVVzWSxFQUFTLEdBQUl0WSxHQUV0Q2lhLEVBQUc2RyxHQUFXamtCLEtBQ2QsSUFBSTZtQixFQUFXLENBQ2JnSCxNQUFPLEtBQ1B1QixNQUFNLEVBQ05DLFVBQVUsRUFDVkMsTUFBTyxLQUNQQyxPQUFRLEtBQ1I5TixVQUFXLFdBQVd4WCxLQUFLbVQsRUFBRzBFLFVBQVksTUFBUSxLQUNsRDBOLGNBQWUsRUFFZkMsWUFBWSxFQUVaQyxzQkFBdUIsS0FFdkJDLG1CQUFtQixFQUNuQkMsVUFBVyxXQUNULE9BQU9yRCxHQUFpQm5QLEVBQUlwZCxLQUFLbUQsVUFFbkMwc0IsV0FBWSxpQkFDWkMsWUFBYSxrQkFDYkMsVUFBVyxnQkFDWEMsT0FBUSxTQUNSMWQsT0FBUSxLQUNSMmQsaUJBQWlCLEVBQ2pCMUwsVUFBVyxFQUNYbUMsT0FBUSxLQUNSd0osUUFBUyxTQUFpQkMsRUFBY3RHLEdBQ3RDc0csRUFBYUQsUUFBUSxPQUFRckcsRUFBT3VHLGNBRXRDQyxZQUFZLEVBQ1pDLGdCQUFnQixFQUNoQkMsV0FBWSxVQUNaQyxNQUFPLEVBQ1BDLGtCQUFrQixFQUNsQkMscUJBQXNCMUwsT0FBT3hFLFNBQVd3RSxPQUFTMXBCLFFBQVFrbEIsU0FBU2xsQixPQUFPcTFCLGlCQUFrQixLQUFPLEVBQ2xHQyxlQUFlLEVBQ2ZDLGNBQWUsb0JBQ2ZDLGdCQUFnQixFQUNoQkMsa0JBQW1CLEVBQ25CQyxlQUFnQixDQUNkdk4sRUFBRyxFQUNIQyxFQUFHLEdBRUx1TixnQkFBNEMsSUFBNUIzUCxHQUFTMlAsZ0JBQTRCLGlCQUFrQjMxQixPQUN2RXV6QixxQkFBc0IsR0FJeEIsSUFBSyxJQUFJbnhCLEtBRlRxcEIsRUFBY1ksa0JBQWtCM25CLEtBQU1vZCxFQUFJeUosR0FFekJBLElBQ2JucEIsS0FBUXlGLEtBQWFBLEVBQVF6RixHQUFRbXBCLEVBQVNucEIsSUFNbEQsSUFBSyxJQUFJWCxLQUhUMHdCLEdBQWN0cUIsR0FHQ25ELEtBQ1EsTUFBakJqRCxFQUFHZ1IsT0FBTyxJQUFrQyxtQkFBYi9OLEtBQUtqRCxLQUN0Q2lELEtBQUtqRCxHQUFNaUQsS0FBS2pELEdBQUlxSyxLQUFLcEgsT0FLN0JBLEtBQUtreEIsaUJBQWtCL3RCLEVBQVF5dEIsZUFBd0J4RSxHQUVuRHBzQixLQUFLa3hCLGtCQUVQbHhCLEtBQUttRCxRQUFRdXRCLG9CQUFzQixHQUlqQ3Z0QixFQUFROHRCLGVBQ1Y5VCxFQUFHQyxFQUFJLGNBQWVwZCxLQUFLbXhCLGNBRTNCaFUsRUFBR0MsRUFBSSxZQUFhcGQsS0FBS214QixhQUN6QmhVLEVBQUdDLEVBQUksYUFBY3BkLEtBQUtteEIsY0FHeEJueEIsS0FBS2t4QixrQkFDUC9ULEVBQUdDLEVBQUksV0FBWXBkLE1BQ25CbWQsRUFBR0MsRUFBSSxZQUFhcGQsT0FHdEIyckIsR0FBVXR1QixLQUFLMkMsS0FBS29kLElBRXBCamEsRUFBUW1zQixPQUFTbnNCLEVBQVFtc0IsTUFBTXp4QixLQUFPbUMsS0FBS292QixLQUFLanNCLEVBQVFtc0IsTUFBTXp4QixJQUFJbUMsT0FBUyxJQUUzRXliLEVBQVN6YixLQUFNbWtCLEtBK3BDakIsU0FBU2lOLEdBQVEzSSxFQUFRRCxFQUFNcUIsRUFBUXdILEVBQVUvSSxFQUFVZ0osRUFBWXhJLEVBQWV5SSxHQUNwRixJQUFJakssRUFHQWtLLEVBRkFuSyxFQUFXb0IsRUFBT3hFLEdBQ2xCd04sRUFBV3BLLEVBQVNsa0IsUUFBUXV1QixPQTJCaEMsT0F4QklwMkIsT0FBTzZ0QixhQUFnQnpNLEdBQWVDLEdBTXhDMkssRUFBTTdrQixTQUFTMm1CLFlBQVksVUFDdkJDLFVBQVUsUUFBUSxHQUFNLEdBTjVCL0IsRUFBTSxJQUFJNkIsWUFBWSxPQUFRLENBQzVCRyxTQUFTLEVBQ1RDLFlBQVksSUFPaEJqQyxFQUFJa0MsR0FBS2hCLEVBQ1RsQixFQUFJbUMsS0FBT2hCLEVBQ1huQixFQUFJOUYsUUFBVXFJLEVBQ2R2QyxFQUFJcUssWUFBY04sRUFDbEIvSixFQUFJc0ssUUFBVXRKLEdBQVlFLEVBQzFCbEIsRUFBSXVLLFlBQWNQLEdBQWM3UixFQUFRK0ksR0FDeENsQixFQUFJaUssZ0JBQWtCQSxFQUN0QmpLLEVBQUl3QixjQUFnQkEsRUFDcEJMLEVBQU9OLGNBQWNiLEdBRWpCbUssSUFDRkQsRUFBU0MsRUFBUzExQixLQUFLc3JCLEVBQVVDLEVBQUt3QixJQUdqQzBJLEVBR1QsU0FBU00sR0FBa0IxVSxHQUN6QkEsRUFBR3FFLFdBQVksRUFHakIsU0FBU3NRLEtBQ1BoRyxJQUFVLEVBNkVaLFNBQVNpRyxHQUFZNVUsR0FLbkIsSUFKQSxJQUFJNlUsRUFBTTdVLEVBQUdnQyxRQUFVaEMsRUFBRzdFLFVBQVk2RSxFQUFHeGEsSUFBTXdhLEVBQUc4VSxLQUFPOVUsRUFBR2dULFlBQ3hEN3dCLEVBQUkweUIsRUFBSXp5QixPQUNSMnlCLEVBQU0sRUFFSDV5QixLQUNMNHlCLEdBQU9GLEVBQUlHLFdBQVc3eUIsR0FHeEIsT0FBTzR5QixFQUFJOW9CLFNBQVMsSUFjdEIsU0FBU2dwQixHQUFVdDFCLEdBQ2pCLE9BQU8rWixXQUFXL1osRUFBSSxHQUd4QixTQUFTdTFCLEdBQWdCcHhCLEdBQ3ZCLE9BQU9pa0IsYUFBYWprQixHQTN5Q3RCb2dCLEdBQVN6bEIsVUFFVCxDQUNFeWYsWUFBYWdHLEdBQ2I2TixpQkFBa0IsU0FBMEJ2ZSxHQUNyQzVRLEtBQUtvZCxHQUFHeEUsU0FBU2hJLElBQVdBLElBQVc1USxLQUFLb2QsS0FDL0NpTyxHQUFhLE9BR2pCa0gsY0FBZSxTQUF1QmpMLEVBQUsxVyxHQUN6QyxNQUF5QyxtQkFBM0I1USxLQUFLbUQsUUFBUXlzQixVQUEyQjV2QixLQUFLbUQsUUFBUXlzQixVQUFVN3pCLEtBQUtpRSxLQUFNc25CLEVBQUsxVyxFQUFRaVosR0FBVTdwQixLQUFLbUQsUUFBUXlzQixXQUU5SHVCLFlBQWEsU0FFYjdKLEdBQ0UsR0FBS0EsRUFBSWlDLFdBQVQsQ0FFQSxJQUFJaEcsRUFBUXZqQixLQUNSb2QsRUFBS3BkLEtBQUtvZCxHQUNWamEsRUFBVW5ELEtBQUttRCxRQUNmOHNCLEVBQWtCOXNCLEVBQVE4c0IsZ0JBQzFCanNCLEVBQU9zakIsRUFBSXRqQixLQUNYd3VCLEVBQVFsTCxFQUFJaUgsU0FBV2pILEVBQUlpSCxRQUFRLElBQU1qSCxFQUFJbUwsYUFBbUMsVUFBcEJuTCxFQUFJbUwsYUFBMkJuTCxFQUMzRjFXLEdBQVU0aEIsR0FBU2xMLEdBQUsxVyxPQUN4QjhoQixFQUFpQnBMLEVBQUkxVyxPQUFPK2hCLGFBQWVyTCxFQUFJc0wsTUFBUXRMLEVBQUlzTCxLQUFLLElBQU10TCxFQUFJdUwsY0FBZ0J2TCxFQUFJdUwsZUFBZSxLQUFPamlCLEVBQ3BIMEIsRUFBU25QLEVBQVFtUCxPQUtyQixHQTZ2Q0osU0FBZ0N3Z0IsR0FDOUI5RyxHQUFrQnhzQixPQUFTLEVBQzNCLElBQUl1ekIsRUFBU0QsRUFBS3pULHFCQUFxQixTQUNuQ3hmLEVBQU1rekIsRUFBT3Z6QixPQUVqQixLQUFPSyxLQUFPLENBQ1osSUFBSXVkLEVBQUsyVixFQUFPbHpCLEdBQ2hCdWQsRUFBRzRWLFNBQVdoSCxHQUFrQjN1QixLQUFLK2YsSUF2d0NyQzZWLENBQXVCN1YsSUFHbkJ5TSxLQUlBLHdCQUF3QjVmLEtBQUtqRyxJQUF3QixJQUFmc2pCLEVBQUk0TCxRQUFnQi92QixFQUFRa3NCLFVBS2xFcUQsRUFBZVMsb0JBSW5CdmlCLEVBQVNrTixFQUFRbE4sRUFBUXpOLEVBQVFzZSxVQUFXckUsR0FBSSxLQUVsQ3hNLEVBQU8rVixVQUlqQnNELEtBQWVyWixHQUFuQixDQVNBLEdBSEE4WCxHQUFXaGQsRUFBTWtGLEdBQ2pCZ1ksR0FBb0JsZCxFQUFNa0YsRUFBUXpOLEVBQVFzZSxXQUVwQixtQkFBWG5QLEdBQ1QsR0FBSUEsRUFBT3ZXLEtBQUtpRSxLQUFNc25CLEVBQUsxVyxFQUFRNVEsTUFjakMsT0FiQTZxQixFQUFlLENBQ2J4RCxTQUFVOUQsRUFDVjhFLE9BQVFxSyxFQUNSaDFCLEtBQU0sU0FDTjRxQixTQUFVMVgsRUFDVjRYLEtBQU1wTCxFQUNOcUwsT0FBUXJMLElBR1YrSixFQUFZLFNBQVU1RCxFQUFPLENBQzNCK0QsSUFBS0EsU0FFUDJJLEdBQW1CM0ksRUFBSWlDLFlBQWNqQyxFQUFJOEcsdUJBR3RDLEdBQUk5YixJQUNUQSxFQUFTQSxFQUFPbEcsTUFBTSxLQUFLdWlCLE1BQUssU0FBVXlFLEdBR3hDLEdBRkFBLEVBQVd0VixFQUFRNFUsRUFBZ0JVLEVBQVN6cUIsT0FBUXlVLEdBQUksR0FldEQsT0FaQXlOLEVBQWUsQ0FDYnhELFNBQVU5RCxFQUNWOEUsT0FBUStLLEVBQ1IxMUIsS0FBTSxTQUNONHFCLFNBQVUxWCxFQUNWNlgsT0FBUXJMLEVBQ1JvTCxLQUFNcEwsSUFHUitKLEVBQVksU0FBVTVELEVBQU8sQ0FDM0IrRCxJQUFLQSxLQUVBLE1BTVQsWUFEQTJJLEdBQW1CM0ksRUFBSWlDLFlBQWNqQyxFQUFJOEcsa0JBS3pDanJCLEVBQVFvc0IsU0FBV3pSLEVBQVE0VSxFQUFnQnZ2QixFQUFRb3NCLE9BQVFuUyxHQUFJLElBS25FcGQsS0FBS3F6QixrQkFBa0IvTCxFQUFLa0wsRUFBTzVoQixNQUVyQ3lpQixrQkFBbUIsU0FFbkIvTCxFQUVBa0wsRUFFQTVoQixHQUNFLElBSUkwaUIsRUFKQS9QLEVBQVF2akIsS0FDUm9kLEVBQUttRyxFQUFNbkcsR0FDWGphLEVBQVVvZ0IsRUFBTXBnQixRQUNoQm93QixFQUFnQm5XLEVBQUdtVyxjQUd2QixHQUFJM2lCLElBQVdpWixHQUFValosRUFBTzBDLGFBQWU4SixFQUFJLENBQ2pELElBQUlpVSxFQUFXNVIsRUFBUTdPLEdBd0V2QixHQXZFQXlYLEVBQVNqTCxFQUVUME0sR0FEQUQsRUFBU2paLEdBQ1MwQyxXQUNsQjBXLEdBQVNILEVBQU8ySixZQUNoQnZKLEdBQWFyWixFQUNia2EsR0FBYzNuQixFQUFRMHFCLE1BQ3RCdk0sR0FBU0UsUUFBVXFJLEVBQ25Ca0IsR0FBUyxDQUNQbmEsT0FBUWlaLEVBQ1I0RSxTQUFVK0QsR0FBU2xMLEdBQUttSCxRQUN4QkMsU0FBVThELEdBQVNsTCxHQUFLb0gsU0FFMUJ2RCxHQUFrQkosR0FBTzBELFFBQVU0QyxFQUFTcFIsS0FDNUNtTCxHQUFpQkwsR0FBTzJELFFBQVUyQyxFQUFTclIsSUFDM0NoZ0IsS0FBS3l6QixRQUFVakIsR0FBU2xMLEdBQUttSCxRQUM3Qnp1QixLQUFLMHpCLFFBQVVsQixHQUFTbEwsR0FBS29ILFFBQzdCN0UsRUFBTzNoQixNQUFNLGVBQWlCLE1BRTlCb3JCLEVBQWMsV0FDWm5NLEVBQVksYUFBYzVELEVBQU8sQ0FDL0IrRCxJQUFLQSxJQUdIaEcsR0FBU2lHLGNBQ1hoRSxFQUFNb1EsV0FPUnBRLEVBQU1xUSw2QkFFRGhYLEdBQVcyRyxFQUFNMk4sa0JBQ3BCckgsRUFBT3BJLFdBQVksR0FJckI4QixFQUFNc1Esa0JBQWtCdk0sRUFBS2tMLEdBRzdCM0gsRUFBZSxDQUNieEQsU0FBVTlELEVBQ1Y3bEIsS0FBTSxTQUNOb3JCLGNBQWV4QixJQUlqQm5KLEVBQVkwTCxFQUFRMW1CLEVBQVEyc0IsYUFBYSxLQUkzQzNzQixFQUFRNnNCLE9BQU81akIsTUFBTSxLQUFLM0csU0FBUSxTQUFVMnRCLEdBQzFDalUsRUFBSzBLLEVBQVF1SixFQUFTenFCLE9BQVFtcEIsT0FFaEMzVSxFQUFHb1csRUFBZSxXQUFZakYsSUFDOUJuUixFQUFHb1csRUFBZSxZQUFhakYsSUFDL0JuUixFQUFHb1csRUFBZSxZQUFhakYsSUFDL0JuUixFQUFHb1csRUFBZSxVQUFXaFEsRUFBTW9RLFNBQ25DeFcsRUFBR29XLEVBQWUsV0FBWWhRLEVBQU1vUSxTQUNwQ3hXLEVBQUdvVyxFQUFlLGNBQWVoUSxFQUFNb1EsU0FFbkMvVyxHQUFXNWMsS0FBS2t4QixrQkFDbEJseEIsS0FBS21ELFFBQVF1dEIsb0JBQXNCLEVBQ25DN0csRUFBT3BJLFdBQVksR0FHckIwRixFQUFZLGFBQWNubkIsS0FBTSxDQUM5QnNuQixJQUFLQSxLQUdIbmtCLEVBQVFxdEIsT0FBV3J0QixFQUFRc3RCLG1CQUFvQitCLEdBQVl4eUIsS0FBS2t4QixrQkFBcUJ2VSxHQUFRRCxHQWtCL0Y0VyxRQWxCNkcsQ0FDN0csR0FBSWhTLEdBQVNpRyxjQUdYLFlBRkF2bkIsS0FBSzJ6QixVQVFQeFcsRUFBR29XLEVBQWUsVUFBV2hRLEVBQU11USxxQkFDbkMzVyxFQUFHb1csRUFBZSxXQUFZaFEsRUFBTXVRLHFCQUNwQzNXLEVBQUdvVyxFQUFlLGNBQWVoUSxFQUFNdVEscUJBQ3ZDM1csRUFBR29XLEVBQWUsWUFBYWhRLEVBQU13USw4QkFDckM1VyxFQUFHb1csRUFBZSxZQUFhaFEsRUFBTXdRLDhCQUNyQzV3QixFQUFROHRCLGdCQUFrQjlULEVBQUdvVyxFQUFlLGNBQWVoUSxFQUFNd1EsOEJBQ2pFeFEsRUFBTXlRLGdCQUFrQmxkLFdBQVd3YyxFQUFhbndCLEVBQVFxdEIsVUFNOUR1RCw2QkFBOEIsU0FFOUI5MUIsR0FDRSxJQUFJdTBCLEVBQVF2MEIsRUFBRXN3QixRQUFVdHdCLEVBQUVzd0IsUUFBUSxHQUFLdHdCLEVBRW5DcVosS0FBSzBPLElBQUkxTyxLQUFLMmMsSUFBSXpCLEVBQU0vRCxRQUFVenVCLEtBQUt5ekIsUUFBU25jLEtBQUsyYyxJQUFJekIsRUFBTTlELFFBQVUxdUIsS0FBSzB6QixVQUFZcGMsS0FBS0MsTUFBTXZYLEtBQUttRCxRQUFRdXRCLHFCQUF1QjF3QixLQUFLa3hCLGlCQUFtQjUxQixPQUFPcTFCLGtCQUFvQixLQUM5TDN3QixLQUFLOHpCLHVCQUdUQSxvQkFBcUIsV0FDbkJqSyxHQUFVaUksR0FBa0JqSSxHQUM1QjFFLGFBQWFubEIsS0FBS2cwQixpQkFFbEJoMEIsS0FBSzR6Qiw2QkFFUEEsMEJBQTJCLFdBQ3pCLElBQUlMLEVBQWdCdnpCLEtBQUtvZCxHQUFHbVcsY0FDNUJsVyxFQUFJa1csRUFBZSxVQUFXdnpCLEtBQUs4ekIscUJBQ25DelcsRUFBSWtXLEVBQWUsV0FBWXZ6QixLQUFLOHpCLHFCQUNwQ3pXLEVBQUlrVyxFQUFlLGNBQWV2ekIsS0FBSzh6QixxQkFDdkN6VyxFQUFJa1csRUFBZSxZQUFhdnpCLEtBQUsrekIsOEJBQ3JDMVcsRUFBSWtXLEVBQWUsWUFBYXZ6QixLQUFLK3pCLDhCQUNyQzFXLEVBQUlrVyxFQUFlLGNBQWV2ekIsS0FBSyt6QiwrQkFFekNGLGtCQUFtQixTQUVuQnZNLEVBRUFrTCxHQUNFQSxFQUFRQSxHQUE0QixTQUFuQmxMLEVBQUltTCxhQUEwQm5MLEdBRTFDdG5CLEtBQUtreEIsaUJBQW1Cc0IsRUFDdkJ4eUIsS0FBS21ELFFBQVE4dEIsZUFDZjlULEVBQUcxYSxTQUFVLGNBQWV6QyxLQUFLazBCLGNBRWpDL1csRUFBRzFhLFNBRE0rdkIsRUFDSSxZQUVBLFlBRmF4eUIsS0FBS2swQixlQUtqQy9XLEVBQUcwTSxFQUFRLFVBQVc3cEIsTUFDdEJtZCxFQUFHa0wsRUFBUSxZQUFhcm9CLEtBQUttMEIsZUFHL0IsSUFDTTF4QixTQUFTMnhCLFVBRVgvQixJQUFVLFdBQ1I1dkIsU0FBUzJ4QixVQUFVQyxXQUdyQi80QixPQUFPZzVCLGVBQWVDLGtCQUV4QixNQUFPajJCLE1BRVhrMkIsYUFBYyxTQUFzQkMsRUFBVW5OLEdBSTVDLEdBRkFtRSxJQUFzQixFQUVsQnBELEdBQVV3QixFQUFRLENBQ3BCMUMsRUFBWSxjQUFlbm5CLEtBQU0sQ0FDL0JzbkIsSUFBS0EsSUFHSHRuQixLQUFLa3hCLGlCQUNQL1QsRUFBRzFhLFNBQVUsV0FBWXlzQixJQUczQixJQUFJL3JCLEVBQVVuRCxLQUFLbUQsU0FFbEJzeEIsR0FBWXRXLEVBQVkwTCxFQUFRMW1CLEVBQVE0c0IsV0FBVyxHQUNwRDVSLEVBQVkwTCxFQUFRMW1CLEVBQVEwc0IsWUFBWSxHQUN4Q3ZPLEdBQVNwa0IsT0FBUzhDLEtBQ2xCeTBCLEdBQVl6MEIsS0FBSzAwQixlQUVqQjdKLEVBQWUsQ0FDYnhELFNBQVVybkIsS0FDVnRDLEtBQU0sUUFDTm9yQixjQUFleEIsU0FHakJ0bkIsS0FBSzIwQixZQUdUQyxpQkFBa0IsV0FDaEIsR0FBSTVKLEdBQVUsQ0FDWmhyQixLQUFLeXpCLE9BQVN6SSxHQUFTeUQsUUFDdkJ6dUIsS0FBSzB6QixPQUFTMUksR0FBUzBELFFBRXZCbkUsS0FLQSxJQUhBLElBQUkzWixFQUFTbk8sU0FBU295QixpQkFBaUI3SixHQUFTeUQsUUFBU3pELEdBQVMwRCxTQUM5RHhxQixFQUFTME0sRUFFTkEsR0FBVUEsRUFBTytoQixhQUN0Qi9oQixFQUFTQSxFQUFPK2hCLFdBQVdrQyxpQkFBaUI3SixHQUFTeUQsUUFBU3pELEdBQVMwRCxZQUN4RHhxQixHQUNmQSxFQUFTME0sRUFLWCxHQUZBaVosRUFBT3ZXLFdBQVcyUSxHQUFTa0wsaUJBQWlCdmUsR0FFeEMxTSxFQUNGLEVBQUcsQ0FDRCxHQUFJQSxFQUFPK2YsR0FBVSxDQVNuQixHQVBXL2YsRUFBTytmLEdBQVNnTCxZQUFZLENBQ3JDUixRQUFTekQsR0FBU3lELFFBQ2xCQyxRQUFTMUQsR0FBUzBELFFBQ2xCOWQsT0FBUUEsRUFDUnlYLE9BQVFua0IsTUFHT2xFLEtBQUttRCxRQUFRbXRCLGVBQzVCLE1BSUoxZixFQUFTMU0sUUFHSkEsRUFBU0EsRUFBT29QLFlBR3pCbVgsT0FHSnlKLGFBQWMsU0FFZDVNLEdBQ0UsR0FBSXlELEdBQVEsQ0FDVixJQUFJNW5CLEVBQVVuRCxLQUFLbUQsUUFDZjR0QixFQUFvQjV0QixFQUFRNHRCLGtCQUM1QkMsRUFBaUI3dEIsRUFBUTZ0QixlQUN6QndCLEVBQVFsTCxFQUFJaUgsUUFBVWpILEVBQUlpSCxRQUFRLEdBQUtqSCxFQUN2Q3dOLEVBQWMvSyxHQUFXckwsRUFBT3FMLEdBQVMsR0FDekNySixFQUFTcUosR0FBVytLLEdBQWVBLEVBQVl6d0IsRUFDL0NzYyxFQUFTb0osR0FBVytLLEdBQWVBLEVBQVlwdUIsRUFDL0NxdUIsRUFBdUI3SSxJQUEyQlYsSUFBdUJ2SixFQUF3QnVKLElBQ2pHd0osR0FBTXhDLEVBQU0vRCxRQUFVMUQsR0FBTzBELFFBQVV1QyxFQUFldk4sSUFBTS9DLEdBQVUsSUFBTXFVLEVBQXVCQSxFQUFxQixHQUFLakosR0FBaUMsR0FBSyxJQUFNcEwsR0FBVSxHQUNuTHVVLEdBQU16QyxFQUFNOUQsUUFBVTNELEdBQU8yRCxRQUFVc0MsRUFBZXROLElBQU0vQyxHQUFVLElBQU1vVSxFQUF1QkEsRUFBcUIsR0FBS2pKLEdBQWlDLEdBQUssSUFBTW5MLEdBQVUsR0FFdkwsSUFBS1csR0FBU3BrQixTQUFXdXVCLEdBQXFCLENBQzVDLEdBQUlzRixHQUFxQnpaLEtBQUswTyxJQUFJMU8sS0FBSzJjLElBQUl6QixFQUFNL0QsUUFBVXp1QixLQUFLeXpCLFFBQVNuYyxLQUFLMmMsSUFBSXpCLEVBQU05RCxRQUFVMXVCLEtBQUswekIsU0FBVzNDLEVBQ2hILE9BR0Yvd0IsS0FBS20wQixhQUFhN00sR0FBSyxHQUd6QixHQUFJeUMsRUFBUyxDQUNQK0ssR0FDRkEsRUFBWTcyQixHQUFLKzJCLEdBQU0vSixJQUFVLEdBQ2pDNkosRUFBWWxRLEdBQUtxUSxHQUFNL0osSUFBVSxJQUVqQzRKLEVBQWMsQ0FDWnp3QixFQUFHLEVBQ0hDLEVBQUcsRUFDSGpDLEVBQUcsRUFDSHFFLEVBQUcsRUFDSHpJLEVBQUcrMkIsRUFDSHBRLEVBQUdxUSxHQUlQLElBQUlDLEVBQVksVUFBVS93QixPQUFPMndCLEVBQVl6d0IsRUFBRyxLQUFLRixPQUFPMndCLEVBQVl4d0IsRUFBRyxLQUFLSCxPQUFPMndCLEVBQVl6eUIsRUFBRyxLQUFLOEIsT0FBTzJ3QixFQUFZcHVCLEVBQUcsS0FBS3ZDLE9BQU8yd0IsRUFBWTcyQixFQUFHLEtBQUtrRyxPQUFPMndCLEVBQVlsUSxFQUFHLEtBQ3ZMM2MsRUFBSThoQixFQUFTLGtCQUFtQm1MLEdBQ2hDanRCLEVBQUk4aEIsRUFBUyxlQUFnQm1MLEdBQzdCanRCLEVBQUk4aEIsRUFBUyxjQUFlbUwsR0FDNUJqdEIsRUFBSThoQixFQUFTLFlBQWFtTCxHQUMxQmpLLEdBQVMrSixFQUNUOUosR0FBUytKLEVBQ1RqSyxHQUFXd0gsRUFHYmxMLEVBQUlpQyxZQUFjakMsRUFBSThHLG1CQUcxQnNHLGFBQWMsV0FHWixJQUFLM0ssRUFBUyxDQUNaLElBQUlsSyxFQUFZN2YsS0FBS21ELFFBQVEydEIsZUFBaUJydUIsU0FBU29HLEtBQU93ZixFQUMxRDdELEVBQU8vRSxFQUFRb0ssR0FBUSxFQUFNcUMsSUFBeUIsRUFBTXJNLEdBQzVEMWMsRUFBVW5ELEtBQUttRCxRQUVuQixHQUFJK29CLEdBQXlCLENBSTNCLElBRkFWLEdBQXNCM0wsRUFFMEIsV0FBekM1WCxFQUFJdWpCLEdBQXFCLGFBQXNFLFNBQTFDdmpCLEVBQUl1akIsR0FBcUIsY0FBMkJBLEtBQXdCL29CLFVBQ3RJK29CLEdBQXNCQSxHQUFvQmxZLFdBR3hDa1ksS0FBd0Ivb0IsU0FBU29HLE1BQVEyaUIsS0FBd0Ivb0IsU0FBUytjLGlCQUN4RWdNLEtBQXdCL29CLFdBQVUrb0IsR0FBc0JsTSxLQUM1RGtGLEVBQUt4RSxLQUFPd0wsR0FBb0JsSixVQUNoQ2tDLEVBQUt2RSxNQUFRdUwsR0FBb0JuSixZQUVqQ21KLEdBQXNCbE0sSUFHeEJ3TSxHQUFtQzdKLEVBQXdCdUosSUFJN0RyTixFQURBNEwsRUFBVUYsRUFBTzdGLFdBQVUsR0FDTjdnQixFQUFRMHNCLFlBQVksR0FDekMxUixFQUFZNEwsRUFBUzVtQixFQUFRMHRCLGVBQWUsR0FDNUMxUyxFQUFZNEwsRUFBUzVtQixFQUFRNHNCLFdBQVcsR0FDeEM5bkIsRUFBSThoQixFQUFTLGFBQWMsSUFDM0I5aEIsRUFBSThoQixFQUFTLFlBQWEsSUFDMUI5aEIsRUFBSThoQixFQUFTLGFBQWMsY0FDM0I5aEIsRUFBSThoQixFQUFTLFNBQVUsR0FDdkI5aEIsRUFBSThoQixFQUFTLE1BQU92RixFQUFLeEUsS0FDekIvWCxFQUFJOGhCLEVBQVMsT0FBUXZGLEVBQUt2RSxNQUMxQmhZLEVBQUk4aEIsRUFBUyxRQUFTdkYsRUFBS25OLE9BQzNCcFAsRUFBSThoQixFQUFTLFNBQVV2RixFQUFLcEUsUUFDNUJuWSxFQUFJOGhCLEVBQVMsVUFBVyxPQUN4QjloQixFQUFJOGhCLEVBQVMsV0FBWW1DLEdBQTBCLFdBQWEsU0FDaEVqa0IsRUFBSThoQixFQUFTLFNBQVUsVUFDdkI5aEIsRUFBSThoQixFQUFTLGdCQUFpQixRQUM5QnpJLEdBQVNDLE1BQVF3SSxFQUNqQmxLLEVBQVUvYyxZQUFZaW5CLEdBRXRCOWhCLEVBQUk4aEIsRUFBUyxtQkFBb0JvQixHQUFrQjNLLFNBQVN1SixFQUFRN2hCLE1BQU1tUCxPQUFTLElBQU0sS0FBTytULEdBQWlCNUssU0FBU3VKLEVBQVE3aEIsTUFBTWtZLFFBQVUsSUFBTSxPQUc1SitULGFBQWMsU0FFZDdNLEVBRUFtTixHQUNFLElBQUlsUixFQUFRdmpCLEtBRVJtd0IsRUFBZTdJLEVBQUk2SSxhQUNuQmh0QixFQUFVb2dCLEVBQU1wZ0IsUUFDcEJna0IsRUFBWSxZQUFhbm5CLEtBQU0sQ0FDN0JzbkIsSUFBS0EsSUFHSGhHLEdBQVNpRyxjQUNYdm5CLEtBQUsyekIsV0FLUHhNLEVBQVksYUFBY25uQixNQUVyQnNoQixHQUFTaUcsaUJBQ1pnQixHQUFVdkcsRUFBTTZILElBQ1JwSSxXQUFZLEVBQ3BCOEcsR0FBUXJnQixNQUFNLGVBQWlCLEdBRS9CbEksS0FBS20xQixhQUVMaFgsRUFBWW9LLEdBQVN2b0IsS0FBS21ELFFBQVEyc0IsYUFBYSxHQUMvQ3hPLEdBQVNVLE1BQVF1RyxJQUluQmhGLEVBQU02UixRQUFVL0MsSUFBVSxXQUN4QmxMLEVBQVksUUFBUzVELEdBQ2pCakMsR0FBU2lHLGdCQUVSaEUsRUFBTXBnQixRQUFRd3NCLG1CQUNqQnRILEVBQU96VixhQUFhMlYsR0FBU3NCLEdBRy9CdEcsRUFBTTRSLGFBRU50SyxFQUFlLENBQ2J4RCxTQUFVOUQsRUFDVjdsQixLQUFNLGVBR1QrMkIsR0FBWXRXLEVBQVkwTCxFQUFRMW1CLEVBQVE0c0IsV0FBVyxHQUVoRDBFLEdBQ0YvSSxJQUFrQixFQUNsQm5JLEVBQU04UixRQUFVQyxZQUFZL1IsRUFBTXFSLGlCQUFrQixNQUdwRHZYLEVBQUk1YSxTQUFVLFVBQVc4Z0IsRUFBTW9RLFNBQy9CdFcsRUFBSTVhLFNBQVUsV0FBWThnQixFQUFNb1EsU0FDaEN0VyxFQUFJNWEsU0FBVSxjQUFlOGdCLEVBQU1vUSxTQUUvQnhELElBQ0ZBLEVBQWFvRixjQUFnQixPQUM3QnB5QixFQUFRK3NCLFNBQVcvc0IsRUFBUStzQixRQUFRbjBCLEtBQUt3bkIsRUFBTzRNLEVBQWN0RyxJQUcvRDFNLEVBQUcxYSxTQUFVLE9BQVE4Z0IsR0FFckJ0YixFQUFJNGhCLEVBQVEsWUFBYSxrQkFHM0I0QixJQUFzQixFQUN0QmxJLEVBQU1pUyxhQUFlbkQsR0FBVTlPLEVBQU1pUixhQUFhcHRCLEtBQUttYyxFQUFPa1IsRUFBVW5OLElBQ3hFbkssRUFBRzFhLFNBQVUsY0FBZThnQixHQUM1QjZHLElBQVEsRUFFSnZOLEdBQ0Y1VSxFQUFJeEYsU0FBU29HLEtBQU0sY0FBZSxVQUl0Q29tQixZQUFhLFNBRWIzSCxHQUNFLElBRUkrSixFQUNBQyxFQUNBbUUsRUFPQUMsRUFYQXRZLEVBQUtwZCxLQUFLb2QsR0FDVnhNLEVBQVMwVyxFQUFJMVcsT0FJYnpOLEVBQVVuRCxLQUFLbUQsUUFDZjBxQixFQUFRMXFCLEVBQVEwcUIsTUFDaEJ4RCxFQUFpQi9JLEdBQVNwa0IsT0FDMUJ5NEIsRUFBVTdLLEtBQWdCK0MsRUFDMUIrSCxFQUFVenlCLEVBQVFpc0IsS0FDbEJ5RyxFQUFlOU0sSUFBZXNCLEVBRTlCOUcsRUFBUXZqQixLQUNSODFCLEdBQWlCLEVBRXJCLElBQUkvSixHQUFKLENBZ0hBLFFBTjJCLElBQXZCekUsRUFBSThHLGdCQUNOOUcsRUFBSWlDLFlBQWNqQyxFQUFJOEcsaUJBR3hCeGQsRUFBU2tOLEVBQVFsTixFQUFRek4sRUFBUXNlLFVBQVdyRSxHQUFJLEdBQ2hEMlksRUFBYyxZQUNWelUsR0FBU2lHLGNBQWUsT0FBT3VPLEVBRW5DLEdBQUlqTSxFQUFPalIsU0FBUzBPLEVBQUkxVyxTQUFXQSxFQUFPK1YsVUFBWS9WLEVBQU8wVixZQUFjMVYsRUFBTzJWLFlBQWNoRCxFQUFNeVMsd0JBQTBCcGxCLEVBQzlILE9BQU9xbEIsR0FBVSxHQUtuQixHQUZBdkssSUFBa0IsRUFFZHJCLElBQW1CbG5CLEVBQVFrc0IsV0FBYXNHLEVBQVVDLElBQVlILEdBQVVwTixFQUFPelAsU0FBU2lSLElBQzFGZCxLQUFnQi9vQixPQUFTQSxLQUFLMnBCLFlBQWNtQixHQUFZa0QsVUFBVWh1QixLQUFNcXFCLEVBQWdCUixFQUFRdkMsS0FBU3VHLEVBQU1JLFNBQVNqdUIsS0FBTXFxQixFQUFnQlIsRUFBUXZDLElBQU8sQ0FJN0osR0FIQW9PLEVBQStDLGFBQXBDMTFCLEtBQUt1eUIsY0FBY2pMLEVBQUsxVyxHQUNuQ3lnQixFQUFXNVIsRUFBUW9LLEdBQ25Ca00sRUFBYyxpQkFDVnpVLEdBQVNpRyxjQUFlLE9BQU91TyxFQUVuQyxHQUFJTCxFQWlCRixPQWhCQTNMLEVBQVd6QixFQUVYcEwsSUFFQWpkLEtBQUttMUIsYUFFTFksRUFBYyxVQUVUelUsR0FBU2lHLGdCQUNSeUMsR0FDRjNCLEVBQU96VixhQUFhaVgsRUFBUUcsSUFFNUIzQixFQUFPdmxCLFlBQVkrbUIsSUFJaEJvTSxHQUFVLEdBR25CLElBQUlDLEVBQWN4VSxFQUFVdEUsRUFBSWphLEVBQVFzZSxXQUV4QyxJQUFLeVUsR0FtaEJYLFNBQXNCNU8sRUFBS29PLEVBQVVyTyxHQUNuQyxJQUFJN0MsRUFBTy9FLEVBQVFpQyxFQUFVMkYsRUFBU2pLLEdBQUlpSyxFQUFTbGtCLFFBQVFzZSxZQUUzRCxPQUFPaVUsRUFBV3BPLEVBQUltSCxRQUFVakssRUFBS3JFLE1BRHhCLElBQzBDbUgsRUFBSW1ILFNBQVdqSyxFQUFLckUsT0FBU21ILEVBQUlvSCxRQUFVbEssRUFBS3RFLFFBQVVvSCxFQUFJbUgsU0FBV2pLLEVBQUt2RSxLQUFPcUgsRUFBSW1ILFFBQVVqSyxFQUFLckUsT0FBU21ILEVBQUlvSCxRQUFVbEssRUFBS3hFLEtBQU9zSCxFQUFJbUgsU0FBV2pLLEVBQUtyRSxPQUFTbUgsRUFBSW9ILFFBQVVsSyxFQUFLdEUsT0FEck8sR0FyaEJXaVcsQ0FBYTdPLEVBQUtvTyxFQUFVMTFCLFFBQVVrMkIsRUFBWXZQLFNBQVUsQ0FFOUUsR0FBSXVQLElBQWdCck0sRUFDbEIsT0FBT29NLEdBQVUsR0FZbkIsR0FSSUMsR0FBZTlZLElBQU9rSyxFQUFJMVcsU0FDNUJBLEVBQVNzbEIsR0FHUHRsQixJQUNGMGdCLEVBQWE3UixFQUFRN08sS0FHMEQsSUFBN0V3Z0IsR0FBUS9JLEVBQVFqTCxFQUFJeU0sRUFBUXdILEVBQVV6Z0IsRUFBUTBnQixFQUFZaEssSUFBTzFXLEdBTW5FLE9BTEFxTSxJQUNBRyxFQUFHdGEsWUFBWSttQixHQUNmQyxFQUFXMU0sRUFFWGdaLElBQ09ILEdBQVUsUUFFZCxHQUFJcmxCLEVBQU8wQyxhQUFlOEosRUFBSSxDQUNuQ2tVLEVBQWE3UixFQUFRN08sR0FDckIsSUFBSWdmLEVBQ0F5RyxFQWNBQyxFQWJBQyxFQUFpQjFNLEVBQU92VyxhQUFlOEosRUFDdkNvWixHQWo3QmEsU0FBNEJuRixFQUFVQyxFQUFZb0UsR0FDekUsSUFBSWUsRUFBY2YsRUFBV3JFLEVBQVNwUixLQUFPb1IsRUFBU3JSLElBQ2xEMFcsRUFBY2hCLEVBQVdyRSxFQUFTbFIsTUFBUWtSLEVBQVNuUixPQUNuRHlXLEVBQWtCakIsRUFBV3JFLEVBQVNoYSxNQUFRZ2EsRUFBU2pSLE9BQ3ZEd1csRUFBY2xCLEVBQVdwRSxFQUFXclIsS0FBT3FSLEVBQVd0UixJQUN0RDZXLEVBQWNuQixFQUFXcEUsRUFBV25SLE1BQVFtUixFQUFXcFIsT0FDdkQ0VyxFQUFrQnBCLEVBQVdwRSxFQUFXamEsTUFBUWlhLEVBQVdsUixPQUMvRCxPQUFPcVcsSUFBZ0JHLEdBQWVGLElBQWdCRyxHQUFlSixFQUFjRSxFQUFrQixJQUFNQyxFQUFjRSxFQUFrQixFQTA2QjlHQyxDQUFtQmxOLEVBQU9sRCxVQUFZa0QsRUFBT3RFLFFBQVU4TCxFQUFVemdCLEVBQU8rVixVQUFZL1YsRUFBTzJVLFFBQVUrTCxFQUFZb0UsR0FDcElzQixFQUFRdEIsRUFBVyxNQUFRLE9BQzNCdUIsRUFBa0JyVyxFQUFlaFEsRUFBUSxNQUFPLFFBQVVnUSxFQUFlaUosRUFBUSxNQUFPLE9BQ3hGcU4sRUFBZUQsRUFBa0JBLEVBQWdCM1UsZUFBWSxFQVdqRSxHQVRJK0ksS0FBZXphLElBQ2pCeWxCLEVBQXdCL0UsRUFBVzBGLEdBQ25DcEwsSUFBd0IsRUFDeEJDLElBQTBCMkssR0FBbUJyekIsRUFBUXNzQixZQUFjOEcsR0FNbkQsS0FIbEIzRyxFQWtmUixTQUEyQnRJLEVBQUsxVyxFQUFRMGdCLEVBQVlvRSxFQUFVbEcsRUFBZUUsRUFBdUJELEVBQVkwSCxHQUM5RyxJQUFJQyxFQUFjMUIsRUFBV3BPLEVBQUlvSCxRQUFVcEgsRUFBSW1ILFFBQzNDNEksRUFBZTNCLEVBQVdwRSxFQUFXbFIsT0FBU2tSLEVBQVdqYSxNQUN6RGlnQixFQUFXNUIsRUFBV3BFLEVBQVd0UixJQUFNc1IsRUFBV3JSLEtBQ2xEc1gsRUFBVzdCLEVBQVdwRSxFQUFXcFIsT0FBU29SLEVBQVduUixNQUNyRHFYLEdBQVMsRUFFYixJQUFLL0gsRUFFSCxHQUFJMEgsR0FBZ0I1TCxHQUFxQjhMLEVBQWU3SCxHQVF0RCxJQUxLNUQsS0FBNEMsSUFBbEJOLEdBQXNCOEwsRUFBY0UsRUFBV0QsRUFBZTNILEVBQXdCLEVBQUkwSCxFQUFjRyxFQUFXRixFQUFlM0gsRUFBd0IsS0FFdkw5RCxJQUF3QixHQUdyQkEsR0FPSDRMLEdBQVMsT0FMVCxHQUFzQixJQUFsQmxNLEdBQXNCOEwsRUFBY0UsRUFBVy9MLEdBQ2pENkwsRUFBY0csRUFBV2hNLEdBQ3pCLE9BQVFELFFBT1osR0FBSThMLEVBQWNFLEVBQVdELEdBQWdCLEVBQUk3SCxHQUFpQixHQUFLNEgsRUFBY0csRUFBV0YsR0FBZ0IsRUFBSTdILEdBQWlCLEVBQ25JLE9Bd0JSLFNBQTZCNWUsR0FDM0IsT0FBSWxGLEVBQU1tZSxHQUFVbmUsRUFBTWtGLEdBQ2pCLEdBRUMsRUE1Qkc2bUIsQ0FBb0I3bUIsR0FPakMsSUFGQTRtQixFQUFTQSxHQUFVL0gsS0FJYjJILEVBQWNFLEVBQVdELEVBQWUzSCxFQUF3QixHQUFLMEgsRUFBY0csRUFBV0YsRUFBZTNILEVBQXdCLEdBQ3ZJLE9BQU8wSCxFQUFjRSxFQUFXRCxFQUFlLEVBQUksR0FBSyxFQUk1RCxPQUFPLEVBN2hCV0ssQ0FBa0JwUSxFQUFLMVcsRUFBUTBnQixFQUFZb0UsRUFBVWMsRUFBa0IsRUFBSXJ6QixFQUFRcXNCLGNBQWdELE1BQWpDcnNCLEVBQVF1c0Isc0JBQWdDdnNCLEVBQVFxc0IsY0FBZ0Jyc0IsRUFBUXVzQixzQkFBdUI3RCxHQUF3QlIsS0FBZXphLElBRy9OLENBRW5CLElBQUkrbUIsRUFBWWpzQixFQUFNbWUsR0FFdEIsR0FDRThOLEdBQWEvSCxFQUNiMEcsRUFBVXhNLEVBQVN4c0IsU0FBU3E2QixTQUNyQnJCLElBQXdDLFNBQTVCcnVCLEVBQUlxdUIsRUFBUyxZQUF5QkEsSUFBWXZNLElBSXpFLEdBQWtCLElBQWQ2RixHQUFtQjBHLElBQVkxbEIsRUFDakMsT0FBT3FsQixHQUFVLEdBR25CNUssR0FBYXphLEVBQ2IwYSxHQUFnQnNFLEVBQ2hCLElBQUk0RCxFQUFjNWlCLEVBQU9nbkIsbUJBQ3JCQyxHQUFRLEVBR1JDLEVBQWExRyxHQUFRL0ksRUFBUWpMLEVBQUl5TSxFQUFRd0gsRUFBVXpnQixFQUFRMGdCLEVBQVloSyxFQUYzRXVRLEVBQXNCLElBQWRqSSxHQUlSLElBQW1CLElBQWZrSSxFQTRCRixPQTNCbUIsSUFBZkEsSUFBb0MsSUFBaEJBLElBQ3RCRCxFQUF1QixJQUFmQyxHQUdWL0wsSUFBVSxFQUNWalYsV0FBV2liLEdBQVcsSUFDdEI5VSxJQUVJNGEsSUFBVXJFLEVBQ1pwVyxFQUFHdGEsWUFBWSttQixHQUVmalosRUFBTzBDLFdBQVdWLGFBQWFpWCxFQUFRZ08sRUFBUXJFLEVBQWM1aUIsR0FJM0RxbUIsR0FDRnpULEVBQVN5VCxFQUFpQixFQUFHQyxFQUFlRCxFQUFnQjNVLFdBRzlEd0gsRUFBV0QsRUFBT3ZXLGdCQUdZaFUsSUFBMUIrMkIsR0FBd0N4SyxLQUMxQ04sR0FBcUJqVSxLQUFLMmMsSUFBSW9DLEVBQXdCNVcsRUFBUTdPLEdBQVFvbUIsS0FHeEVaLElBQ09ILEdBQVUsR0FJckIsR0FBSTdZLEVBQUd4RSxTQUFTaVIsR0FDZCxPQUFPb00sR0FBVSxHQUlyQixPQUFPLEVBelBQLFNBQVNGLEVBQWNyNEIsRUFBTXE2QixHQUMzQjVRLEVBQVl6cEIsRUFBTTZsQixFQUFPM0gsRUFBYyxDQUNyQzBMLElBQUtBLEVBQ0xxTyxRQUFTQSxFQUNUcUMsS0FBTXRDLEVBQVcsV0FBYSxhQUM5QkQsT0FBUUEsRUFDUnBFLFNBQVVBLEVBQ1ZDLFdBQVlBLEVBQ1pzRSxRQUFTQSxFQUNUQyxhQUFjQSxFQUNkamxCLE9BQVFBLEVBQ1JxbEIsVUFBV0EsRUFDWHZFLE9BQVEsU0FBZ0I5Z0IsRUFBUWluQixHQUM5QixPQUFPekcsR0FBUS9JLEVBQVFqTCxFQUFJeU0sRUFBUXdILEVBQVV6Z0IsRUFBUTZPLEVBQVE3TyxHQUFTMFcsRUFBS3VRLElBRTdFekIsUUFBU0EsR0FDUjJCLElBSUwsU0FBUzlhLElBQ1A4WSxFQUFjLDRCQUVkeFMsRUFBTWUsd0JBRUZmLElBQVVzUyxHQUNaQSxFQUFhdlIsd0JBS2pCLFNBQVMyUixFQUFVZ0MsR0F1RGpCLE9BdERBbEMsRUFBYyxvQkFBcUIsQ0FDakNrQyxVQUFXQSxJQUdUQSxJQUVFdEMsRUFDRnRMLEVBQWU4SyxhQUVmOUssRUFBZTZOLFdBQVczVSxHQUd4QkEsSUFBVXNTLElBRVoxWCxFQUFZMEwsRUFBUWQsR0FBY0EsR0FBWTVsQixRQUFRMHNCLFdBQWF4RixFQUFlbG5CLFFBQVEwc0IsWUFBWSxHQUN0RzFSLEVBQVkwTCxFQUFRMW1CLEVBQVEwc0IsWUFBWSxJQUd0QzlHLEtBQWdCeEYsR0FBU0EsSUFBVWpDLEdBQVNwa0IsT0FDOUM2ckIsR0FBY3hGLEVBQ0xBLElBQVVqQyxHQUFTcGtCLFFBQVU2ckIsS0FDdENBLEdBQWMsTUFJWjhNLElBQWlCdFMsSUFDbkJBLEVBQU15UyxzQkFBd0JwbEIsR0FHaEMyUyxFQUFNMkIsWUFBVyxXQUNmNlEsRUFBYyw2QkFDZHhTLEVBQU15UyxzQkFBd0IsUUFHNUJ6UyxJQUFVc1MsSUFDWkEsRUFBYTNRLGFBQ2IyUSxFQUFhRyxzQkFBd0IsUUFLckNwbEIsSUFBV2laLElBQVdBLEVBQU9sRCxVQUFZL1YsSUFBV3dNLElBQU94TSxFQUFPK1YsWUFDcEUwRSxHQUFhLE1BSVZsb0IsRUFBUW10QixnQkFBbUJoSixFQUFJZSxRQUFVelgsSUFBV25PLFdBQ3ZEb25CLEVBQU92VyxXQUFXMlEsR0FBU2tMLGlCQUFpQjdILEVBQUkxVyxTQUcvQ3FuQixHQUFhM0osR0FBOEJoSCxLQUc3Q25rQixFQUFRbXRCLGdCQUFrQmhKLEVBQUkrRyxpQkFBbUIvRyxFQUFJK0csa0JBQy9DeUgsR0FBaUIsRUFJMUIsU0FBU00sSUFDUHpOLEdBQVdqZCxFQUFNbWUsR0FDakJoQixHQUFvQm5kLEVBQU1tZSxFQUFRMW1CLEVBQVFzZSxXQUUxQ29KLEVBQWUsQ0FDYnhELFNBQVU5RCxFQUNWN2xCLEtBQU0sU0FDTjhxQixLQUFNcEwsRUFDTnVMLFNBQVVBLEdBQ1ZFLGtCQUFtQkEsR0FDbkJDLGNBQWV4QixNQXVKckIwTyxzQkFBdUIsS0FDdkJtQyxlQUFnQixXQUNkOWEsRUFBSTVhLFNBQVUsWUFBYXpDLEtBQUtrMEIsY0FDaEM3VyxFQUFJNWEsU0FBVSxZQUFhekMsS0FBS2swQixjQUNoQzdXLEVBQUk1YSxTQUFVLGNBQWV6QyxLQUFLazBCLGNBQ2xDN1csRUFBSTVhLFNBQVUsV0FBWTZyQixJQUMxQmpSLEVBQUk1YSxTQUFVLFlBQWE2ckIsSUFDM0JqUixFQUFJNWEsU0FBVSxZQUFhNnJCLEtBRTdCOEosYUFBYyxXQUNaLElBQUk3RSxFQUFnQnZ6QixLQUFLb2QsR0FBR21XLGNBQzVCbFcsRUFBSWtXLEVBQWUsVUFBV3Z6QixLQUFLMnpCLFNBQ25DdFcsRUFBSWtXLEVBQWUsV0FBWXZ6QixLQUFLMnpCLFNBQ3BDdFcsRUFBSWtXLEVBQWUsWUFBYXZ6QixLQUFLMnpCLFNBQ3JDdFcsRUFBSWtXLEVBQWUsY0FBZXZ6QixLQUFLMnpCLFNBQ3ZDdFcsRUFBSTVhLFNBQVUsY0FBZXpDLE9BRS9CMnpCLFFBQVMsU0FFVHJNLEdBQ0UsSUFBSWxLLEVBQUtwZCxLQUFLb2QsR0FDVmphLEVBQVVuRCxLQUFLbUQsUUFFbkJ3bEIsR0FBV2pkLEVBQU1tZSxHQUNqQmhCLEdBQW9CbmQsRUFBTW1lLEVBQVExbUIsRUFBUXNlLFdBQzFDMEYsRUFBWSxPQUFRbm5CLEtBQU0sQ0FDeEJzbkIsSUFBS0EsSUFFUHdDLEVBQVdELEdBQVVBLEVBQU92VyxXQUU1QnFWLEdBQVdqZCxFQUFNbWUsR0FDakJoQixHQUFvQm5kLEVBQU1tZSxFQUFRMW1CLEVBQVFzZSxXQUV0Q0gsR0FBU2lHLGdCQU1ia0UsSUFBc0IsRUFDdEJJLElBQXlCLEVBQ3pCRCxJQUF3QixFQUN4QnlNLGNBQWNyNEIsS0FBS3ExQixTQUNuQmxRLGFBQWFubEIsS0FBS2cwQixpQkFFbEIxQixHQUFnQnR5QixLQUFLbzFCLFNBRXJCOUMsR0FBZ0J0eUIsS0FBS3cxQixjQUdqQngxQixLQUFLa3hCLGtCQUNQN1QsRUFBSTVhLFNBQVUsT0FBUXpDLE1BQ3RCcWQsRUFBSUQsRUFBSSxZQUFhcGQsS0FBS20wQixlQUc1Qm4wQixLQUFLbTRCLGlCQUVMbjRCLEtBQUtvNEIsZUFFRHZiLEdBQ0Y1VSxFQUFJeEYsU0FBU29HLEtBQU0sY0FBZSxJQUdwQ1osRUFBSTRoQixFQUFRLFlBQWEsSUFFckJ2QyxJQUNFOEMsS0FDRjlDLEVBQUlpQyxZQUFjakMsRUFBSThHLGtCQUNyQmpyQixFQUFRa3RCLFlBQWMvSSxFQUFJK0csbUJBRzdCdEUsR0FBV0EsRUFBUXpXLFlBQWN5VyxFQUFRelcsV0FBV1gsWUFBWW9YLElBRTVEMUIsSUFBV3lCLEdBQVlmLElBQTJDLFVBQTVCQSxHQUFZWSxjQUVwRHBCLElBQVdBLEdBQVFqVixZQUFjaVYsR0FBUWpWLFdBQVdYLFlBQVk0VixJQUc5RHNCLElBQ0U3cEIsS0FBS2t4QixpQkFDUDdULEVBQUl3TSxFQUFRLFVBQVc3cEIsTUFHekI4eEIsR0FBa0JqSSxHQUVsQkEsRUFBTzNoQixNQUFNLGVBQWlCLEdBRzFCa2lCLEtBQVVxQixJQUNadE4sRUFBWTBMLEVBQVFkLEdBQWNBLEdBQVk1bEIsUUFBUTBzQixXQUFhN3ZCLEtBQUttRCxRQUFRMHNCLFlBQVksR0FHOUYxUixFQUFZMEwsRUFBUTdwQixLQUFLbUQsUUFBUTJzQixhQUFhLEdBRTlDakYsRUFBZSxDQUNieEQsU0FBVXJuQixLQUNWdEMsS0FBTSxXQUNOOHFCLEtBQU1zQixFQUNObkIsU0FBVSxLQUNWRSxrQkFBbUIsS0FDbkJDLGNBQWV4QixJQUdiZSxJQUFXeUIsR0FDVG5CLElBQVksSUFFZGtDLEVBQWUsQ0FDYnhDLE9BQVF5QixFQUNScHNCLEtBQU0sTUFDTjhxQixLQUFNc0IsRUFDTnJCLE9BQVFKLEVBQ1JTLGNBQWV4QixJQUlqQnVELEVBQWUsQ0FDYnhELFNBQVVybkIsS0FDVnRDLEtBQU0sU0FDTjhxQixLQUFNc0IsRUFDTmhCLGNBQWV4QixJQUlqQnVELEVBQWUsQ0FDYnhDLE9BQVF5QixFQUNScHNCLEtBQU0sT0FDTjhxQixLQUFNc0IsRUFDTnJCLE9BQVFKLEVBQ1JTLGNBQWV4QixJQUdqQnVELEVBQWUsQ0FDYnhELFNBQVVybkIsS0FDVnRDLEtBQU0sT0FDTjhxQixLQUFNc0IsRUFDTmhCLGNBQWV4QixLQUluQnlCLElBQWVBLEdBQVl1UCxRQUV2QjNQLEtBQWFELElBQ1hDLElBQVksSUFFZGtDLEVBQWUsQ0FDYnhELFNBQVVybkIsS0FDVnRDLEtBQU0sU0FDTjhxQixLQUFNc0IsRUFDTmhCLGNBQWV4QixJQUdqQnVELEVBQWUsQ0FDYnhELFNBQVVybkIsS0FDVnRDLEtBQU0sT0FDTjhxQixLQUFNc0IsRUFDTmhCLGNBQWV4QixLQU1uQmhHLEdBQVNwa0IsU0FFSyxNQUFaeXJCLEtBQWtDLElBQWRBLEtBQ3RCQSxHQUFXRCxHQUNYRyxHQUFvQkQsSUFHdEJpQyxFQUFlLENBQ2J4RCxTQUFVcm5CLEtBQ1Z0QyxLQUFNLE1BQ044cUIsS0FBTXNCLEVBQ05oQixjQUFleEIsSUFJakJ0bkIsS0FBS3M0QixXQTlJVHQ0QixLQUFLMjBCLFlBcUpUQSxTQUFVLFdBQ1J4TixFQUFZLFVBQVdubkIsTUFDdkJxb0IsRUFBU3dCLEVBQVNDLEVBQVdDLEVBQVVDLEdBQVN6QixHQUFVMEIsR0FBYUMsR0FBY2EsR0FBU0MsR0FBV1osR0FBUXpCLEdBQVdFLEdBQW9CSCxHQUFXRSxHQUFvQnlDLEdBQWFDLEdBQWdCdkMsR0FBYytCLEdBQWN4SixHQUFTRSxRQUFVRixHQUFTQyxNQUFRRCxHQUFTVSxNQUFRVixHQUFTcGtCLE9BQVMsS0FDL1M4dUIsR0FBa0J2bUIsU0FBUSxTQUFVMlgsR0FDbENBLEVBQUc0VixTQUFVLEtBRWZoSCxHQUFrQnhzQixPQUFTeXJCLEdBQVNDLEdBQVMsR0FFL0NxTixZQUFhLFNBRWJqUixHQUNFLE9BQVFBLEVBQUl0akIsTUFDVixJQUFLLE9BQ0wsSUFBSyxVQUNIaEUsS0FBSzJ6QixRQUFRck0sR0FFYixNQUVGLElBQUssWUFDTCxJQUFLLFdBQ0N1QyxJQUNGN3BCLEtBQUtpdkIsWUFBWTNILEdBNEszQixTQUVBQSxHQUNNQSxFQUFJNkksZUFDTjdJLEVBQUk2SSxhQUFhcUksV0FBYSxRQUdoQ2xSLEVBQUlpQyxZQUFjakMsRUFBSThHLGlCQWpMZHFLLENBQWdCblIsSUFHbEIsTUFFRixJQUFLLGNBQ0hBLEVBQUk4RyxtQkFTVnNLLFFBQVMsV0FRUCxJQVBBLElBQ0l0YixFQURBdWIsRUFBUSxHQUVScjdCLEVBQVcwQyxLQUFLb2QsR0FBRzlmLFNBQ25CaUMsRUFBSSxFQUNKOEgsRUFBSS9KLEVBQVNrQyxPQUNiMkQsRUFBVW5ELEtBQUttRCxRQUVaNUQsRUFBSThILEVBQUc5SCxJQUdSdWUsRUFGSlYsRUFBSzlmLEVBQVNpQyxHQUVFNEQsRUFBUXNlLFVBQVd6aEIsS0FBS29kLElBQUksSUFDMUN1YixFQUFNdDdCLEtBQUsrZixFQUFHd2IsYUFBYXoxQixFQUFRb3RCLGFBQWV5QixHQUFZNVUsSUFJbEUsT0FBT3ViLEdBT1R2SixLQUFNLFNBQWN1SixHQUNsQixJQUFJRSxFQUFRLEdBQ1J4USxFQUFTcm9CLEtBQUtvZCxHQUNsQnBkLEtBQUswNEIsVUFBVWp6QixTQUFRLFNBQVV2RSxFQUFJM0IsR0FDbkMsSUFBSTZkLEVBQUtpTCxFQUFPL3FCLFNBQVNpQyxHQUVyQnVlLEVBQVFWLEVBQUlwZCxLQUFLbUQsUUFBUXNlLFVBQVc0RyxHQUFRLEtBQzlDd1EsRUFBTTMzQixHQUFNa2MsS0FFYnBkLE1BQ0gyNEIsRUFBTWx6QixTQUFRLFNBQVV2RSxHQUNsQjIzQixFQUFNMzNCLEtBQ1JtbkIsRUFBTzFWLFlBQVlrbUIsRUFBTTMzQixJQUN6Qm1uQixFQUFPdmxCLFlBQVkrMUIsRUFBTTMzQixTQVEvQm8zQixLQUFNLFdBQ0osSUFBSWhKLEVBQVF0dkIsS0FBS21ELFFBQVFtc0IsTUFDekJBLEdBQVNBLEVBQU14eEIsS0FBT3d4QixFQUFNeHhCLElBQUlrQyxPQVNsQzhkLFFBQVMsU0FBbUJWLEVBQUlHLEdBQzlCLE9BQU9PLEVBQVFWLEVBQUlHLEdBQVl2ZCxLQUFLbUQsUUFBUXNlLFVBQVd6aEIsS0FBS29kLElBQUksSUFTbEU4SixPQUFRLFNBQWdCeHBCLEVBQU1LLEdBQzVCLElBQUlvRixFQUFVbkQsS0FBS21ELFFBRW5CLFFBQWMsSUFBVnBGLEVBQ0YsT0FBT29GLEVBQVF6RixHQUVmLElBQUl1cUIsRUFBZ0JsQixFQUFjZSxhQUFhOW5CLEtBQU10QyxFQUFNSyxHQUd6RG9GLEVBQVF6RixRQURtQixJQUFsQnVxQixFQUNPQSxFQUVBbHFCLEVBR0wsVUFBVEwsR0FDRit2QixHQUFjdHFCLElBUXBCMjFCLFFBQVMsV0FDUDNSLEVBQVksVUFBV25uQixNQUN2QixJQUFJb2QsRUFBS3BkLEtBQUtvZCxHQUNkQSxFQUFHNkcsR0FBVyxLQUNkNUcsRUFBSUQsRUFBSSxZQUFhcGQsS0FBS214QixhQUMxQjlULEVBQUlELEVBQUksYUFBY3BkLEtBQUtteEIsYUFDM0I5VCxFQUFJRCxFQUFJLGNBQWVwZCxLQUFLbXhCLGFBRXhCbnhCLEtBQUtreEIsa0JBQ1A3VCxFQUFJRCxFQUFJLFdBQVlwZCxNQUNwQnFkLEVBQUlELEVBQUksWUFBYXBkLE9BSXZCdUosTUFBTTFOLFVBQVU0SixRQUFRMUosS0FBS3FoQixFQUFHMmIsaUJBQWlCLGdCQUFnQixTQUFVM2IsR0FDekVBLEVBQUd0SyxnQkFBZ0IsZ0JBR3JCOVMsS0FBSzJ6QixVQUVMM3pCLEtBQUs0ekIsNEJBRUxqSSxHQUFVN3JCLE9BQU82ckIsR0FBVXZ1QixRQUFRNEMsS0FBS29kLElBQUssR0FDN0NwZCxLQUFLb2QsR0FBS0EsRUFBSyxNQUVqQitYLFdBQVksV0FDVixJQUFLakwsR0FBYSxDQUVoQixHQURBL0MsRUFBWSxZQUFhbm5CLE1BQ3JCc2hCLEdBQVNpRyxjQUFlLE9BQzVCdGYsRUFBSXNnQixHQUFTLFVBQVcsUUFFcEJ2b0IsS0FBS21ELFFBQVF3c0IsbUJBQXFCcEgsR0FBUWpWLFlBQzVDaVYsR0FBUWpWLFdBQVdYLFlBQVk0VixJQUdqQzJCLElBQWMsSUFHbEJnTyxXQUFZLFNBQW9CblAsR0FDOUIsR0FBZ0MsVUFBNUJBLEVBQVlZLGFBTWhCLEdBQUlPLEdBQWEsQ0FFZixHQURBL0MsRUFBWSxZQUFhbm5CLE1BQ3JCc2hCLEdBQVNpRyxjQUFlLE9BRXhCYyxFQUFPelAsU0FBU2lSLEtBQVk3cEIsS0FBS21ELFFBQVEwcUIsTUFBTU0sWUFDakQ5RixFQUFPelYsYUFBYTJWLEdBQVNzQixHQUNwQkcsR0FDVDNCLEVBQU96VixhQUFhMlYsR0FBU3lCLElBRTdCM0IsRUFBT3ZsQixZQUFZeWxCLElBR2pCdm9CLEtBQUttRCxRQUFRMHFCLE1BQU1NLGFBQ3JCbnVCLEtBQUsrbEIsUUFBUThELEVBQVF0QixJQUd2QnRnQixFQUFJc2dCLEdBQVMsVUFBVyxJQUN4QjJCLElBQWMsUUF0QmRscUIsS0FBS20xQixlQXdMUGxKLElBQ0Y5TyxFQUFHMWEsU0FBVSxhQUFhLFNBQVU2a0IsSUFDN0JoRyxHQUFTcGtCLFFBQVV1dUIsS0FBd0JuRSxFQUFJaUMsWUFDbERqQyxFQUFJOEcsb0JBTVY5TSxHQUFTMFgsTUFBUSxDQUNmN2IsR0FBSUEsRUFDSkUsSUFBS0EsRUFDTHBWLElBQUtBLEVBQ0xrWCxLQUFNQSxFQUNOOFosR0FBSSxTQUFZN2IsRUFBSUcsR0FDbEIsUUFBU08sRUFBUVYsRUFBSUcsRUFBVUgsR0FBSSxJQUVyQzhiLE9BM2hFRixTQUFnQkMsRUFBS3YyQixHQUNuQixHQUFJdTJCLEdBQU92MkIsRUFDVCxJQUFLLElBQUl1RSxLQUFPdkUsRUFDVkEsRUFBSTlHLGVBQWVxTCxLQUNyQmd5QixFQUFJaHlCLEdBQU92RSxFQUFJdUUsSUFLckIsT0FBT2d5QixHQW1oRVA5VixTQUFVQSxFQUNWdkYsUUFBU0EsRUFDVEssWUFBYUEsRUFDYjZELE1BQU9BLEVBQ1B0VyxNQUFPQSxFQUNQMHRCLFNBQVUvRyxHQUNWZ0gsZUFBZ0IvRyxHQUNoQmdILGdCQUFpQi9NLEdBQ2pCckwsU0FBVUEsR0FRWkksR0FBU3pqQixJQUFNLFNBQVUwN0IsR0FDdkIsT0FBT0EsRUFBUXRWLElBUWpCM0MsR0FBUzBGLE1BQVEsV0FDZixJQUFLLElBQUl3UyxFQUFPN2QsVUFBVW5jLE9BQVFvbkIsRUFBVSxJQUFJcmQsTUFBTWl3QixHQUFPQyxFQUFPLEVBQUdBLEVBQU9ELEVBQU1DLElBQ2xGN1MsRUFBUTZTLEdBQVE5ZCxVQUFVOGQsR0FHeEI3UyxFQUFRLEdBQUd0TCxjQUFnQi9SLFFBQU9xZCxFQUFVQSxFQUFRLElBQ3hEQSxFQUFRbmhCLFNBQVEsU0FBVXdoQixHQUN4QixJQUFLQSxFQUFPcHJCLFlBQWNvckIsRUFBT3ByQixVQUFVeWYsWUFDekMsS0FBTSxnRUFBZ0VuWCxPQUFPLEdBQUdrRixTQUFTdE4sS0FBS2tyQixJQUc1RkEsRUFBTytSLFFBQU8xWCxHQUFTMFgsTUFBUXBkLEVBQWMsR0FBSTBGLEdBQVMwWCxNQUFPL1IsRUFBTytSLFFBQzVFalMsRUFBY0MsTUFBTUMsT0FVeEIzRixHQUFTcGEsT0FBUyxTQUFVa1csRUFBSWphLEdBQzlCLE9BQU8sSUFBSW1lLEdBQVNsRSxFQUFJamEsSUFJMUJtZSxHQUFTM1IsUUFsL0VLLFNBby9FZCxJQUNJK3BCLEdBQ0FDLEdBRUFDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBUEFDLEdBQWMsR0FHZEMsSUFBWSxFQW1IaEIsU0FBU0MsS0FDUEYsR0FBWXYwQixTQUFRLFNBQVUwMEIsR0FDNUI5QixjQUFjOEIsRUFBV0MsUUFFM0JKLEdBQWMsR0FHaEIsU0FBU0ssS0FDUGhDLGNBQWMwQixJQUdoQixJQUFJSSxHQUFhOVcsR0FBUyxTQUFVaUUsRUFBS25rQixFQUFTa2xCLEVBQVFpUyxHQUV4RCxHQUFLbjNCLEVBQVFvM0IsT0FBYixDQUNBLElBTUlDLEVBTkEvVyxHQUFLNkQsRUFBSWlILFFBQVVqSCxFQUFJaUgsUUFBUSxHQUFLakgsR0FBS21ILFFBQ3pDL0ssR0FBSzRELEVBQUlpSCxRQUFVakgsRUFBSWlILFFBQVEsR0FBS2pILEdBQUtvSCxRQUN6QytMLEVBQU90M0IsRUFBUXUzQixrQkFDZkMsRUFBUXgzQixFQUFReTNCLFlBQ2hCeFksRUFBYzlDLElBQ2R1YixHQUFxQixFQUdyQmxCLEtBQWlCdFIsSUFDbkJzUixHQUFldFIsRUFDZjZSLEtBQ0FSLEdBQVd2MkIsRUFBUW8zQixPQUNuQkMsRUFBaUJyM0IsRUFBUTIzQixVQUVSLElBQWJwQixLQUNGQSxHQUFXM1ksRUFBMkJzSCxHQUFRLEtBSWxELElBQUkwUyxFQUFZLEVBQ1pDLEVBQWdCdEIsR0FFcEIsRUFBRyxDQUNELElBQUl0YyxFQUFLNGQsRUFDTHhXLEVBQU8vRSxFQUFRckMsR0FDZjRDLEVBQU13RSxFQUFLeEUsSUFDWEUsRUFBU3NFLEVBQUt0RSxPQUNkRCxFQUFPdUUsRUFBS3ZFLEtBQ1pFLEVBQVFxRSxFQUFLckUsTUFDYjlJLEVBQVFtTixFQUFLbk4sTUFDYitJLEVBQVNvRSxFQUFLcEUsT0FDZDZhLE9BQWEsRUFDYkMsT0FBYSxFQUNidlksRUFBY3ZGLEVBQUd1RixZQUNqQkUsRUFBZXpGLEVBQUd5RixhQUNsQjJKLEVBQVF2a0IsRUFBSW1WLEdBQ1orZCxFQUFhL2QsRUFBR2lGLFdBQ2hCK1ksRUFBYWhlLEVBQUdrRixVQUVoQmxGLElBQU9nRixHQUNUNlksRUFBYTVqQixFQUFRc0wsSUFBb0MsU0FBcEI2SixFQUFNekosV0FBNEMsV0FBcEJ5SixFQUFNekosV0FBOEMsWUFBcEJ5SixFQUFNekosV0FDekdtWSxFQUFhOWEsRUFBU3lDLElBQXFDLFNBQXBCMkosRUFBTXhKLFdBQTRDLFdBQXBCd0osRUFBTXhKLFdBQThDLFlBQXBCd0osRUFBTXhKLGFBRTNHaVksRUFBYTVqQixFQUFRc0wsSUFBb0MsU0FBcEI2SixFQUFNekosV0FBNEMsV0FBcEJ5SixFQUFNekosV0FDekVtWSxFQUFhOWEsRUFBU3lDLElBQXFDLFNBQXBCMkosRUFBTXhKLFdBQTRDLFdBQXBCd0osRUFBTXhKLFlBRzdFLElBQUlxWSxFQUFLSixJQUFlM2pCLEtBQUsyYyxJQUFJOVQsRUFBUXNELElBQU1nWCxHQUFRVSxFQUFhOWpCLEVBQVFzTCxJQUFnQnJMLEtBQUsyYyxJQUFJaFUsRUFBT3dELElBQU1nWCxLQUFVVSxHQUN4SEcsRUFBS0osSUFBZTVqQixLQUFLMmMsSUFBSS9ULEVBQVN3RCxJQUFNK1csR0FBUVcsRUFBYWhiLEVBQVN5QyxJQUFpQnZMLEtBQUsyYyxJQUFJalUsRUFBTTBELElBQU0rVyxLQUFVVyxHQUU5SCxJQUFLcEIsR0FBWWUsR0FDZixJQUFLLElBQUl4N0IsRUFBSSxFQUFHQSxHQUFLdzdCLEVBQVd4N0IsSUFDekJ5NkIsR0FBWXo2QixLQUNmeTZCLEdBQVl6NkIsR0FBSyxJQUtuQnk2QixHQUFZZSxHQUFXTSxJQUFNQSxHQUFNckIsR0FBWWUsR0FBV08sSUFBTUEsR0FBTXRCLEdBQVllLEdBQVczZCxLQUFPQSxJQUN0RzRjLEdBQVllLEdBQVczZCxHQUFLQSxFQUM1QjRjLEdBQVllLEdBQVdNLEdBQUtBLEVBQzVCckIsR0FBWWUsR0FBV08sR0FBS0EsRUFDNUJqRCxjQUFjMkIsR0FBWWUsR0FBV1gsS0FFM0IsR0FBTmlCLEdBQWlCLEdBQU5DLElBQ2JULEdBQXFCLEVBR3JCYixHQUFZZSxHQUFXWCxJQUFNOUUsWUFBWSxXQUVuQ2dGLEdBQTZCLElBQWZ0NkIsS0FBS3U3QixPQUNyQmphLEdBQVNwa0IsT0FBT2czQixhQUFhNEYsSUFJL0IsSUFBSTBCLEVBQWdCeEIsR0FBWWg2QixLQUFLdTdCLE9BQU9ELEdBQUt0QixHQUFZaDZCLEtBQUt1N0IsT0FBT0QsR0FBS1gsRUFBUSxFQUNsRmMsRUFBZ0J6QixHQUFZaDZCLEtBQUt1N0IsT0FBT0YsR0FBS3JCLEdBQVloNkIsS0FBS3U3QixPQUFPRixHQUFLVixFQUFRLEVBRXhELG1CQUFuQkgsR0FDb0ksYUFBeklBLEVBQWV6K0IsS0FBS3VsQixHQUFTRSxRQUFRbE8sV0FBVzJRLEdBQVV3WCxFQUFlRCxFQUFlbFUsRUFBS3dTLEdBQVlFLEdBQVloNkIsS0FBS3U3QixPQUFPbmUsS0FLdklvRyxFQUFTd1csR0FBWWg2QixLQUFLdTdCLE9BQU9uZSxHQUFJcWUsRUFBZUQsSUFDcERwMEIsS0FBSyxDQUNMbTBCLE1BQU9SLElBQ0wsTUFJUkEsVUFDTzUzQixFQUFRdTRCLGNBQWdCVixJQUFrQjVZLElBQWdCNFksRUFBZ0JqYSxFQUEyQmlhLEdBQWUsS0FFN0hmLEdBQVlZLEtBQ1gsSUFFQ2MsR0FBTyxTQUFjdlQsR0FDdkIsSUFBSVUsRUFBZ0JWLEVBQUtVLGNBQ3JCQyxFQUFjWCxFQUFLVyxZQUNuQmMsRUFBU3pCLEVBQUt5QixPQUNkUSxFQUFpQmpDLEVBQUtpQyxlQUN0Qk8sRUFBd0J4QyxFQUFLd0Msc0JBQzdCTixFQUFxQmxDLEVBQUtrQyxtQkFDMUJFLEVBQXVCcEMsRUFBS29DLHFCQUNoQyxHQUFLMUIsRUFBTCxDQUNBLElBQUk4UyxFQUFhN1MsR0FBZXNCLEVBQ2hDQyxJQUNBLElBQUlrSSxFQUFRMUosRUFBYytTLGdCQUFrQi9TLEVBQWMrUyxlQUFlcjhCLE9BQVNzcEIsRUFBYytTLGVBQWUsR0FBSy9TLEVBQ2hIbFksRUFBU25PLFNBQVNveUIsaUJBQWlCckMsRUFBTS9ELFFBQVMrRCxFQUFNOUQsU0FDNURsRSxJQUVJb1IsSUFBZUEsRUFBV3hlLEdBQUd4RSxTQUFTaEksS0FDeENnYSxFQUFzQixTQUN0QjVxQixLQUFLODdCLFFBQVEsQ0FDWGpTLE9BQVFBLEVBQ1JkLFlBQWFBLE9BS25CLFNBQVNnVCxNQXNDVCxTQUFTQyxNQXBDVEQsR0FBT2xnQyxVQUFZLENBQ2pCb2dDLFdBQVksS0FDWkMsVUFBVyxTQUFtQkMsR0FDNUIsSUFBSXZULEVBQW9CdVQsRUFBTXZULGtCQUM5QjVvQixLQUFLaThCLFdBQWFyVCxHQUVwQmtULFFBQVMsU0FBaUJNLEdBQ3hCLElBQUl2UyxFQUFTdVMsRUFBTXZTLE9BQ2ZkLEVBQWNxVCxFQUFNclQsWUFDeEIvb0IsS0FBS3FuQixTQUFTL0Msd0JBRVZ5RSxHQUNGQSxFQUFZekUsd0JBR2QsSUFBSWtQLEVBQWN0UyxFQUFTbGhCLEtBQUtxbkIsU0FBU2pLLEdBQUlwZCxLQUFLaThCLFdBQVlqOEIsS0FBS21ELFNBRS9EcXdCLEVBQ0Z4ekIsS0FBS3FuQixTQUFTakssR0FBR3hLLGFBQWFpWCxFQUFRMkosR0FFdEN4ekIsS0FBS3FuQixTQUFTakssR0FBR3RhLFlBQVkrbUIsR0FHL0I3cEIsS0FBS3FuQixTQUFTbkMsYUFFVjZELEdBQ0ZBLEVBQVk3RCxjQUdoQnlXLEtBQU1BLElBR1JsZ0IsRUFBU3NnQixHQUFRLENBQ2ZyVSxXQUFZLGtCQUtkc1UsR0FBT25nQyxVQUFZLENBQ2pCaWdDLFFBQVMsU0FBaUJPLEdBQ3hCLElBQUl4UyxFQUFTd1MsRUFBTXhTLE9BRWZ5UyxFQURjRCxFQUFNdFQsYUFDWS9vQixLQUFLcW5CLFNBQ3pDaVYsRUFBZWhZLHdCQUNmdUYsRUFBT3ZXLFlBQWN1VyxFQUFPdlcsV0FBV1gsWUFBWWtYLEdBQ25EeVMsRUFBZXBYLGNBRWpCeVcsS0FBTUEsSUFHUmxnQixFQUFTdWdCLEdBQVEsQ0FDZnRVLFdBQVksa0JBd3NCZHBHLEdBQVMwRixNQUFNLElBai9CZixXQUNFLFNBQVN1VixJQVFQLElBQUssSUFBSXgvQixLQVBUaUQsS0FBSzZtQixTQUFXLENBQ2QwVCxRQUFRLEVBQ1JHLGtCQUFtQixHQUNuQkUsWUFBYSxHQUNiYyxjQUFjLEdBR0QxN0IsS0FDUSxNQUFqQmpELEVBQUdnUixPQUFPLElBQWtDLG1CQUFiL04sS0FBS2pELEtBQ3RDaUQsS0FBS2pELEdBQU1pRCxLQUFLakQsR0FBSXFLLEtBQUtwSCxPQTRGL0IsT0F2RkF1OEIsRUFBVzFnQyxVQUFZLENBQ3JCc3VCLFlBQWEsU0FBcUIvQixHQUNoQyxJQUFJVSxFQUFnQlYsRUFBS1UsY0FFckI5b0IsS0FBS3FuQixTQUFTNkosZ0JBQ2hCL1QsRUFBRzFhLFNBQVUsV0FBWXpDLEtBQUt3OEIsbUJBRTFCeDhCLEtBQUttRCxRQUFROHRCLGVBQ2Y5VCxFQUFHMWEsU0FBVSxjQUFlekMsS0FBS3k4QiwyQkFDeEIzVCxFQUFjeUYsUUFDdkJwUixFQUFHMWEsU0FBVSxZQUFhekMsS0FBS3k4QiwyQkFFL0J0ZixFQUFHMWEsU0FBVSxZQUFhekMsS0FBS3k4Qiw0QkFJckNDLGtCQUFtQixTQUEyQlAsR0FDNUMsSUFBSXJULEVBQWdCcVQsRUFBTXJULGNBR3JCOW9CLEtBQUttRCxRQUFRdzVCLGdCQUFtQjdULEVBQWNULFFBQ2pEcm9CLEtBQUt3OEIsa0JBQWtCMVQsSUFHM0I2UyxLQUFNLFdBQ0EzN0IsS0FBS3FuQixTQUFTNkosZ0JBQ2hCN1QsRUFBSTVhLFNBQVUsV0FBWXpDLEtBQUt3OEIsb0JBRS9CbmYsRUFBSTVhLFNBQVUsY0FBZXpDLEtBQUt5OEIsMkJBQ2xDcGYsRUFBSTVhLFNBQVUsWUFBYXpDLEtBQUt5OEIsMkJBQ2hDcGYsRUFBSTVhLFNBQVUsWUFBYXpDLEtBQUt5OEIsNEJBR2xDcEMsS0FDQUgsS0F2bUVKL1UsYUFBYWxILEdBQ2JBLE9BQW1CLEdBeW1FakIyZSxRQUFTLFdBQ1A5QyxHQUFhSCxHQUFlRCxHQUFXTyxHQUFZRixHQUE2QkgsR0FBa0JDLEdBQWtCLEtBQ3BIRyxHQUFZeDZCLE9BQVMsR0FFdkJpOUIsMEJBQTJCLFNBQW1DblYsR0FDNUR0bkIsS0FBS3c4QixrQkFBa0JsVixHQUFLLElBRTlCa1Ysa0JBQW1CLFNBQTJCbFYsRUFBS21OLEdBQ2pELElBQUlsUixFQUFRdmpCLEtBRVJ5akIsR0FBSzZELEVBQUlpSCxRQUFVakgsRUFBSWlILFFBQVEsR0FBS2pILEdBQUttSCxRQUN6Qy9LLEdBQUs0RCxFQUFJaUgsUUFBVWpILEVBQUlpSCxRQUFRLEdBQUtqSCxHQUFLb0gsUUFDekNsTSxFQUFPL2YsU0FBU295QixpQkFBaUJwUixFQUFHQyxHQU14QyxHQUxBb1csR0FBYXhTLEVBS1RtTixHQUFZOVgsR0FBUUQsR0FBY0csRUFBUSxDQUM1Q3NkLEdBQVc3UyxFQUFLdG5CLEtBQUttRCxRQUFTcWYsRUFBTWlTLEdBRXBDLElBQUlvSSxFQUFpQjliLEVBQTJCeUIsR0FBTSxJQUVsRHlYLElBQWVGLElBQThCdFcsSUFBTW1XLElBQW1CbFcsSUFBTW1XLEtBQzlFRSxJQUE4Qk0sS0FFOUJOLEdBQTZCekUsYUFBWSxXQUN2QyxJQUFJd0gsRUFBVS9iLEVBQTJCdGUsU0FBU295QixpQkFBaUJwUixFQUFHQyxJQUFJLEdBRXRFb1osSUFBWUQsSUFDZEEsRUFBaUJDLEVBQ2pCNUMsTUFHRkMsR0FBVzdTLEVBQUsvRCxFQUFNcGdCLFFBQVMyNUIsRUFBU3JJLEtBQ3ZDLElBQ0htRixHQUFrQm5XLEVBQ2xCb1csR0FBa0JuVyxPQUVmLENBRUwsSUFBSzFqQixLQUFLbUQsUUFBUXU0QixjQUFnQjNhLEVBQTJCeUIsR0FBTSxLQUFVbEQsSUFFM0UsWUFEQTRhLEtBSUZDLEdBQVc3UyxFQUFLdG5CLEtBQUttRCxRQUFTNGQsRUFBMkJ5QixHQUFNLElBQVEsTUFJdEUvRyxFQUFTOGdCLEVBQVksQ0FDMUI3VSxXQUFZLFNBQ1paLHFCQUFxQixNQXk0QnpCeEYsR0FBUzBGLE1BQU1nVixHQUFRRCxJQUVSLFUsR0MxbUhmLFdBUUksV0FBWWxjLEdBQ1I3ZixLQUFLNmYsVUFBWUEsRUFDakI3ZixLQUFLc00sU0FBVzdKLFNBQVNxTyxjQUFjLHlCQUF5QnBJLFVBQ2hFMUksS0FBSys4QixhQUFldDZCLFNBQVNxTyxjQUFjLHdCQUF3QnBJLFVBQ25FMUksS0FBS2c5QixjQUFnQnY2QixTQUFTcU8sY0FBYyx5QkFBeUJwSSxVQUNyRTFJLEtBQUthLEtBQU9iLEtBQUtpOUIsVUFDakJqOUIsS0FBS3dPLFNBQ0x4TyxLQUFLazlCLFFBK09iLE9BNU9XLEVBQUFwbkIsS0FBUCxTQUFZK0osR0FDUixJQUFJc2QsRUFBTXRkLElBR2QsWUFBQXFkLE1BQUEsc0JBQ1VFLEVBQWdCLENBQ2xCQyxPQUFRNTZCLFNBQVNxTyxjQUFjLGFBQy9Cd3NCLFNBQVU3NkIsU0FBU3FPLGNBQWMsV0FHckNzc0IsRUFBU0UsU0FBU3IwQixpQkFBaUIsU0FBUyxXQUN4QyxFQUFLczBCLGtCQUdUSCxFQUFTQyxPQUFPcDBCLGlCQUFpQixTQUFTLFdBQ3RDLEVBQUtxUixtQkFHVDdYLFNBQVN3RyxpQkFBaUIsV0FBVyxTQUFDdTBCLEdBQy9CQSxFQUFHQyxVQUFZRCxFQUFHRSxTQUFzQixNQUFYRixFQUFHcjJCLE1BQy9CcTJCLEVBQUdwUCxpQkFDSG9QLEVBQUduUCxrQkFDSCxFQUFLL1Qsb0JBSWIsSUFBSStNLEVBQVcsSUFBSSxHQUFTcm5CLEtBQUs2ZixVQUFXLENBQ3hDMEUsVUFBVyxJQUNYb1osTUFBTyxTQUFDSCxHQUNKLElBQUk3RSxFQUFRdFIsRUFBU3FSLFVBQ3JCLElBQUssSUFBSW41QixLQUFLbzVCLEVBQU8sQ0FDTixFQUFLaUYsWUFBWXBkLFNBQVNtWSxFQUFNcDVCLEtBQ3RDeWEsYUFBYWdMLE9BQU96bEIsSUFDekIsRUFBSys0QixPQUNMLEVBQUt6M0IsS0FBTyxFQUFLbzhCLFVBQ2pCLEVBQUt6dUIsY0FPckIsWUFBQThwQixLQUFBLFdBQ0ksSUFBTXozQixFQUFPb0IsS0FBS2lSLFVBQVVsVCxLQUFLYSxLQUFLZzlCLE9BQ3RDQyxhQUFhQyxRQUFRLFFBQVNsOUIsSUFHbEMsWUFBQW05QixjQUFBLFdBQ0ksSUFBSW45QixFQUFPaTlCLGFBQWFHLFFBQVEsU0FDaEMsR0FBSXA5QixFQUFNLENBR04sSUFEQSxJQUFJZzlCLEVBQVEsR0FDTyxNQUZuQmg5QixFQUFPb0IsS0FBS0MsTUFBTXJCLEdBRUMsZUFBTSxDQUFwQixJQUFNMEQsRUFBSSxLQUNQMjVCLEVBQU8sRUFBS3BqQixlQUFldlcsR0FDL0JzNUIsRUFBTXhnQyxLQUFLNmdDLEdBRWYsT0FBT0wsRUFBTXpPLE1BQUssU0FBQy9xQixFQUFTQyxHQUN4QixPQUFPRCxFQUFFNlYsZUFBaUI1VixFQUFFNFYsa0JBR2hDLE1BQU8sQ0FDSCxFQUFLSSxrQkFLakIsWUFBQTlMLE9BQUEsV0FDSSxJQUFNakcsRUFBT3ZJLEtBQUtzTSxTQUNkbUMsRUFBVyxDQUNQeXZCLEtBQU1sK0IsS0FBSys4QixjQUtiN3dCLEVBQVUsQ0FDWnJMLEtBSE9iLEtBQUthLE1BTWhCYixLQUFLNmYsVUFBVW5YLFVBQVksU0FBZ0JILEVBQU0yRCxFQUFTdUMsR0FDMUR6TyxLQUFLbStCLGNBR1QsWUFBQTdqQixjQUFBLFdBQ0ksSUFBTTRqQixFQUFPLEVBQUs1akIsZ0JBQ2xCdGEsS0FBS2EsS0FBS2c5QixNQUFNeGdDLEtBQUs2Z0MsR0FDckJsK0IsS0FBS3M0QixPQUNMdDRCLEtBQUt3TyxTQUNMLElBQ015QixFQURjalEsS0FBSzZmLFVBQVUvTyxjQUFjLGFBQWVvdEIsRUFBSzNrQixRQUFVLE1BQ3hEekksY0FBYyxpQkFDL0JzakIsRUFBWTk0QixPQUFPZzVCLGVBQ25COEosRUFBUTM3QixTQUFTNDdCLGNBQ3ZCRCxFQUFNRSxtQkFBbUJydUIsR0FDekJta0IsRUFBVUcsa0JBQ1ZILEVBQVVtSyxTQUFTSCxJQUdmLFlBQUFuQixRQUFSLFdBQ0ksTUFBTyxDQUNIWSxNQUFPNzlCLEtBQUtnK0Isa0JBSXBCLFlBQUFKLFlBQUEsU0FBWTE4QixHQUNSLElBQW1CLFVBQUFsQixLQUFLYSxLQUFLZzlCLE1BQVYsZUFBaUIsQ0FBL0IsSUFBTUssRUFBSSxLQUNYLEdBQUloOUIsSUFBT2c5QixFQUFLaDlCLEdBQ1osT0FBT2c5QixFQUlmLE9BQU8sTUFHSCxZQUFBQyxXQUFSLFdBS0ksSUFKQSxJQUltQixNQUpHLENBQ2xCTixNQUFPNzlCLEtBQUs2ZixVQUFVa1osaUJBQWlCLFVBR2Y4RSxNQUFULGVBQWdCLENBQTlCLElBQU1LLEVBQUksS0FDWGwrQixLQUFLdytCLFVBQVVOLEtBSWYsWUFBQU0sVUFBUixTQUFrQk4sR0FBbEIsV0FDVWg5QixFQUFLc2YsU0FBUzBkLEVBQUtPLFFBQVF2OUIsSUFDM0JrOEIsRUFBZ0IsQ0FDbEJqakIsT0FBUStqQixFQUFLcHRCLGNBQWMsZ0JBQzNCc0ksTUFBTzhrQixFQUFLcHRCLGNBQWMsaUJBQzFCYixRQUFTaXVCLEVBQUtwdEIsY0FBYyxrQkFDNUI0dEIsWUFBYVIsRUFBS3B0QixjQUFjLHVCQUdwQ3NzQixFQUFTampCLE9BQU9sUixpQkFBaUIsU0FBUyxXQUN0QyxFQUFLMDFCLFdBQVd6OUIsTUFHcEIsSUFPSTA5QixFQVBFQyxFQUFhLFNBQUNyQixHQUNoQixJQUFJVSxFQUFPLEVBQUtOLFlBQVkxOEIsR0FDNUJnOUIsRUFBSy9rQixTQUFTaWtCLEVBQVNoa0IsTUFBTVosV0FDN0IwbEIsRUFBSzdrQixXQUFXK2pCLEVBQVNudEIsUUFBUXZILFdBQ2pDLEVBQUs0dkIsUUFJVDhFLEVBQVNoa0IsTUFBTW5RLGlCQUFpQixTQUFTLFNBQUN1MEIsR0FDdENyWSxhQUFheVosR0FDYkEsRUFBWTluQixZQUFXLFdBQ25CK25CLE1BQ0QsUUFHUHpCLEVBQVNudEIsUUFBUWhILGlCQUFpQixTQUFTLFNBQUN1MEIsR0FDeENyWSxhQUFheVosR0FDYkEsRUFBWTluQixZQUFXLFdBQ25CK25CLE1BQ0QsUUFHUHpCLEVBQVNoa0IsTUFBTW5RLGlCQUFpQixXQUFXLFNBQUN1MEIsR0FDMUIsVUFBWEEsRUFBR3IyQixNQUNGcTJCLEVBQUdwUCxpQkFDSHlRLElBQ0F6QixFQUFTaGtCLE1BQU0wbEIsV0FJdkIxQixFQUFTc0IsWUFBWXoxQixpQkFBaUIsU0FBUyxTQUFDdTBCLEdBQzVDLElBQUlVLEVBQU8sRUFBS04sWUFBWTE4QixHQUN6QnM4QixFQUFHNXNCLE9BQU82dEIsUUFBUTNrQixPQUNqQm9rQixFQUFLcmtCLFNBQVMyakIsRUFBRzVzQixPQUFPNnRCLFFBQVEza0IsT0FFcEMsRUFBS3dlLE9BQ0wsRUFBSzlwQixhQUtMLFlBQUFtd0IsV0FBUixTQUFtQno5QixHQUNKbEIsS0FBSzQ5QixZQUFZMThCLEdBQ3ZCaVosU0FDTG5hLEtBQUtzNEIsT0FDTHQ0QixLQUFLd08sU0FFTC9MLFNBQVMwbEIsY0FBYyxJQUFLZ0IsWUFBWSxpQkFJNUMsWUFBQW9VLGFBQUEsc0JBRVVuZ0IsRUFBSzNhLFNBQVNDLGNBQWMsT0FDbEMwYSxFQUFHM0YsVUFBVUMsSUFBSSxtQkFFakIsSUFBTWxKLEVBQVMsV0FDWDRPLEVBQUcxVSxVQUFZLFNBQWdCLEVBQUtzMEIsY0FBZSxDQUFDYSxNQUFPLEVBQUtoOUIsS0FBS2c5QixTQUduRVgsRUFBUSxXQU1WLElBTEEsSUFBTUUsRUFBZ0IsQ0FDbEIyQixTQUFVM2hCLEVBQUd0TSxjQUFjLGdCQUMzQnNKLFFBQVNnRCxFQUFHMmIsaUJBQWlCLGEsV0FHdEJpRyxHQUNQLElBQU05OUIsRUFBS3NmLFNBQVN3ZSxFQUFJUCxRQUFRdjlCLElBQ2hDODlCLEVBQUkvMUIsaUJBQWlCLFNBQVMsV0FDMUIsRUFBS2cyQixZQUFZLzlCLEdBQ2pCc04sSUFDQTB1QixRQUxVLE1BQUFFLEVBQVNoakIsUUFBVCxlQUFrQixDLEVBQXRCLE1BU2RnakIsRUFBUzJCLFNBQVM5MUIsaUJBQWlCLFNBQVMsV0FDeENtVSxFQUFHOGhCLGNBQWN2c0IsWUFBWXlLLE1BR2pDM2EsU0FBU3dHLGlCQUFpQixlQUFlLFdBQ3JDdUYsSUFDQTB1QixRQUlSMXVCLElBQ0EwdUIsSUFLQXo2QixTQUFTb0csS0FBSy9GLFlBQVlzYSxJQUl0QixZQUFBNmhCLFlBQVIsU0FBb0IvOUIsR0FDTGxCLEtBQUs0OUIsWUFBWTE4QixHQUN2QmtaLFVBQ0xwYSxLQUFLczRCLE9BQ0x0NEIsS0FBS3dPLFVBRWIsRUE5UEEsR0NIQS9MLFNBQVN3RyxpQkFBaUIsb0JBQW9CLFdBQzFDLEdBQU02TSxLQUFLclQsU0FBU3FPLGNBQWMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0XHRpZiAocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdH0gO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIjAzZDdmMmYtXCIgKyBjaHVua0lkICsgXCItd3BzLWhtci5qc1wiO1xuIFx0XHRpZiAobnVsbCkgc2NyaXB0LmNyb3NzT3JpZ2luID0gbnVsbDtcbiBcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR9XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIjAzZDdmMmYtd3BzLWhtci5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCI4MWU1OGRiZWI2ZWQ1MzJkZmViNVwiO1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbiBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbiBcdFx0XHRcdFx0XHRyZXF1ZXN0ICtcbiBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHQpO1xuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4gXHRcdH07XG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbiBcdFx0XHRcdH0sXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9O1xuIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwiZVwiICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcInRcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0Zm4udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdFx0aWYgKG1vZGUgJiAxKSB2YWx1ZSA9IGZuKHZhbHVlKTtcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy50KHZhbHVlLCBtb2RlICYgfjEpO1xuIFx0XHR9O1xuIFx0XHRyZXR1cm4gZm47XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkludmFsaWRhdGVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG4gXHRcdFx0aW52YWxpZGF0ZTogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHR0aGlzLl9zZWxmSW52YWxpZGF0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0c3dpdGNoIChob3RTdGF0dXMpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJyZWFkeVwiOlxuIFx0XHRcdFx0XHRcdGhvdEFwcGx5SW52YWxpZGF0ZWRNb2R1bGUobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwicHJlcGFyZVwiOlxuIFx0XHRcdFx0XHRjYXNlIFwiY2hlY2tcIjpcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VcIjpcbiBcdFx0XHRcdFx0Y2FzZSBcImFwcGx5XCI6XG4gXHRcdFx0XHRcdFx0KGhvdFF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9XG4gXHRcdFx0XHRcdFx0XHRob3RRdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdC8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXNcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdH1cbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaCwgaG90UXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0fVxuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbiBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuIFx0XHRcdFx0aG90U2V0U3RhdHVzKGhvdEFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkgPyBcInJlYWR5XCIgOiBcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiZcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiZcbiBcdFx0XHRcdGhvdFdhaXRpbmdGaWxlcyA9PT0gMFxuIFx0XHRcdCkge1xuIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXG4gXHRcdFx0cmV0dXJuO1xuIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xuIFx0XHRmb3IgKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYgKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcbiBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XG4gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RVcGRhdGVEb3dubG9hZGVkKCkge1xuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbiBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XG4gXHRcdGhvdERlZmVycmVkID0gbnVsbDtcbiBcdFx0aWYgKCFkZWZlcnJlZCkgcmV0dXJuO1xuIFx0XHRpZiAoaG90QXBwbHlPblVwZGF0ZSkge1xuIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXG4gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXG4gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxuIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpXG4gXHRcdFx0XHQudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xuIFx0XHRcdFx0fSlcbiBcdFx0XHRcdC50aGVuKFxuIFx0XHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gXHRcdFx0XHRcdH0sXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdChlcnIpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHQpO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiBcdFx0cmV0dXJuIGhvdEFwcGx5SW50ZXJuYWwob3B0aW9ucyk7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5SW50ZXJuYWwob3B0aW9ucykge1xuIFx0XHRob3RBcHBseUludmFsaWRhdGVkTW9kdWxlcygpO1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoXG4gXHRcdFx0XHRcdCFtb2R1bGUgfHxcbiBcdFx0XHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCAmJiAhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkKVxuIFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cblxuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG4gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcbiBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuIFx0XHRcdH07XG4gXHRcdH1cblxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4gXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XG4gXHRcdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cbiBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xuIFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG4gXHRcdFx0KTtcbiBcdFx0fTtcblxuIFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xuIFx0XHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuIFx0XHRcdFx0dmFyIHJlc3VsdDtcbiBcdFx0XHRcdGlmIChob3RVcGRhdGVbaWRdKSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkICYmXG4gXHRcdFx0XHQvLyByZW1vdmVkIHNlbGYtYWNjZXB0ZWQgbW9kdWxlcyBzaG91bGQgbm90IGJlIHJlcXVpcmVkXG4gXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG4gXHRcdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuIFx0XHRcdFx0IWluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkludmFsaWRhdGVkXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG4gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdHBhcmVudHM6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLnBhcmVudHMuc2xpY2UoKSxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aWYgKGhvdFVwZGF0ZU5ld0hhc2ggIT09IHVuZGVmaW5lZCkge1xuIFx0XHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdW5kZWZpbmVkO1xuIFx0XHR9XG4gXHRcdGhvdFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gaXRlbS5wYXJlbnRzO1xuIFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IG1vZHVsZUlkO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRpZiAoaG90UXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG4gXHRcdFx0cmV0dXJuIGhvdEFwcGx5SW50ZXJuYWwob3B0aW9ucykudGhlbihmdW5jdGlvbihsaXN0KSB7XG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbihtb2R1bGVJZCkge1xuIFx0XHRcdFx0XHRpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHR9KTtcbiBcdFx0XHRcdHJldHVybiBsaXN0O1xuIFx0XHRcdH0pO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseUludmFsaWRhdGVkTW9kdWxlcygpIHtcbiBcdFx0aWYgKGhvdFF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuIFx0XHRcdGlmICghaG90VXBkYXRlKSBob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHRob3RRdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChob3RBcHBseUludmFsaWRhdGVkTW9kdWxlKTtcbiBcdFx0XHRob3RRdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSB1bmRlZmluZWQ7XG4gXHRcdFx0cmV0dXJuIHRydWU7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHlJbnZhbGlkYXRlZE1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHRpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIG1vZHVsZUlkKSlcbiBcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9kdWxlc1ttb2R1bGVJZF07XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoNCkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNCk7XG4iLCIvKlxuICBDb3B5cmlnaHQgwqkgMjAxOCBBbmRyZXcgUG93ZWxsXG5cbiAgVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGlzIFNvdXJjZSBDb2RlIEZvcm0uXG4qL1xuY29uc3QgeyBlcnJvciwgaW5mbywgd2FybiB9ID0gY29uc29sZTtcbmNvbnN0IGxvZyA9IHtcbiAgZXJyb3I6IGVycm9yLmJpbmQoY29uc29sZSwgJ+KsoSB3cHM6JyksXG4gIGluZm86IGluZm8uYmluZChjb25zb2xlLCAn4qyhIHdwczonKSxcbiAgcmVmcmVzaDogJ1BsZWFzZSByZWZyZXNoIHRoZSBwYWdlJyxcbiAgd2Fybjogd2Fybi5iaW5kKGNvbnNvbGUsICfirKEgd3BzOicpXG59O1xuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuY29uc3Qgc2lsZW50ID0ge1xuICBlcnJvcjogbm9vcCxcbiAgaW5mbzogbm9vcCxcbiAgd2Fybjogbm9vcFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiAod2luZG93LndlYnBhY2tQbHVnaW5TZXJ2ZS5zaWxlbnQgPyBzaWxlbnQgOiBsb2cpO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIip7bWFyZ2luOjA7cGFkZGluZzowO2JveC1zaXppbmc6Ym9yZGVyLWJveH0qOjpzZWxlY3Rpb257YmFja2dyb3VuZDojZjA2ZDA2NTB9aDJ7Zm9udC13ZWlnaHQ6MzAwfWJvZHl7Zm9udC1mYW1pbHk6Sm9zdCwgJ3NhbnMtc2VyaWYnO2JhY2tncm91bmQ6IzJmMmQyZTtjb2xvcjojZjhmOGY4O21hcmdpbjoxMHB4fSNidXR0b24tY29udGFpbmVye3Bvc2l0aW9uOmZpeGVkO3JpZ2h0OjEwcHg7dG9wOjEwcHg7ei1pbmRleDoxMH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0ODBweCl7I2J1dHRvbi1jb250YWluZXJ7Ym90dG9tOjEwcHg7dG9wOmluaXRpYWw7cG9zaXRpb246Zml4ZWR9fS5idXR0b257YmFja2dyb3VuZDojMDQ4YmE4O3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7Ym9yZGVyLXJhZGl1czo1MCU7ZGlzcGxheTpncmlkO3BsYWNlLWl0ZW1zOmNlbnRlcjtjb2xvcjp3aGl0ZTtjdXJzb3I6cG9pbnRlcjt0cmFuc2l0aW9uOjEwMG1zO21hcmdpbi1ib3R0b206MXJlbX0uYnV0dG9uOmhvdmVye2JhY2tncm91bmQ6IzJlNDA1N30jbm90ZXN7ZGlzcGxheTpibG9jaztjb2x1bW4tY291bnQ6NDtjb2x1bW4tZ2FwOjIwcHg7Y29sdW1uLWZpbGw6YXV0bztjb2x1bW4td2lkdGg6MzAwcHg7aGVpZ2h0OmNhbGMoMTAwdmggLSA0MHB4KTt0cmFuc2l0aW9uOjIwMG1zfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4MHB4KXsjbm90ZXN7Y29sdW1uLWNvdW50OjE7aGVpZ2h0OmluaXRpYWx9fS5ub3Rle2Rpc3BsYXk6ZmxleDtib3JkZXItcmFkaXVzOjVweDtiYWNrZ3JvdW5kOiNmZGYzOGQ7Y29sb3I6IzJmMmQyZTttYXJnaW4tYm90dG9tOjIwcHg7YnJlYWstaW5zaWRlOmF2b2lkfS5ub3RlIC5ub3RlLWhlYWRlcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5ub3RlIC5ub3RlLWhlYWRlciBpe2ZvbnQtc2l6ZToxcmVtO2N1cnNvcjpwb2ludGVyO2NvbG9yOiMyZjJkMmV9Lm5vdGUgLm5vdGUtaGVhZGVyIGgye2ZvbnQtc2l6ZToxcmVtO2ZvbnQtd2VpZ2h0OjMwMH0ubm90ZSAubm90ZS1oZWFkZXIgLm5vdGUtYWN0aW9uc3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyfS5ub3RlIC5ub3RlLWNvbG9yLXNlbGVjdHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3Bvc2l0aW9uOnJlbGF0aXZlO2FsaWduLXNlbGY6ZmxleC1zdGFydH0ubm90ZSAubm90ZS1jb2xvci1zZWxlY3QgdWx7bGlzdC1zdHlsZS10eXBlOm5vbmU7YmFja2dyb3VuZDp3aGl0ZTtwYWRkaW5nOjVweH0ubm90ZSAubm90ZS1jb2xvci1zZWxlY3QgdWwgbGl7aGVpZ2h0OjIwcHg7d2lkdGg6MjBweDtjdXJzb3I6cG9pbnRlcn0ubm90ZS5zb3J0YWJsZS1kcmFne2N1cnNvcjpncmFiYmluZ30ubm90ZS5zb3J0YWJsZS1jaG9zZW57Y3Vyc29yOmdyYWJiaW5nfS5ub3RlLnNvcnRhYmxlLWdob3N0e2N1cnNvcjpncmFiYmluZzt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMCl9LnRyYXNoLWNvbnRhaW5lcntwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwMDtyaWdodDowO3RvcDowO2hlaWdodDoxMDB2aDt3aWR0aDo1MHZ3O2JhY2tncm91bmQ6IzUzNTM1MztvdmVyZmxvdzphdXRvfS50cmFzaC1jb250YWluZXIgI3RyYXNoLWhlYWRlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47cG9zaXRpb246c3RpY2t5O3RvcDowO2JhY2tncm91bmQ6IzUzNTM1MztwYWRkaW5nOjFyZW19LnRyYXNoLWNvbnRhaW5lciB1bHtsaXN0LXN0eWxlLXR5cGU6bm9uZTtwYWRkaW5nOjFyZW19LnRyYXNoLWNvbnRhaW5lciB1bCBsaXtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjMmYyZDJlO3BhZGRpbmc6MXJlbSAwO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9LnRyYXNoLWNvbnRhaW5lciB1bCBsaSAucmVzdG9yZXtjdXJzb3I6cG9pbnRlcn0udHJhc2gtY29udGFpbmVyIHVsIGxpPmRpdjpub3QoLnJlc3RvcmUpe2ZsZXg6MTttYXJnaW4tbGVmdDoxMHB4fS4tLXllbGxvd3tiYWNrZ3JvdW5kOiNmZGYzOGR9Li0tZ3JlZW57YmFja2dyb3VuZDojYWZmZmE3fS4tLXBpbmt7YmFja2dyb3VuZDojZWFiNGZmfS4tLXJlZHtiYWNrZ3JvdW5kOiNmZjk2OTZ9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8qXG4gIENvcHlyaWdodCDCqSAyMDE4IEFuZHJldyBQb3dlbGxcblxuICBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbiAgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoaXMgU291cmNlIENvZGUgRm9ybS5cbiovXG5jb25zdCBhZGRIdG1sID0gKGh0bWwsIHBhcmVudCkgPT4ge1xuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3Qgbm9kZXMgPSBbXTtcblxuICBkaXYuaW5uZXJIVE1MID0gaHRtbC50cmltKCk7XG5cbiAgd2hpbGUgKGRpdi5maXJzdENoaWxkKSB7XG4gICAgbm9kZXMucHVzaCgocGFyZW50IHx8IGRvY3VtZW50LmJvZHkpLmFwcGVuZENoaWxkKGRpdi5maXJzdENoaWxkKSk7XG4gIH1cblxuICByZXR1cm4gbm9kZXM7XG59O1xuXG5jb25zdCBhZGRDc3MgPSAoY3NzKSA9PiB7XG4gIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICBpZiAoY3NzLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cblxuICAvLyBhcHBlbmQgdGhlIHN0eWxlc2hlZXQgZm9yIHRoZSBzdmdcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG59O1xuXG5jb25zdCBzb2NrZXRNZXNzYWdlID0gKHNvY2tldCwgaGFuZGxlcikgPT4ge1xuICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3QgeyBhY3Rpb24sIGRhdGEgPSB7fSB9ID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuICAgIGhhbmRsZXIoYWN0aW9uLCBkYXRhKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgYWRkQ3NzLCBhZGRIdG1sLCBzb2NrZXRNZXNzYWdlIH07XG4iLCIvLyBUaGlzIGZpbGUgaGFzIGJlZW4gZ2VuZXJhdGVkIGZyb20gbXVzdGFjaGUubWpzXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLk11c3RhY2hlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qIVxuICAgKiBtdXN0YWNoZS5qcyAtIExvZ2ljLWxlc3Mge3ttdXN0YWNoZX19IHRlbXBsYXRlcyB3aXRoIEphdmFTY3JpcHRcbiAgICogaHR0cDovL2dpdGh1Yi5jb20vamFubC9tdXN0YWNoZS5qc1xuICAgKi9cblxuICB2YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheVBvbHlmaWxsIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGlzRnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vcmUgY29ycmVjdCB0eXBlb2Ygc3RyaW5nIGhhbmRsaW5nIGFycmF5XG4gICAqIHdoaWNoIG5vcm1hbGx5IHJldHVybnMgdHlwZW9mICdvYmplY3QnXG4gICAqL1xuICBmdW5jdGlvbiB0eXBlU3RyIChvYmopIHtcbiAgICByZXR1cm4gaXNBcnJheShvYmopID8gJ2FycmF5JyA6IHR5cGVvZiBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAgKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csICdcXFxcJCYnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOdWxsIHNhZmUgd2F5IG9mIGNoZWNraW5nIHdoZXRoZXIgb3Igbm90IGFuIG9iamVjdCxcbiAgICogaW5jbHVkaW5nIGl0cyBwcm90b3R5cGUsIGhhcyBhIGdpdmVuIHByb3BlcnR5XG4gICAqL1xuICBmdW5jdGlvbiBoYXNQcm9wZXJ0eSAob2JqLCBwcm9wTmFtZSkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAocHJvcE5hbWUgaW4gb2JqKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYWZlIHdheSBvZiBkZXRlY3Rpbmcgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIHRoaW5nIGlzIGEgcHJpbWl0aXZlIGFuZFxuICAgKiB3aGV0aGVyIGl0IGhhcyB0aGUgZ2l2ZW4gcHJvcGVydHlcbiAgICovXG4gIGZ1bmN0aW9uIHByaW1pdGl2ZUhhc093blByb3BlcnR5IChwcmltaXRpdmUsIHByb3BOYW1lKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHByaW1pdGl2ZSAhPSBudWxsXG4gICAgICAmJiB0eXBlb2YgcHJpbWl0aXZlICE9PSAnb2JqZWN0J1xuICAgICAgJiYgcHJpbWl0aXZlLmhhc093blByb3BlcnR5XG4gICAgICAmJiBwcmltaXRpdmUuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpXG4gICAgKTtcbiAgfVxuXG4gIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9icm93c2UvQ09VQ0hEQi01NzdcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYW5sL211c3RhY2hlLmpzL2lzc3Vlcy8xODlcbiAgdmFyIHJlZ0V4cFRlc3QgPSBSZWdFeHAucHJvdG90eXBlLnRlc3Q7XG4gIGZ1bmN0aW9uIHRlc3RSZWdFeHAgKHJlLCBzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVnRXhwVGVzdC5jYWxsKHJlLCBzdHJpbmcpO1xuICB9XG5cbiAgdmFyIG5vblNwYWNlUmUgPSAvXFxTLztcbiAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChzdHJpbmcpIHtcbiAgICByZXR1cm4gIXRlc3RSZWdFeHAobm9uU3BhY2VSZSwgc3RyaW5nKTtcbiAgfVxuXG4gIHZhciBlbnRpdHlNYXAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgICcvJzogJyYjeDJGOycsXG4gICAgJ2AnOiAnJiN4NjA7JyxcbiAgICAnPSc6ICcmI3gzRDsnXG4gIH07XG5cbiAgZnVuY3Rpb24gZXNjYXBlSHRtbCAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UoL1smPD5cIidgPVxcL10vZywgZnVuY3Rpb24gZnJvbUVudGl0eU1hcCAocykge1xuICAgICAgcmV0dXJuIGVudGl0eU1hcFtzXTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciB3aGl0ZVJlID0gL1xccyovO1xuICB2YXIgc3BhY2VSZSA9IC9cXHMrLztcbiAgdmFyIGVxdWFsc1JlID0gL1xccyo9LztcbiAgdmFyIGN1cmx5UmUgPSAvXFxzKlxcfS87XG4gIHZhciB0YWdSZSA9IC8jfFxcXnxcXC98PnxcXHt8Jnw9fCEvO1xuXG4gIC8qKlxuICAgKiBCcmVha3MgdXAgdGhlIGdpdmVuIGB0ZW1wbGF0ZWAgc3RyaW5nIGludG8gYSB0cmVlIG9mIHRva2Vucy4gSWYgdGhlIGB0YWdzYFxuICAgKiBhcmd1bWVudCBpcyBnaXZlbiBoZXJlIGl0IG11c3QgYmUgYW4gYXJyYXkgd2l0aCB0d28gc3RyaW5nIHZhbHVlczogdGhlXG4gICAqIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncyB1c2VkIGluIHRoZSB0ZW1wbGF0ZSAoZS5nLiBbIFwiPCVcIiwgXCIlPlwiIF0pLiBPZlxuICAgKiBjb3Vyc2UsIHRoZSBkZWZhdWx0IGlzIHRvIHVzZSBtdXN0YWNoZXMgKGkuZS4gbXVzdGFjaGUudGFncykuXG4gICAqXG4gICAqIEEgdG9rZW4gaXMgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCA0IGVsZW1lbnRzLiBUaGUgZmlyc3QgZWxlbWVudCBpcyB0aGVcbiAgICogbXVzdGFjaGUgc3ltYm9sIHRoYXQgd2FzIHVzZWQgaW5zaWRlIHRoZSB0YWcsIGUuZy4gXCIjXCIgb3IgXCImXCIuIElmIHRoZSB0YWdcbiAgICogZGlkIG5vdCBjb250YWluIGEgc3ltYm9sIChpLmUuIHt7bXlWYWx1ZX19KSB0aGlzIGVsZW1lbnQgaXMgXCJuYW1lXCIuIEZvclxuICAgKiBhbGwgdGV4dCB0aGF0IGFwcGVhcnMgb3V0c2lkZSBhIHN5bWJvbCB0aGlzIGVsZW1lbnQgaXMgXCJ0ZXh0XCIuXG4gICAqXG4gICAqIFRoZSBzZWNvbmQgZWxlbWVudCBvZiBhIHRva2VuIGlzIGl0cyBcInZhbHVlXCIuIEZvciBtdXN0YWNoZSB0YWdzIHRoaXMgaXNcbiAgICogd2hhdGV2ZXIgZWxzZSB3YXMgaW5zaWRlIHRoZSB0YWcgYmVzaWRlcyB0aGUgb3BlbmluZyBzeW1ib2wuIEZvciB0ZXh0IHRva2Vuc1xuICAgKiB0aGlzIGlzIHRoZSB0ZXh0IGl0c2VsZi5cbiAgICpcbiAgICogVGhlIHRoaXJkIGFuZCBmb3VydGggZWxlbWVudHMgb2YgdGhlIHRva2VuIGFyZSB0aGUgc3RhcnQgYW5kIGVuZCBpbmRpY2VzLFxuICAgKiByZXNwZWN0aXZlbHksIG9mIHRoZSB0b2tlbiBpbiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUuXG4gICAqXG4gICAqIFRva2VucyB0aGF0IGFyZSB0aGUgcm9vdCBub2RlIG9mIGEgc3VidHJlZSBjb250YWluIHR3byBtb3JlIGVsZW1lbnRzOiAxKSBhblxuICAgKiBhcnJheSBvZiB0b2tlbnMgaW4gdGhlIHN1YnRyZWUgYW5kIDIpIHRoZSBpbmRleCBpbiB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgYXRcbiAgICogd2hpY2ggdGhlIGNsb3NpbmcgdGFnIGZvciB0aGF0IHNlY3Rpb24gYmVnaW5zLlxuICAgKlxuICAgKiBUb2tlbnMgZm9yIHBhcnRpYWxzIGFsc28gY29udGFpbiB0d28gbW9yZSBlbGVtZW50czogMSkgYSBzdHJpbmcgdmFsdWUgb2ZcbiAgICogaW5kZW5kYXRpb24gcHJpb3IgdG8gdGhhdCB0YWcgYW5kIDIpIHRoZSBpbmRleCBvZiB0aGF0IHRhZyBvbiB0aGF0IGxpbmUgLVxuICAgKiBlZyBhIHZhbHVlIG9mIDIgaW5kaWNhdGVzIHRoZSBwYXJ0aWFsIGlzIHRoZSB0aGlyZCB0YWcgb24gdGhpcyBsaW5lLlxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZSAodGVtcGxhdGUsIHRhZ3MpIHtcbiAgICBpZiAoIXRlbXBsYXRlKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIHZhciBsaW5lSGFzTm9uU3BhY2UgPSBmYWxzZTtcbiAgICB2YXIgc2VjdGlvbnMgPSBbXTsgICAgIC8vIFN0YWNrIHRvIGhvbGQgc2VjdGlvbiB0b2tlbnNcbiAgICB2YXIgdG9rZW5zID0gW107ICAgICAgIC8vIEJ1ZmZlciB0byBob2xkIHRoZSB0b2tlbnNcbiAgICB2YXIgc3BhY2VzID0gW107ICAgICAgIC8vIEluZGljZXMgb2Ygd2hpdGVzcGFjZSB0b2tlbnMgb24gdGhlIGN1cnJlbnQgbGluZVxuICAgIHZhciBoYXNUYWcgPSBmYWxzZTsgICAgLy8gSXMgdGhlcmUgYSB7e3RhZ319IG9uIHRoZSBjdXJyZW50IGxpbmU/XG4gICAgdmFyIG5vblNwYWNlID0gZmFsc2U7ICAvLyBJcyB0aGVyZSBhIG5vbi1zcGFjZSBjaGFyIG9uIHRoZSBjdXJyZW50IGxpbmU/XG4gICAgdmFyIGluZGVudGF0aW9uID0gJyc7ICAvLyBUcmFja3MgaW5kZW50YXRpb24gZm9yIHRhZ3MgdGhhdCB1c2UgaXRcbiAgICB2YXIgdGFnSW5kZXggPSAwOyAgICAgIC8vIFN0b3JlcyBhIGNvdW50IG9mIG51bWJlciBvZiB0YWdzIGVuY291bnRlcmVkIG9uIGEgbGluZVxuXG4gICAgLy8gU3RyaXBzIGFsbCB3aGl0ZXNwYWNlIHRva2VucyBhcnJheSBmb3IgdGhlIGN1cnJlbnQgbGluZVxuICAgIC8vIGlmIHRoZXJlIHdhcyBhIHt7I3RhZ319IG9uIGl0IGFuZCBvdGhlcndpc2Ugb25seSBzcGFjZS5cbiAgICBmdW5jdGlvbiBzdHJpcFNwYWNlICgpIHtcbiAgICAgIGlmIChoYXNUYWcgJiYgIW5vblNwYWNlKSB7XG4gICAgICAgIHdoaWxlIChzcGFjZXMubGVuZ3RoKVxuICAgICAgICAgIGRlbGV0ZSB0b2tlbnNbc3BhY2VzLnBvcCgpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwYWNlcyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBoYXNUYWcgPSBmYWxzZTtcbiAgICAgIG5vblNwYWNlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIG9wZW5pbmdUYWdSZSwgY2xvc2luZ1RhZ1JlLCBjbG9zaW5nQ3VybHlSZTtcbiAgICBmdW5jdGlvbiBjb21waWxlVGFncyAodGFnc1RvQ29tcGlsZSkge1xuICAgICAgaWYgKHR5cGVvZiB0YWdzVG9Db21waWxlID09PSAnc3RyaW5nJylcbiAgICAgICAgdGFnc1RvQ29tcGlsZSA9IHRhZ3NUb0NvbXBpbGUuc3BsaXQoc3BhY2VSZSwgMik7XG5cbiAgICAgIGlmICghaXNBcnJheSh0YWdzVG9Db21waWxlKSB8fCB0YWdzVG9Db21waWxlLmxlbmd0aCAhPT0gMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRhZ3M6ICcgKyB0YWdzVG9Db21waWxlKTtcblxuICAgICAgb3BlbmluZ1RhZ1JlID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAodGFnc1RvQ29tcGlsZVswXSkgKyAnXFxcXHMqJyk7XG4gICAgICBjbG9zaW5nVGFnUmUgPSBuZXcgUmVnRXhwKCdcXFxccyonICsgZXNjYXBlUmVnRXhwKHRhZ3NUb0NvbXBpbGVbMV0pKTtcbiAgICAgIGNsb3NpbmdDdXJseVJlID0gbmV3IFJlZ0V4cCgnXFxcXHMqJyArIGVzY2FwZVJlZ0V4cCgnfScgKyB0YWdzVG9Db21waWxlWzFdKSk7XG4gICAgfVxuXG4gICAgY29tcGlsZVRhZ3ModGFncyB8fCBtdXN0YWNoZS50YWdzKTtcblxuICAgIHZhciBzY2FubmVyID0gbmV3IFNjYW5uZXIodGVtcGxhdGUpO1xuXG4gICAgdmFyIHN0YXJ0LCB0eXBlLCB2YWx1ZSwgY2hyLCB0b2tlbiwgb3BlblNlY3Rpb247XG4gICAgd2hpbGUgKCFzY2FubmVyLmVvcygpKSB7XG4gICAgICBzdGFydCA9IHNjYW5uZXIucG9zO1xuXG4gICAgICAvLyBNYXRjaCBhbnkgdGV4dCBiZXR3ZWVuIHRhZ3MuXG4gICAgICB2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKG9wZW5pbmdUYWdSZSk7XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGkgPCB2YWx1ZUxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2hyID0gdmFsdWUuY2hhckF0KGkpO1xuXG4gICAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjaHIpKSB7XG4gICAgICAgICAgICBzcGFjZXMucHVzaCh0b2tlbnMubGVuZ3RoKTtcbiAgICAgICAgICAgIGluZGVudGF0aW9uICs9IGNocjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9uU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgbGluZUhhc05vblNwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGluZGVudGF0aW9uICs9ICcgJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0b2tlbnMucHVzaChbICd0ZXh0JywgY2hyLCBzdGFydCwgc3RhcnQgKyAxIF0pO1xuICAgICAgICAgIHN0YXJ0ICs9IDE7XG5cbiAgICAgICAgICAvLyBDaGVjayBmb3Igd2hpdGVzcGFjZSBvbiB0aGUgY3VycmVudCBsaW5lLlxuICAgICAgICAgIGlmIChjaHIgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICBzdHJpcFNwYWNlKCk7XG4gICAgICAgICAgICBpbmRlbnRhdGlvbiA9ICcnO1xuICAgICAgICAgICAgdGFnSW5kZXggPSAwO1xuICAgICAgICAgICAgbGluZUhhc05vblNwYWNlID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE1hdGNoIHRoZSBvcGVuaW5nIHRhZy5cbiAgICAgIGlmICghc2Nhbm5lci5zY2FuKG9wZW5pbmdUYWdSZSkpXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBoYXNUYWcgPSB0cnVlO1xuXG4gICAgICAvLyBHZXQgdGhlIHRhZyB0eXBlLlxuICAgICAgdHlwZSA9IHNjYW5uZXIuc2Nhbih0YWdSZSkgfHwgJ25hbWUnO1xuICAgICAgc2Nhbm5lci5zY2FuKHdoaXRlUmUpO1xuXG4gICAgICAvLyBHZXQgdGhlIHRhZyB2YWx1ZS5cbiAgICAgIGlmICh0eXBlID09PSAnPScpIHtcbiAgICAgICAgdmFsdWUgPSBzY2FubmVyLnNjYW5VbnRpbChlcXVhbHNSZSk7XG4gICAgICAgIHNjYW5uZXIuc2NhbihlcXVhbHNSZSk7XG4gICAgICAgIHNjYW5uZXIuc2NhblVudGlsKGNsb3NpbmdUYWdSZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd7Jykge1xuICAgICAgICB2YWx1ZSA9IHNjYW5uZXIuc2NhblVudGlsKGNsb3NpbmdDdXJseVJlKTtcbiAgICAgICAgc2Nhbm5lci5zY2FuKGN1cmx5UmUpO1xuICAgICAgICBzY2FubmVyLnNjYW5VbnRpbChjbG9zaW5nVGFnUmUpO1xuICAgICAgICB0eXBlID0gJyYnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBzY2FubmVyLnNjYW5VbnRpbChjbG9zaW5nVGFnUmUpO1xuICAgICAgfVxuXG4gICAgICAvLyBNYXRjaCB0aGUgY2xvc2luZyB0YWcuXG4gICAgICBpZiAoIXNjYW5uZXIuc2NhbihjbG9zaW5nVGFnUmUpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuY2xvc2VkIHRhZyBhdCAnICsgc2Nhbm5lci5wb3MpO1xuXG4gICAgICBpZiAodHlwZSA9PSAnPicpIHtcbiAgICAgICAgdG9rZW4gPSBbIHR5cGUsIHZhbHVlLCBzdGFydCwgc2Nhbm5lci5wb3MsIGluZGVudGF0aW9uLCB0YWdJbmRleCwgbGluZUhhc05vblNwYWNlIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2tlbiA9IFsgdHlwZSwgdmFsdWUsIHN0YXJ0LCBzY2FubmVyLnBvcyBdO1xuICAgICAgfVxuICAgICAgdGFnSW5kZXgrKztcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcblxuICAgICAgaWYgKHR5cGUgPT09ICcjJyB8fCB0eXBlID09PSAnXicpIHtcbiAgICAgICAgc2VjdGlvbnMucHVzaCh0b2tlbik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICcvJykge1xuICAgICAgICAvLyBDaGVjayBzZWN0aW9uIG5lc3RpbmcuXG4gICAgICAgIG9wZW5TZWN0aW9uID0gc2VjdGlvbnMucG9wKCk7XG5cbiAgICAgICAgaWYgKCFvcGVuU2VjdGlvbilcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vub3BlbmVkIHNlY3Rpb24gXCInICsgdmFsdWUgKyAnXCIgYXQgJyArIHN0YXJ0KTtcblxuICAgICAgICBpZiAob3BlblNlY3Rpb25bMV0gIT09IHZhbHVlKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5jbG9zZWQgc2VjdGlvbiBcIicgKyBvcGVuU2VjdGlvblsxXSArICdcIiBhdCAnICsgc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbmFtZScgfHwgdHlwZSA9PT0gJ3snIHx8IHR5cGUgPT09ICcmJykge1xuICAgICAgICBub25TcGFjZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICc9Jykge1xuICAgICAgICAvLyBTZXQgdGhlIHRhZ3MgZm9yIHRoZSBuZXh0IHRpbWUgYXJvdW5kLlxuICAgICAgICBjb21waWxlVGFncyh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RyaXBTcGFjZSgpO1xuXG4gICAgLy8gTWFrZSBzdXJlIHRoZXJlIGFyZSBubyBvcGVuIHNlY3Rpb25zIHdoZW4gd2UncmUgZG9uZS5cbiAgICBvcGVuU2VjdGlvbiA9IHNlY3Rpb25zLnBvcCgpO1xuXG4gICAgaWYgKG9wZW5TZWN0aW9uKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmNsb3NlZCBzZWN0aW9uIFwiJyArIG9wZW5TZWN0aW9uWzFdICsgJ1wiIGF0ICcgKyBzY2FubmVyLnBvcyk7XG5cbiAgICByZXR1cm4gbmVzdFRva2VucyhzcXVhc2hUb2tlbnModG9rZW5zKSk7XG4gIH1cblxuICAvKipcbiAgICogQ29tYmluZXMgdGhlIHZhbHVlcyBvZiBjb25zZWN1dGl2ZSB0ZXh0IHRva2VucyBpbiB0aGUgZ2l2ZW4gYHRva2Vuc2AgYXJyYXlcbiAgICogdG8gYSBzaW5nbGUgdG9rZW4uXG4gICAqL1xuICBmdW5jdGlvbiBzcXVhc2hUb2tlbnMgKHRva2Vucykge1xuICAgIHZhciBzcXVhc2hlZFRva2VucyA9IFtdO1xuXG4gICAgdmFyIHRva2VuLCBsYXN0VG9rZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG51bVRva2VucyA9IHRva2Vucy5sZW5ndGg7IGkgPCBudW1Ub2tlbnM7ICsraSkge1xuICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICBpZiAodG9rZW5bMF0gPT09ICd0ZXh0JyAmJiBsYXN0VG9rZW4gJiYgbGFzdFRva2VuWzBdID09PSAndGV4dCcpIHtcbiAgICAgICAgICBsYXN0VG9rZW5bMV0gKz0gdG9rZW5bMV07XG4gICAgICAgICAgbGFzdFRva2VuWzNdID0gdG9rZW5bM107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3F1YXNoZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgbGFzdFRva2VuID0gdG9rZW47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3F1YXNoZWRUb2tlbnM7XG4gIH1cblxuICAvKipcbiAgICogRm9ybXMgdGhlIGdpdmVuIGFycmF5IG9mIGB0b2tlbnNgIGludG8gYSBuZXN0ZWQgdHJlZSBzdHJ1Y3R1cmUgd2hlcmVcbiAgICogdG9rZW5zIHRoYXQgcmVwcmVzZW50IGEgc2VjdGlvbiBoYXZlIHR3byBhZGRpdGlvbmFsIGl0ZW1zOiAxKSBhbiBhcnJheSBvZlxuICAgKiBhbGwgdG9rZW5zIHRoYXQgYXBwZWFyIGluIHRoYXQgc2VjdGlvbiBhbmQgMikgdGhlIGluZGV4IGluIHRoZSBvcmlnaW5hbFxuICAgKiB0ZW1wbGF0ZSB0aGF0IHJlcHJlc2VudHMgdGhlIGVuZCBvZiB0aGF0IHNlY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBuZXN0VG9rZW5zICh0b2tlbnMpIHtcbiAgICB2YXIgbmVzdGVkVG9rZW5zID0gW107XG4gICAgdmFyIGNvbGxlY3RvciA9IG5lc3RlZFRva2VucztcbiAgICB2YXIgc2VjdGlvbnMgPSBbXTtcblxuICAgIHZhciB0b2tlbiwgc2VjdGlvbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbnVtVG9rZW5zID0gdG9rZW5zLmxlbmd0aDsgaSA8IG51bVRva2VuczsgKytpKSB7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgc3dpdGNoICh0b2tlblswXSkge1xuICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgY2FzZSAnXic6XG4gICAgICAgICAgY29sbGVjdG9yLnB1c2godG9rZW4pO1xuICAgICAgICAgIHNlY3Rpb25zLnB1c2godG9rZW4pO1xuICAgICAgICAgIGNvbGxlY3RvciA9IHRva2VuWzRdID0gW107XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJy8nOlxuICAgICAgICAgIHNlY3Rpb24gPSBzZWN0aW9ucy5wb3AoKTtcbiAgICAgICAgICBzZWN0aW9uWzVdID0gdG9rZW5bMl07XG4gICAgICAgICAgY29sbGVjdG9yID0gc2VjdGlvbnMubGVuZ3RoID4gMCA/IHNlY3Rpb25zW3NlY3Rpb25zLmxlbmd0aCAtIDFdWzRdIDogbmVzdGVkVG9rZW5zO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbGxlY3Rvci5wdXNoKHRva2VuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmVzdGVkVG9rZW5zO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc2ltcGxlIHN0cmluZyBzY2FubmVyIHRoYXQgaXMgdXNlZCBieSB0aGUgdGVtcGxhdGUgcGFyc2VyIHRvIGZpbmRcbiAgICogdG9rZW5zIGluIHRlbXBsYXRlIHN0cmluZ3MuXG4gICAqL1xuICBmdW5jdGlvbiBTY2FubmVyIChzdHJpbmcpIHtcbiAgICB0aGlzLnN0cmluZyA9IHN0cmluZztcbiAgICB0aGlzLnRhaWwgPSBzdHJpbmc7XG4gICAgdGhpcy5wb3MgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSB0YWlsIGlzIGVtcHR5IChlbmQgb2Ygc3RyaW5nKS5cbiAgICovXG4gIFNjYW5uZXIucHJvdG90eXBlLmVvcyA9IGZ1bmN0aW9uIGVvcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFpbCA9PT0gJyc7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRyaWVzIHRvIG1hdGNoIHRoZSBnaXZlbiByZWd1bGFyIGV4cHJlc3Npb24gYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAqIFJldHVybnMgdGhlIG1hdGNoZWQgdGV4dCBpZiBpdCBjYW4gbWF0Y2gsIHRoZSBlbXB0eSBzdHJpbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgU2Nhbm5lci5wcm90b3R5cGUuc2NhbiA9IGZ1bmN0aW9uIHNjYW4gKHJlKSB7XG4gICAgdmFyIG1hdGNoID0gdGhpcy50YWlsLm1hdGNoKHJlKTtcblxuICAgIGlmICghbWF0Y2ggfHwgbWF0Y2guaW5kZXggIT09IDApXG4gICAgICByZXR1cm4gJyc7XG5cbiAgICB2YXIgc3RyaW5nID0gbWF0Y2hbMF07XG5cbiAgICB0aGlzLnRhaWwgPSB0aGlzLnRhaWwuc3Vic3RyaW5nKHN0cmluZy5sZW5ndGgpO1xuICAgIHRoaXMucG9zICs9IHN0cmluZy5sZW5ndGg7XG5cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTa2lwcyBhbGwgdGV4dCB1bnRpbCB0aGUgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uIGNhbiBiZSBtYXRjaGVkLiBSZXR1cm5zXG4gICAqIHRoZSBza2lwcGVkIHN0cmluZywgd2hpY2ggaXMgdGhlIGVudGlyZSB0YWlsIGlmIG5vIG1hdGNoIGNhbiBiZSBtYWRlLlxuICAgKi9cbiAgU2Nhbm5lci5wcm90b3R5cGUuc2NhblVudGlsID0gZnVuY3Rpb24gc2NhblVudGlsIChyZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMudGFpbC5zZWFyY2gocmUpLCBtYXRjaDtcblxuICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgIGNhc2UgLTE6XG4gICAgICAgIG1hdGNoID0gdGhpcy50YWlsO1xuICAgICAgICB0aGlzLnRhaWwgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIG1hdGNoID0gJyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbWF0Y2ggPSB0aGlzLnRhaWwuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgICAgICAgdGhpcy50YWlsID0gdGhpcy50YWlsLnN1YnN0cmluZyhpbmRleCk7XG4gICAgfVxuXG4gICAgdGhpcy5wb3MgKz0gbWF0Y2gubGVuZ3RoO1xuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIGEgcmVuZGVyaW5nIGNvbnRleHQgYnkgd3JhcHBpbmcgYSB2aWV3IG9iamVjdCBhbmRcbiAgICogbWFpbnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBjb250ZXh0LlxuICAgKi9cbiAgZnVuY3Rpb24gQ29udGV4dCAodmlldywgcGFyZW50Q29udGV4dCkge1xuICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgdGhpcy5jYWNoZSA9IHsgJy4nOiB0aGlzLnZpZXcgfTtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudENvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBjb250ZXh0IHVzaW5nIHRoZSBnaXZlbiB2aWV3IHdpdGggdGhpcyBjb250ZXh0XG4gICAqIGFzIHRoZSBwYXJlbnQuXG4gICAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAodmlldykge1xuICAgIHJldHVybiBuZXcgQ29udGV4dCh2aWV3LCB0aGlzKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIG5hbWUgaW4gdGhpcyBjb250ZXh0LCB0cmF2ZXJzaW5nXG4gICAqIHVwIHRoZSBjb250ZXh0IGhpZXJhcmNoeSBpZiB0aGUgdmFsdWUgaXMgYWJzZW50IGluIHRoaXMgY29udGV4dCdzIHZpZXcuXG4gICAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5sb29rdXAgPSBmdW5jdGlvbiBsb29rdXAgKG5hbWUpIHtcbiAgICB2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG4gICAgdmFyIHZhbHVlO1xuICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgdmFsdWUgPSBjYWNoZVtuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBpbnRlcm1lZGlhdGVWYWx1ZSwgbmFtZXMsIGluZGV4LCBsb29rdXBIaXQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignLicpID4gMCkge1xuICAgICAgICAgIGludGVybWVkaWF0ZVZhbHVlID0gY29udGV4dC52aWV3O1xuICAgICAgICAgIG5hbWVzID0gbmFtZS5zcGxpdCgnLicpO1xuICAgICAgICAgIGluZGV4ID0gMDtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFVzaW5nIHRoZSBkb3Qgbm90aW9uIHBhdGggaW4gYG5hbWVgLCB3ZSBkZXNjZW5kIHRocm91Z2ggdGhlXG4gICAgICAgICAgICogbmVzdGVkIG9iamVjdHMuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBUbyBiZSBjZXJ0YWluIHRoYXQgdGhlIGxvb2t1cCBoYXMgYmVlbiBzdWNjZXNzZnVsLCB3ZSBoYXZlIHRvXG4gICAgICAgICAgICogY2hlY2sgaWYgdGhlIGxhc3Qgb2JqZWN0IGluIHRoZSBwYXRoIGFjdHVhbGx5IGhhcyB0aGUgcHJvcGVydHlcbiAgICAgICAgICAgKiB3ZSBhcmUgbG9va2luZyBmb3IuIFdlIHN0b3JlIHRoZSByZXN1bHQgaW4gYGxvb2t1cEhpdGAuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBUaGlzIGlzIHNwZWNpYWxseSBuZWNlc3NhcnkgZm9yIHdoZW4gdGhlIHZhbHVlIGhhcyBiZWVuIHNldCB0b1xuICAgICAgICAgICAqIGB1bmRlZmluZWRgIGFuZCB3ZSB3YW50IHRvIGF2b2lkIGxvb2tpbmcgdXAgcGFyZW50IGNvbnRleHRzLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogSW4gdGhlIGNhc2Ugd2hlcmUgZG90IG5vdGF0aW9uIGlzIHVzZWQsIHdlIGNvbnNpZGVyIHRoZSBsb29rdXBcbiAgICAgICAgICAgKiB0byBiZSBzdWNjZXNzZnVsIGV2ZW4gaWYgdGhlIGxhc3QgXCJvYmplY3RcIiBpbiB0aGUgcGF0aCBpc1xuICAgICAgICAgICAqIG5vdCBhY3R1YWxseSBhbiBvYmplY3QgYnV0IGEgcHJpbWl0aXZlIChlLmcuLCBhIHN0cmluZywgb3IgYW5cbiAgICAgICAgICAgKiBpbnRlZ2VyKSwgYmVjYXVzZSBpdCBpcyBzb21ldGltZXMgdXNlZnVsIHRvIGFjY2VzcyBhIHByb3BlcnR5XG4gICAgICAgICAgICogb2YgYW4gYXV0b2JveGVkIHByaW1pdGl2ZSwgc3VjaCBhcyB0aGUgbGVuZ3RoIG9mIGEgc3RyaW5nLlxuICAgICAgICAgICAqKi9cbiAgICAgICAgICB3aGlsZSAoaW50ZXJtZWRpYXRlVmFsdWUgIT0gbnVsbCAmJiBpbmRleCA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSBuYW1lcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICBsb29rdXBIaXQgPSAoXG4gICAgICAgICAgICAgICAgaGFzUHJvcGVydHkoaW50ZXJtZWRpYXRlVmFsdWUsIG5hbWVzW2luZGV4XSlcbiAgICAgICAgICAgICAgICB8fCBwcmltaXRpdmVIYXNPd25Qcm9wZXJ0eShpbnRlcm1lZGlhdGVWYWx1ZSwgbmFtZXNbaW5kZXhdKVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpbnRlcm1lZGlhdGVWYWx1ZSA9IGludGVybWVkaWF0ZVZhbHVlW25hbWVzW2luZGV4KytdXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJtZWRpYXRlVmFsdWUgPSBjb250ZXh0LnZpZXdbbmFtZV07XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBPbmx5IGNoZWNraW5nIGFnYWluc3QgYGhhc1Byb3BlcnR5YCwgd2hpY2ggYWx3YXlzIHJldHVybnMgYGZhbHNlYCBpZlxuICAgICAgICAgICAqIGBjb250ZXh0LnZpZXdgIGlzIG5vdCBhbiBvYmplY3QuIERlbGliZXJhdGVseSBvbWl0dGluZyB0aGUgY2hlY2tcbiAgICAgICAgICAgKiBhZ2FpbnN0IGBwcmltaXRpdmVIYXNPd25Qcm9wZXJ0eWAgaWYgZG90IG5vdGF0aW9uIGlzIG5vdCB1c2VkLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQ29uc2lkZXIgdGhpcyBleGFtcGxlOlxuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqIE11c3RhY2hlLnJlbmRlcihcIlRoZSBsZW5ndGggb2YgYSBmb290YmFsbCBmaWVsZCBpcyB7eyNsZW5ndGh9fXt7bGVuZ3RofX17ey9sZW5ndGh9fS5cIiwge2xlbmd0aDogXCIxMDAgeWFyZHNcIn0pXG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBJZiB3ZSB3ZXJlIHRvIGNoZWNrIGFsc28gYWdhaW5zdCBgcHJpbWl0aXZlSGFzT3duUHJvcGVydHlgLCBhcyB3ZSBkb1xuICAgICAgICAgICAqIGluIHRoZSBkb3Qgbm90YXRpb24gY2FzZSwgdGhlbiByZW5kZXIgY2FsbCB3b3VsZCByZXR1cm46XG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBcIlRoZSBsZW5ndGggb2YgYSBmb290YmFsbCBmaWVsZCBpcyA5LlwiXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiByYXRoZXIgdGhhbiB0aGUgZXhwZWN0ZWQ6XG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBcIlRoZSBsZW5ndGggb2YgYSBmb290YmFsbCBmaWVsZCBpcyAxMDAgeWFyZHMuXCJcbiAgICAgICAgICAgKiovXG4gICAgICAgICAgbG9va3VwSGl0ID0gaGFzUHJvcGVydHkoY29udGV4dC52aWV3LCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb29rdXBIaXQpIHtcbiAgICAgICAgICB2YWx1ZSA9IGludGVybWVkaWF0ZVZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQucGFyZW50O1xuICAgICAgfVxuXG4gICAgICBjYWNoZVtuYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSlcbiAgICAgIHZhbHVlID0gdmFsdWUuY2FsbCh0aGlzLnZpZXcpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIFdyaXRlciBrbm93cyBob3cgdG8gdGFrZSBhIHN0cmVhbSBvZiB0b2tlbnMgYW5kIHJlbmRlciB0aGVtIHRvIGFcbiAgICogc3RyaW5nLCBnaXZlbiBhIGNvbnRleHQuIEl0IGFsc28gbWFpbnRhaW5zIGEgY2FjaGUgb2YgdGVtcGxhdGVzIHRvXG4gICAqIGF2b2lkIHRoZSBuZWVkIHRvIHBhcnNlIHRoZSBzYW1lIHRlbXBsYXRlIHR3aWNlLlxuICAgKi9cbiAgZnVuY3Rpb24gV3JpdGVyICgpIHtcbiAgICB0aGlzLnRlbXBsYXRlQ2FjaGUgPSB7XG4gICAgICBfY2FjaGU6IHt9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fY2FjaGVba2V5XSA9IHZhbHVlO1xuICAgICAgfSxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlW2tleV07XG4gICAgICB9LFxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbGwgY2FjaGVkIHRlbXBsYXRlcyBpbiB0aGlzIHdyaXRlci5cbiAgICovXG4gIFdyaXRlci5wcm90b3R5cGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uIGNsZWFyQ2FjaGUgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy50ZW1wbGF0ZUNhY2hlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy50ZW1wbGF0ZUNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBQYXJzZXMgYW5kIGNhY2hlcyB0aGUgZ2l2ZW4gYHRlbXBsYXRlYCBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIGB0YWdzYCBvclxuICAgKiBgbXVzdGFjaGUudGFnc2AgaWYgYHRhZ3NgIGlzIG9taXR0ZWQsICBhbmQgcmV0dXJucyB0aGUgYXJyYXkgb2YgdG9rZW5zXG4gICAqIHRoYXQgaXMgZ2VuZXJhdGVkIGZyb20gdGhlIHBhcnNlLlxuICAgKi9cbiAgV3JpdGVyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlICh0ZW1wbGF0ZSwgdGFncykge1xuICAgIHZhciBjYWNoZSA9IHRoaXMudGVtcGxhdGVDYWNoZTtcbiAgICB2YXIgY2FjaGVLZXkgPSB0ZW1wbGF0ZSArICc6JyArICh0YWdzIHx8IG11c3RhY2hlLnRhZ3MpLmpvaW4oJzonKTtcbiAgICB2YXIgaXNDYWNoZUVuYWJsZWQgPSB0eXBlb2YgY2FjaGUgIT09ICd1bmRlZmluZWQnO1xuICAgIHZhciB0b2tlbnMgPSBpc0NhY2hlRW5hYmxlZCA/IGNhY2hlLmdldChjYWNoZUtleSkgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAodG9rZW5zID09IHVuZGVmaW5lZCkge1xuICAgICAgdG9rZW5zID0gcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGFncyk7XG4gICAgICBpc0NhY2hlRW5hYmxlZCAmJiBjYWNoZS5zZXQoY2FjaGVLZXksIHRva2Vucyk7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbnM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZ2gtbGV2ZWwgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byByZW5kZXIgdGhlIGdpdmVuIGB0ZW1wbGF0ZWAgd2l0aFxuICAgKiB0aGUgZ2l2ZW4gYHZpZXdgLlxuICAgKlxuICAgKiBUaGUgb3B0aW9uYWwgYHBhcnRpYWxzYCBhcmd1bWVudCBtYXkgYmUgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlXG4gICAqIG5hbWVzIGFuZCB0ZW1wbGF0ZXMgb2YgcGFydGlhbHMgdGhhdCBhcmUgdXNlZCBpbiB0aGUgdGVtcGxhdGUuIEl0IG1heVxuICAgKiBhbHNvIGJlIGEgZnVuY3Rpb24gdGhhdCBpcyB1c2VkIHRvIGxvYWQgcGFydGlhbCB0ZW1wbGF0ZXMgb24gdGhlIGZseVxuICAgKiB0aGF0IHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50OiB0aGUgbmFtZSBvZiB0aGUgcGFydGlhbC5cbiAgICpcbiAgICogSWYgdGhlIG9wdGlvbmFsIGB0YWdzYCBhcmd1bWVudCBpcyBnaXZlbiBoZXJlIGl0IG11c3QgYmUgYW4gYXJyYXkgd2l0aCB0d29cbiAgICogc3RyaW5nIHZhbHVlczogdGhlIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncyB1c2VkIGluIHRoZSB0ZW1wbGF0ZSAoZS5nLlxuICAgKiBbIFwiPCVcIiwgXCIlPlwiIF0pLiBUaGUgZGVmYXVsdCBpcyB0byBtdXN0YWNoZS50YWdzLlxuICAgKi9cbiAgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKHRlbXBsYXRlLCB2aWV3LCBwYXJ0aWFscywgdGFncykge1xuICAgIHZhciB0b2tlbnMgPSB0aGlzLnBhcnNlKHRlbXBsYXRlLCB0YWdzKTtcbiAgICB2YXIgY29udGV4dCA9ICh2aWV3IGluc3RhbmNlb2YgQ29udGV4dCkgPyB2aWV3IDogbmV3IENvbnRleHQodmlldywgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJUb2tlbnModG9rZW5zLCBjb250ZXh0LCBwYXJ0aWFscywgdGVtcGxhdGUsIHRhZ3MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBMb3ctbGV2ZWwgbWV0aG9kIHRoYXQgcmVuZGVycyB0aGUgZ2l2ZW4gYXJyYXkgb2YgYHRva2Vuc2AgdXNpbmdcbiAgICogdGhlIGdpdmVuIGBjb250ZXh0YCBhbmQgYHBhcnRpYWxzYC5cbiAgICpcbiAgICogTm90ZTogVGhlIGBvcmlnaW5hbFRlbXBsYXRlYCBpcyBvbmx5IGV2ZXIgdXNlZCB0byBleHRyYWN0IHRoZSBwb3J0aW9uXG4gICAqIG9mIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjb250YWluZWQgaW4gYSBoaWdoZXItb3JkZXIgc2VjdGlvbi5cbiAgICogSWYgdGhlIHRlbXBsYXRlIGRvZXNuJ3QgdXNlIGhpZ2hlci1vcmRlciBzZWN0aW9ucywgdGhpcyBhcmd1bWVudCBtYXlcbiAgICogYmUgb21pdHRlZC5cbiAgICovXG4gIFdyaXRlci5wcm90b3R5cGUucmVuZGVyVG9rZW5zID0gZnVuY3Rpb24gcmVuZGVyVG9rZW5zICh0b2tlbnMsIGNvbnRleHQsIHBhcnRpYWxzLCBvcmlnaW5hbFRlbXBsYXRlLCB0YWdzKSB7XG4gICAgdmFyIGJ1ZmZlciA9ICcnO1xuXG4gICAgdmFyIHRva2VuLCBzeW1ib2wsIHZhbHVlO1xuICAgIGZvciAodmFyIGkgPSAwLCBudW1Ub2tlbnMgPSB0b2tlbnMubGVuZ3RoOyBpIDwgbnVtVG9rZW5zOyArK2kpIHtcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICBzeW1ib2wgPSB0b2tlblswXTtcblxuICAgICAgaWYgKHN5bWJvbCA9PT0gJyMnKSB2YWx1ZSA9IHRoaXMucmVuZGVyU2VjdGlvbih0b2tlbiwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICAgICAgZWxzZSBpZiAoc3ltYm9sID09PSAnXicpIHZhbHVlID0gdGhpcy5yZW5kZXJJbnZlcnRlZCh0b2tlbiwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICAgICAgZWxzZSBpZiAoc3ltYm9sID09PSAnPicpIHZhbHVlID0gdGhpcy5yZW5kZXJQYXJ0aWFsKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgdGFncyk7XG4gICAgICBlbHNlIGlmIChzeW1ib2wgPT09ICcmJykgdmFsdWUgPSB0aGlzLnVuZXNjYXBlZFZhbHVlKHRva2VuLCBjb250ZXh0KTtcbiAgICAgIGVsc2UgaWYgKHN5bWJvbCA9PT0gJ25hbWUnKSB2YWx1ZSA9IHRoaXMuZXNjYXBlZFZhbHVlKHRva2VuLCBjb250ZXh0KTtcbiAgICAgIGVsc2UgaWYgKHN5bWJvbCA9PT0gJ3RleHQnKSB2YWx1ZSA9IHRoaXMucmF3VmFsdWUodG9rZW4pO1xuXG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgYnVmZmVyICs9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXI7XG4gIH07XG5cbiAgV3JpdGVyLnByb3RvdHlwZS5yZW5kZXJTZWN0aW9uID0gZnVuY3Rpb24gcmVuZGVyU2VjdGlvbiAodG9rZW4sIGNvbnRleHQsIHBhcnRpYWxzLCBvcmlnaW5hbFRlbXBsYXRlKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBidWZmZXIgPSAnJztcbiAgICB2YXIgdmFsdWUgPSBjb250ZXh0Lmxvb2t1cCh0b2tlblsxXSk7XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcmVuZGVyIGFuIGFyYml0cmFyeSB0ZW1wbGF0ZVxuICAgIC8vIGluIHRoZSBjdXJyZW50IGNvbnRleHQgYnkgaGlnaGVyLW9yZGVyIHNlY3Rpb25zLlxuICAgIGZ1bmN0aW9uIHN1YlJlbmRlciAodGVtcGxhdGUpIHtcbiAgICAgIHJldHVybiBzZWxmLnJlbmRlcih0ZW1wbGF0ZSwgY29udGV4dCwgcGFydGlhbHMpO1xuICAgIH1cblxuICAgIGlmICghdmFsdWUpIHJldHVybjtcblxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIHZhbHVlTGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBqIDwgdmFsdWVMZW5ndGg7ICsraikge1xuICAgICAgICBidWZmZXIgKz0gdGhpcy5yZW5kZXJUb2tlbnModG9rZW5bNF0sIGNvbnRleHQucHVzaCh2YWx1ZVtqXSksIHBhcnRpYWxzLCBvcmlnaW5hbFRlbXBsYXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBidWZmZXIgKz0gdGhpcy5yZW5kZXJUb2tlbnModG9rZW5bNF0sIGNvbnRleHQucHVzaCh2YWx1ZSksIHBhcnRpYWxzLCBvcmlnaW5hbFRlbXBsYXRlKTtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICBpZiAodHlwZW9mIG9yaWdpbmFsVGVtcGxhdGUgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB1c2UgaGlnaGVyLW9yZGVyIHNlY3Rpb25zIHdpdGhvdXQgdGhlIG9yaWdpbmFsIHRlbXBsYXRlJyk7XG5cbiAgICAgIC8vIEV4dHJhY3QgdGhlIHBvcnRpb24gb2YgdGhlIG9yaWdpbmFsIHRlbXBsYXRlIHRoYXQgdGhlIHNlY3Rpb24gY29udGFpbnMuXG4gICAgICB2YWx1ZSA9IHZhbHVlLmNhbGwoY29udGV4dC52aWV3LCBvcmlnaW5hbFRlbXBsYXRlLnNsaWNlKHRva2VuWzNdLCB0b2tlbls1XSksIHN1YlJlbmRlcik7XG5cbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKVxuICAgICAgICBidWZmZXIgKz0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciArPSB0aGlzLnJlbmRlclRva2Vucyh0b2tlbls0XSwgY29udGV4dCwgcGFydGlhbHMsIG9yaWdpbmFsVGVtcGxhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9O1xuXG4gIFdyaXRlci5wcm90b3R5cGUucmVuZGVySW52ZXJ0ZWQgPSBmdW5jdGlvbiByZW5kZXJJbnZlcnRlZCAodG9rZW4sIGNvbnRleHQsIHBhcnRpYWxzLCBvcmlnaW5hbFRlbXBsYXRlKSB7XG4gICAgdmFyIHZhbHVlID0gY29udGV4dC5sb29rdXAodG9rZW5bMV0pO1xuXG4gICAgLy8gVXNlIEphdmFTY3JpcHQncyBkZWZpbml0aW9uIG9mIGZhbHN5LiBJbmNsdWRlIGVtcHR5IGFycmF5cy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phbmwvbXVzdGFjaGUuanMvaXNzdWVzLzE4NlxuICAgIGlmICghdmFsdWUgfHwgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkpXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJUb2tlbnModG9rZW5bNF0sIGNvbnRleHQsIHBhcnRpYWxzLCBvcmlnaW5hbFRlbXBsYXRlKTtcbiAgfTtcblxuICBXcml0ZXIucHJvdG90eXBlLmluZGVudFBhcnRpYWwgPSBmdW5jdGlvbiBpbmRlbnRQYXJ0aWFsIChwYXJ0aWFsLCBpbmRlbnRhdGlvbiwgbGluZUhhc05vblNwYWNlKSB7XG4gICAgdmFyIGZpbHRlcmVkSW5kZW50YXRpb24gPSBpbmRlbnRhdGlvbi5yZXBsYWNlKC9bXiBcXHRdL2csICcnKTtcbiAgICB2YXIgcGFydGlhbEJ5TmwgPSBwYXJ0aWFsLnNwbGl0KCdcXG4nKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRpYWxCeU5sLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocGFydGlhbEJ5TmxbaV0ubGVuZ3RoICYmIChpID4gMCB8fCAhbGluZUhhc05vblNwYWNlKSkge1xuICAgICAgICBwYXJ0aWFsQnlObFtpXSA9IGZpbHRlcmVkSW5kZW50YXRpb24gKyBwYXJ0aWFsQnlObFtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnRpYWxCeU5sLmpvaW4oJ1xcbicpO1xuICB9O1xuXG4gIFdyaXRlci5wcm90b3R5cGUucmVuZGVyUGFydGlhbCA9IGZ1bmN0aW9uIHJlbmRlclBhcnRpYWwgKHRva2VuLCBjb250ZXh0LCBwYXJ0aWFscywgdGFncykge1xuICAgIGlmICghcGFydGlhbHMpIHJldHVybjtcblxuICAgIHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24ocGFydGlhbHMpID8gcGFydGlhbHModG9rZW5bMV0pIDogcGFydGlhbHNbdG9rZW5bMV1dO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB2YXIgbGluZUhhc05vblNwYWNlID0gdG9rZW5bNl07XG4gICAgICB2YXIgdGFnSW5kZXggPSB0b2tlbls1XTtcbiAgICAgIHZhciBpbmRlbnRhdGlvbiA9IHRva2VuWzRdO1xuICAgICAgdmFyIGluZGVudGVkVmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0YWdJbmRleCA9PSAwICYmIGluZGVudGF0aW9uKSB7XG4gICAgICAgIGluZGVudGVkVmFsdWUgPSB0aGlzLmluZGVudFBhcnRpYWwodmFsdWUsIGluZGVudGF0aW9uLCBsaW5lSGFzTm9uU3BhY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyVG9rZW5zKHRoaXMucGFyc2UoaW5kZW50ZWRWYWx1ZSwgdGFncyksIGNvbnRleHQsIHBhcnRpYWxzLCBpbmRlbnRlZFZhbHVlLCB0YWdzKTtcbiAgICB9XG4gIH07XG5cbiAgV3JpdGVyLnByb3RvdHlwZS51bmVzY2FwZWRWYWx1ZSA9IGZ1bmN0aW9uIHVuZXNjYXBlZFZhbHVlICh0b2tlbiwgY29udGV4dCkge1xuICAgIHZhciB2YWx1ZSA9IGNvbnRleHQubG9va3VwKHRva2VuWzFdKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbClcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBXcml0ZXIucHJvdG90eXBlLmVzY2FwZWRWYWx1ZSA9IGZ1bmN0aW9uIGVzY2FwZWRWYWx1ZSAodG9rZW4sIGNvbnRleHQpIHtcbiAgICB2YXIgdmFsdWUgPSBjb250ZXh0Lmxvb2t1cCh0b2tlblsxXSk7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpXG4gICAgICByZXR1cm4gbXVzdGFjaGUuZXNjYXBlKHZhbHVlKTtcbiAgfTtcblxuICBXcml0ZXIucHJvdG90eXBlLnJhd1ZhbHVlID0gZnVuY3Rpb24gcmF3VmFsdWUgKHRva2VuKSB7XG4gICAgcmV0dXJuIHRva2VuWzFdO1xuICB9O1xuXG4gIHZhciBtdXN0YWNoZSA9IHtcbiAgICBuYW1lOiAnbXVzdGFjaGUuanMnLFxuICAgIHZlcnNpb246ICc0LjAuMScsXG4gICAgdGFnczogWyAne3snLCAnfX0nIF0sXG4gICAgY2xlYXJDYWNoZTogdW5kZWZpbmVkLFxuICAgIGVzY2FwZTogdW5kZWZpbmVkLFxuICAgIHBhcnNlOiB1bmRlZmluZWQsXG4gICAgcmVuZGVyOiB1bmRlZmluZWQsXG4gICAgU2Nhbm5lcjogdW5kZWZpbmVkLFxuICAgIENvbnRleHQ6IHVuZGVmaW5lZCxcbiAgICBXcml0ZXI6IHVuZGVmaW5lZCxcbiAgICAvKipcbiAgICAgKiBBbGxvd3MgYSB1c2VyIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGNhY2hpbmcgc3RyYXRlZ3ksIGJ5IHByb3ZpZGluZyBhblxuICAgICAqIG9iamVjdCB3aXRoIHNldCwgZ2V0IGFuZCBjbGVhciBtZXRob2RzLiBUaGlzIGNhbiBhbHNvIGJlIHVzZWQgdG8gZGlzYWJsZVxuICAgICAqIHRoZSBjYWNoZSBieSBzZXR0aW5nIGl0IHRvIHRoZSBsaXRlcmFsIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIHNldCB0ZW1wbGF0ZUNhY2hlIChjYWNoZSkge1xuICAgICAgZGVmYXVsdFdyaXRlci50ZW1wbGF0ZUNhY2hlID0gY2FjaGU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkZWZhdWx0IG9yIG92ZXJyaWRkZW4gY2FjaGluZyBvYmplY3QgZnJvbSB0aGUgZGVmYXVsdCB3cml0ZXIuXG4gICAgICovXG4gICAgZ2V0IHRlbXBsYXRlQ2FjaGUgKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRXcml0ZXIudGVtcGxhdGVDYWNoZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQWxsIGhpZ2gtbGV2ZWwgbXVzdGFjaGUuKiBmdW5jdGlvbnMgdXNlIHRoaXMgd3JpdGVyLlxuICB2YXIgZGVmYXVsdFdyaXRlciA9IG5ldyBXcml0ZXIoKTtcblxuICAvKipcbiAgICogQ2xlYXJzIGFsbCBjYWNoZWQgdGVtcGxhdGVzIGluIHRoZSBkZWZhdWx0IHdyaXRlci5cbiAgICovXG4gIG11c3RhY2hlLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiBjbGVhckNhY2hlICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdFdyaXRlci5jbGVhckNhY2hlKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFBhcnNlcyBhbmQgY2FjaGVzIHRoZSBnaXZlbiB0ZW1wbGF0ZSBpbiB0aGUgZGVmYXVsdCB3cml0ZXIgYW5kIHJldHVybnMgdGhlXG4gICAqIGFycmF5IG9mIHRva2VucyBpdCBjb250YWlucy4gRG9pbmcgdGhpcyBhaGVhZCBvZiB0aW1lIGF2b2lkcyB0aGUgbmVlZCB0b1xuICAgKiBwYXJzZSB0ZW1wbGF0ZXMgb24gdGhlIGZseSBhcyB0aGV5IGFyZSByZW5kZXJlZC5cbiAgICovXG4gIG11c3RhY2hlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UgKHRlbXBsYXRlLCB0YWdzKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRXcml0ZXIucGFyc2UodGVtcGxhdGUsIHRhZ3MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBgdGVtcGxhdGVgIHdpdGggdGhlIGdpdmVuIGB2aWV3YCBhbmQgYHBhcnRpYWxzYCB1c2luZyB0aGVcbiAgICogZGVmYXVsdCB3cml0ZXIuIElmIHRoZSBvcHRpb25hbCBgdGFnc2AgYXJndW1lbnQgaXMgZ2l2ZW4gaGVyZSBpdCBtdXN0IGJlIGFuXG4gICAqIGFycmF5IHdpdGggdHdvIHN0cmluZyB2YWx1ZXM6IHRoZSBvcGVuaW5nIGFuZCBjbG9zaW5nIHRhZ3MgdXNlZCBpbiB0aGVcbiAgICogdGVtcGxhdGUgKGUuZy4gWyBcIjwlXCIsIFwiJT5cIiBdKS4gVGhlIGRlZmF1bHQgaXMgdG8gbXVzdGFjaGUudGFncy5cbiAgICovXG4gIG11c3RhY2hlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAodGVtcGxhdGUsIHZpZXcsIHBhcnRpYWxzLCB0YWdzKSB7XG4gICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdGVtcGxhdGUhIFRlbXBsYXRlIHNob3VsZCBiZSBhIFwic3RyaW5nXCIgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdidXQgXCInICsgdHlwZVN0cih0ZW1wbGF0ZSkgKyAnXCIgd2FzIGdpdmVuIGFzIHRoZSBmaXJzdCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyZ3VtZW50IGZvciBtdXN0YWNoZSNyZW5kZXIodGVtcGxhdGUsIHZpZXcsIHBhcnRpYWxzKScpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0V3JpdGVyLnJlbmRlcih0ZW1wbGF0ZSwgdmlldywgcGFydGlhbHMsIHRhZ3MpO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgZXNjYXBpbmcgZnVuY3Rpb24gc28gdGhhdCB0aGUgdXNlciBtYXkgb3ZlcnJpZGUgaXQuXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFubC9tdXN0YWNoZS5qcy9pc3N1ZXMvMjQ0XG4gIG11c3RhY2hlLmVzY2FwZSA9IGVzY2FwZUh0bWw7XG5cbiAgLy8gRXhwb3J0IHRoZXNlIG1haW5seSBmb3IgdGVzdGluZywgYnV0IGFsc28gZm9yIGFkdmFuY2VkIHVzYWdlLlxuICBtdXN0YWNoZS5TY2FubmVyID0gU2Nhbm5lcjtcbiAgbXVzdGFjaGUuQ29udGV4dCA9IENvbnRleHQ7XG4gIG11c3RhY2hlLldyaXRlciA9IFdyaXRlcjtcblxuICByZXR1cm4gbXVzdGFjaGU7XG5cbn0pKSk7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5pZiAobW9kdWxlLmhvdCkge1xuICBpZiAoIWNvbnRlbnQubG9jYWxzIHx8IG1vZHVsZS5ob3QuaW52YWxpZGF0ZSkge1xuICAgIHZhciBpc0VxdWFsTG9jYWxzID0gZnVuY3Rpb24gaXNFcXVhbExvY2FscyhhLCBiKSB7XG4gIGlmICghYSAmJiBiIHx8IGEgJiYgIWIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcDtcblxuICBmb3IgKHAgaW4gYSkge1xuICAgIGlmIChhW3BdICE9PSBiW3BdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZm9yIChwIGluIGIpIHtcbiAgICBpZiAoIWFbcF0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4gICAgdmFyIG9sZExvY2FscyA9IGNvbnRlbnQubG9jYWxzO1xuXG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXG4gICAgICBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLnNjc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiLypcbiAgQ29weXJpZ2h0IMKpIDIwMTggQW5kcmV3IFBvd2VsbFxuXG4gIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAgTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhpcyBTb3VyY2UgQ29kZSBGb3JtLlxuKi9cblxuLyoqXG4gKiBAbm90ZSBUaGlzIGZpbGUgZXhpc3RzIG1lcmVseSBhcyBhbiBlYXN5IHJlZmVyZW5jZSBmb3IgZm9sa3MgYWRkaW5nIGl0IHRvIHRoZWlyIGNvbmZpZ3VyYXRpb24gZW50cmllc1xuICovXG5cbigoKSA9PiB7XG4gIC8qIGVzbGludC1kaXNhYmxlIGdsb2JhbC1yZXF1aXJlICovXG4gIGNvbnN0IHsgcnVuIH0gPSByZXF1aXJlKCcuL2xpYi9jbGllbnQvY2xpZW50Jyk7XG4gIGxldCBoYXNoID0gJzx1bmtub3duPic7XG4gIGxldCBvcHRpb25zO1xuICB0cnkge1xuICAgIG9wdGlvbnMgPSDKjsmQybnJlG9zx53KjMm5x51zO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc3QgeyBsb2cgfSA9IHJlcXVpcmUoJy4vbGliL2NsaWVudC9sb2cnKTtcbiAgICBsb2cuZXJyb3IoXG4gICAgICAnVGhlIGVudHJ5IGZvciB3ZWJwYWNrLXBsdWdpbi1zZXJ2ZSB3YXMgaW5jbHVkZWQgaW4geW91ciBidWlsZCwgYnV0IGl0IGRvZXMgbm90IGFwcGVhciB0aGF0IHRoZSBwbHVnaW4gd2FzLiBQbGVhc2UgY2hlY2sgeW91ciBjb25maWd1cmF0aW9uLidcbiAgICApO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgaGFzaCA9IF9fd2VicGFja19oYXNoX187XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxuICBydW4oaGFzaCwgb3B0aW9ucyk7XG59KSgpO1xuIiwiLypcbiAgQ29weXJpZ2h0IMKpIDIwMTggQW5kcmV3IFBvd2VsbFxuXG4gIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAgTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhpcyBTb3VyY2UgQ29kZSBGb3JtLlxuKi9cbi8qIGVzbGludC1kaXNhYmxlIGdsb2JhbC1yZXF1aXJlICovXG5jb25zdCBydW4gPSAoYnVpbGRIYXNoLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgYWRkcmVzcywgY2xpZW50ID0ge30sIHByb2dyZXNzLCBzZWN1cmUsIHN0YXR1cyB9ID0gb3B0aW9ucztcblxuICBvcHRpb25zLmZpcnN0SW5zdGFuY2UgPSAhd2luZG93LndlYnBhY2tQbHVnaW5TZXJ2ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIHdpbmRvdy53ZWJwYWNrUGx1Z2luU2VydmUgPSB3aW5kb3cud2VicGFja1BsdWdpblNlcnZlIHx8IHtcbiAgICBjb21waWxlcnM6IHt9XG4gIH07XG4gIHdpbmRvdy53ZWJwYWNrUGx1Z2luU2VydmUuc2lsZW50ID0gISFjbGllbnQuc2lsZW50O1xuXG4gIGNvbnN0IHsgQ2xpZW50U29ja2V0IH0gPSByZXF1aXJlKCcuL0NsaWVudFNvY2tldCcpO1xuICBjb25zdCB7IHJlcGxhY2UgfSA9IHJlcXVpcmUoJy4vaG1yJyk7XG4gIGNvbnN0IHsgZXJyb3IsIGluZm8sIHdhcm4gfSA9IHJlcXVpcmUoJy4vbG9nJykoKTtcblxuICBjb25zdCBwcm90b2NvbCA9IHNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgY29uc3Qgc29ja2V0ID0gbmV3IENsaWVudFNvY2tldChjbGllbnQsIGAke3Byb3RvY29sfTovLyR7Y2xpZW50LmFkZHJlc3MgfHwgYWRkcmVzc30vd3BzYCk7XG5cbiAgY29uc3QgeyBjb21waWxlck5hbWUgfSA9IG9wdGlvbnM7XG5cbiAgd2luZG93LndlYnBhY2tQbHVnaW5TZXJ2ZS5jb21waWxlcnNbY29tcGlsZXJOYW1lXSA9IHt9O1xuXG4gIC8vIHByZXZlbnRzIEVDT05OUkVTRVQgZXJyb3JzIG9uIHRoZSBzZXJ2ZXJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsICgpID0+IHNvY2tldC5jbG9zZSgpKTtcblxuICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3QgeyBhY3Rpb24sIGRhdGEgPSB7fSB9ID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuICAgIGNvbnN0IHsgZXJyb3JzLCBoYXNoID0gJzw/PicsIHdhcm5pbmdzIH0gPSBkYXRhIHx8IHt9O1xuICAgIGNvbnN0IHNob3J0SGFzaCA9IGhhc2guc2xpY2UoMCwgNyk7XG4gICAgY29uc3QgaWRlbnRpZmllciA9IG9wdGlvbnMuY29tcGlsZXJOYW1lID8gYChDb21waWxlcjogJHtvcHRpb25zLmNvbXBpbGVyTmFtZX0pIGAgOiAnJztcbiAgICBjb25zdCBjb21waWxlciA9IHdpbmRvdy53ZWJwYWNrUGx1Z2luU2VydmUuY29tcGlsZXJzW2NvbXBpbGVyTmFtZV07XG4gICAgY29uc3QgeyB3cHNJZCB9ID0gZGF0YTtcblxuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlICdidWlsZCc6XG4gICAgICAgIGNvbXBpbGVyLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICBpbmZvKGBXZWJTb2NrZXQgY29ubmVjdGVkICR7aWRlbnRpZmllcn1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkb25lJzpcbiAgICAgICAgY29tcGlsZXIuZG9uZSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncHJvYmxlbXMnOlxuICAgICAgICBpZiAoZGF0YS5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgZXJyb3IoYCR7aWRlbnRpZmllcn1CdWlsZCAke3Nob3J0SGFzaH0gcHJvZHVjZWQgZXJyb3JzOlxcbmAsIGVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEud2FybmluZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgd2FybihgJHtpZGVudGlmaWVyfUJ1aWxkICR7c2hvcnRIYXNofSBwcm9kdWNlZCB3YXJuaW5nczpcXG5gLCB3YXJuaW5ncyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWxvYWQnOlxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncmVwbGFjZSc6XG4gICAgICAgIC8vIGFjdGlvbnMgd2l0aCBhIHdwc0lkIGluIHRvdyBpbmRpY2F0ZSBhY3Rpb25zIHRoYXQgc2hvdWxkIG9ubHkgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgd3BzSWQgc2VudFxuICAgICAgICAvLyBtYXRjaGVzIHRoZSB3cHNJZCBzZXQgaW4gb3B0aW9ucy4gdGhpcyBpcyBob3cgd2UgY2FuIGlkZW50aWZ5IG11bHRpcGxlIGNvbXBpbGVycyBpbiB0aGVcbiAgICAgICAgLy8gY2xpZW50LlxuICAgICAgICBpZiAod3BzSWQgJiYgd3BzSWQgPT09IG9wdGlvbnMud3BzSWQpIHtcbiAgICAgICAgICByZXBsYWNlKGJ1aWxkSGFzaCwgaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKG9wdGlvbnMuZmlyc3RJbnN0YW5jZSkge1xuICAgIGlmIChwcm9ncmVzcyA9PT0gJ21pbmltYWwnKSB7XG4gICAgICBjb25zdCB7IGluaXQgfSA9IHJlcXVpcmUoJy4vb3ZlcmxheXMvcHJvZ3Jlc3MtbWluaW1hbCcpO1xuICAgICAgaW5pdChvcHRpb25zLCBzb2NrZXQpO1xuICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MpIHtcbiAgICAgIGNvbnN0IHsgaW5pdCB9ID0gcmVxdWlyZSgnLi9vdmVybGF5cy9wcm9ncmVzcycpO1xuICAgICAgaW5pdChvcHRpb25zLCBzb2NrZXQpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgIGNvbnN0IHsgaW5pdCB9ID0gcmVxdWlyZSgnLi9vdmVybGF5cy9zdGF0dXMnKTtcbiAgICAgIGluaXQob3B0aW9ucywgc29ja2V0KTtcbiAgICB9XG5cbiAgICBpZiAobW9kdWxlLmhvdCkge1xuICAgICAgaW5mbygnSG90IE1vZHVsZSBSZXBsYWNlbWVudCBpcyBhY3RpdmUnKTtcblxuICAgICAgaWYgKG9wdGlvbnMubGl2ZVJlbG9hZCkge1xuICAgICAgICBpbmZvKCdMaXZlIFJlbG9hZCB0YWtpbmcgcHJlY2VkZW5jZSBvdmVyIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2FybignSG90IE1vZHVsZSBSZXBsYWNlbWVudCBpcyBpbmFjdGl2ZScpO1xuICAgIH1cblxuICAgIGlmICghbW9kdWxlLmhvdCAmJiBvcHRpb25zLmxpdmVSZWxvYWQpIHtcbiAgICAgIGluZm8oJ0xpdmUgUmVsb2FkIGlzIGFjdGl2ZScpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IHJ1biB9O1xuIiwiLypcbiAgQ29weXJpZ2h0IMKpIDIwMTggQW5kcmV3IFBvd2VsbFxuXG4gIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAgTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhpcyBTb3VyY2UgQ29kZSBGb3JtLlxuKi9cbmNvbnN0IHsgZXJyb3IsIHJlZnJlc2gsIHdhcm4gfSA9IHJlcXVpcmUoJy4vbG9nJykoKTtcblxuLy8gaWdub3JlIDEwMDggKEhUVFAgNDAwIGVxdWl2YWxlbnQpIGFuZCAxMDExIChIVFRQIDUwMCBlcXVpdmFsZW50KVxuY29uc3QgaWdub3JlQ29kZXMgPSBbMTAwOCwgMTAxMV07XG5jb25zdCBtYXhBdHRlbXB0cyA9IDEwO1xuXG5jbGFzcyBDbGllbnRTb2NrZXQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zLCAuLi5hcmdzKSB7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmF0dGVtcHRzID0gMDtcbiAgICB0aGlzLmV2ZW50SGFuZGxlcnMgPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucmV0cnlpbmcgPSBmYWxzZTtcblxuICAgIHRoaXMuY29ubmVjdCgpO1xuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lciguLi5hcmdzKSB7XG4gICAgdGhpcy5ldmVudEhhbmRsZXJzLnB1c2goYXJncyk7XG4gICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lciguLi5hcmdzKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuc29ja2V0LmNsb3NlKCk7XG4gIH1cblxuICBjb25uZWN0KCkge1xuICAgIGlmICh0aGlzLnNvY2tldCkge1xuICAgICAgZGVsZXRlIHRoaXMuc29ja2V0O1xuICAgIH1cblxuICAgIHRoaXMuY29ubmVjdGluZyA9IHRydWU7XG5cbiAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQoLi4udGhpcy5hcmdzKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucmV0cnkpIHtcbiAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChpZ25vcmVDb2Rlcy5pbmNsdWRlcyhldmVudC5jb2RlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5yZXRyeWluZykge1xuICAgICAgICAgIHdhcm4oYFRoZSBXZWJTb2NrZXQgd2FzIGNsb3NlZCBhbmQgd2lsbCBhdHRlbXB0IHRvIHJlY29ubmVjdGApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNvY2tldC5vbmNsb3NlID0gKCkgPT4gd2FybihgVGhlIGNsaWVudCBXZWJTb2NrZXQgd2FzIGNsb3NlZC4gJHtyZWZyZXNofWApO1xuICAgIH1cblxuICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoKSA9PiB7XG4gICAgICB0aGlzLmF0dGVtcHRzID0gMDtcbiAgICAgIHRoaXMucmV0cnlpbmcgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmV2ZW50SGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IFtuYW1lLCBmbl0gb2YgdGhpcy5ldmVudEhhbmRsZXJzKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZm4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlY29ubmVjdCgpIHtcbiAgICB0aGlzLmF0dGVtcHRzICs9IDE7XG4gICAgdGhpcy5yZXRyeWluZyA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5hdHRlbXB0cyA+IG1heEF0dGVtcHRzKSB7XG4gICAgICBlcnJvcihgVGhlIFdlYlNvY2tldCBjb3VsZCBub3QgYmUgcmVjb25uZWN0ZWQuICR7cmVmcmVzaH1gKTtcbiAgICAgIHRoaXMucmV0cnlpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0aW1lb3V0ID0gMTAwMCAqIHRoaXMuYXR0ZW1wdHMgKiogMjtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jb25uZWN0KHRoaXMuYXJncyksIHRpbWVvdXQpO1xuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lciguLi5hcmdzKSB7XG4gICAgY29uc3QgWywgaGFuZGxlcl0gPSBhcmdzO1xuICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IHRoaXMuZXZlbnRIYW5kbGVycy5maWx0ZXIoKFssIGZuXSkgPT4gZm4gPT09IGhhbmRsZXIpO1xuICAgIHRoaXMuc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoLi4uYXJncyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IENsaWVudFNvY2tldCB9O1xuIiwiLypcbiAgQ29weXJpZ2h0IMKpIDIwMTggQW5kcmV3IFBvd2VsbFxuXG4gIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAgTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhpcyBTb3VyY2UgQ29kZSBGb3JtLlxuKi9cbmNvbnN0IHsgZXJyb3IsIGluZm8sIHJlZnJlc2gsIHdhcm4gfSA9IHJlcXVpcmUoJy4vbG9nJykoKTtcblxubGV0IGxhdGVzdCA9IHRydWU7XG5cbmNvbnN0IGhtciA9IHtcbiAgb25VbmFjY2VwdGVkKGRhdGEpIHtcbiAgICB3YXJuKCdDaGFuZ2UgaW4gdW5hY2NlcHRlZCBtb2R1bGUocyk6XFxuJywgZGF0YSk7XG4gICAgd2FybihkYXRhKTtcbiAgfSxcbiAgb25EZWNsaW5lZChkYXRhKSB7XG4gICAgd2FybignQ2hhbmdlIGluIGRlY2xpbmVkIG1vZHVsZShzKTpcXG4nLCBkYXRhKTtcbiAgfSxcbiAgb25FcnJvcmVkKGRhdGEpIHtcbiAgICBlcnJvcignRXJyb3IgaW4gbW9kdWxlKHMpOlxcbicsIGRhdGEpO1xuICB9XG59O1xuXG5jb25zdCByZXBsYWNlID0gYXN5bmMgKGJ1aWxkSGFzaCwgaGFzaCkgPT4ge1xuICBjb25zdCB7IGFwcGx5LCBjaGVjaywgc3RhdHVzIH0gPSBtb2R1bGUuaG90O1xuXG4gIGlmIChoYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgbGF0ZXN0ID0gaGFzaC5pbmNsdWRlcyhidWlsZEhhc2gpO1xuICB9XG5cbiAgaWYgKCFsYXRlc3QpIHtcbiAgICBjb25zdCBobXJTdGF0dXMgPSBzdGF0dXMoKTtcblxuICAgIGlmIChobXJTdGF0dXMgPT09ICdhYm9ydCcgfHwgaG1yU3RhdHVzID09PSAnZmFpbCcpIHtcbiAgICAgIHdhcm4oYEFuIEhNUiB1cGRhdGUgd2FzIHRyaWdnZXJlZCwgYnV0ICR7aG1yU3RhdHVzfWVkLiAke3JlZnJlc2h9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG1vZHVsZXM7XG5cbiAgICB0cnkge1xuICAgICAgbW9kdWxlcyA9IGF3YWl0IGNoZWNrKGZhbHNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBub29wLiB0aGlzIHR5cGljYWxseSBoYXBwZW5zIHdoZW4gYSBNdWx0aUNvbXBpbGVyIGhhcyBtb3JlIHRoYW4gb25lIGNvbXBpbGVyIHRoYXQgaW5jbHVkZXNcbiAgICAgIC8vIHRoaXMgc2NyaXB0LCBhbmQgYW4gdXBkYXRlIGhhcHBlbnMgd2l0aCBhIGhhc2ggdGhhdCBpc24ndCBwYXJ0IG9mIHRoZSBjb21waWxlci9tb2R1bGUgdGhpc1xuICAgICAgLy8gaW5zdGFuY2Ugd2FzIGxvYWRlZCBmb3IuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFtb2R1bGVzKSB7XG4gICAgICB3YXJuKGBObyBtb2R1bGVzIGZvdW5kIGZvciByZXBsYWNlbWVudC4gJHtyZWZyZXNofWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1vZHVsZXMgPSBhd2FpdCBhcHBseShobXIpO1xuXG4gICAgaWYgKG1vZHVsZXMpIHtcbiAgICAgIGxhdGVzdCA9IHRydWU7XG4gICAgICBpbmZvKGBCdWlsZCAke2hhc2guc2xpY2UoMCwgNyl9IHJlcGxhY2VkOlxcbmAsIG1vZHVsZXMpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IHJlcGxhY2UgfTtcbiIsIi8qXG4gIENvcHlyaWdodCDCqSAyMDE4IEFuZHJldyBQb3dlbGwsIE1hdGhldXMgR29uw6dhbHZlcyBkYSBTaWx2YVxuXG4gIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAgTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhpcyBTb3VyY2UgQ29kZSBGb3JtLlxuKi9cbmNvbnN0IHsgYWRkQ3NzLCBhZGRIdG1sIH0gPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuY29uc3QgbnMgPSAnd3BzLXByb2dyZXNzLW1pbmltYWwnO1xuY29uc3QgaHRtbCA9IGBcbjxkaXYgaWQ9XCIke25zfVwiIGNsYXNzPVwiJHtuc30taGlkZGVuXCI+XG4gIDxkaXYgaWQ9XCIke25zfS1iYXJcIj48L2Rpdj5cbjwvZGl2PlxuYDtcbmNvbnN0IGNzcyA9IGBcbiMke25zfSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBoZWlnaHQ6IDRweDtcbiAgd2lkdGg6IDEwMHZ3O1xuICB6LWluZGV4OiAyMTQ3NDgzNjQ1O1xufVxuXG4jJHtuc30tYmFyIHtcbiAgd2lkdGg6IDAlO1xuICBoZWlnaHQ6IDRweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4NiwgMjIzLCAxNzIpO1xuICB0cmFuc2l0aW9uOiB3aWR0aCAxcyBlYXNlLWluLW91dDtcbn1cblxuLiR7bnN9LWhpZGRlbntcbiAgZGlzcGxheTogbm9uZTtcbn1cbmA7XG5cbmNvbnN0IHVwZGF0ZSA9IChwZXJjZW50KSA9PiB7XG4gIGNvbnN0IGJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke25zfS1iYXJgKTtcbiAgYmFyLnN0eWxlLndpZHRoID0gYCR7cGVyY2VudH0lYDtcbn07XG5cbmNvbnN0IHJlc2V0ID0gKHdyYXBwZXIpID0+IHtcbiAgd3JhcHBlci5jbGFzc0xpc3QuYWRkKGAke25zfS1oaWRkZW5gKTtcbiAgc2V0VGltZW91dCgoKSA9PiB1cGRhdGUoMCksIDFlMyk7XG59O1xuXG5jb25zdCBpbml0ID0gKG9wdGlvbnMsIHNvY2tldCkgPT4ge1xuICBpZiAob3B0aW9ucy5maXJzdEluc3RhbmNlKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICAgIGFkZENzcyhjc3MpO1xuICAgICAgYWRkSHRtbChodG1sKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zdCB7IGFjdGlvbiwgZGF0YSB9ID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuXG4gICAgaWYgKGFjdGlvbiAhPT0gJ3Byb2dyZXNzJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBlcmNlbnQgPSBNYXRoLmZsb29yKGRhdGEucGVyY2VudCAqIDEwMCk7XG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke25zfWApO1xuXG4gICAgd3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKGAke25zfS1oaWRkZW5gKTtcblxuICAgIGlmIChkYXRhLnBlcmNlbnQgPT09IDEpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzZXQod3JhcHBlciksIDVlMyk7XG4gICAgfVxuXG4gICAgdXBkYXRlKHBlcmNlbnQpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbml0XG59O1xuIiwiLypcbiAgQ29weXJpZ2h0IMKpIDIwMTggQW5kcmV3IFBvd2VsbCwgTWF0aGV1cyBHb27Dp2FsdmVzIGRhIFNpbHZhXG5cbiAgVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGlzIFNvdXJjZSBDb2RlIEZvcm0uXG4qL1xuY29uc3QgeyBhZGRDc3MsIGFkZEh0bWwgfSA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5jb25zdCBucyA9ICd3cHMtcHJvZ3Jlc3MnO1xuY29uc3QgY3NzID0gYFxuQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1PcGVuK1NhbnM6NDAwLDcwMCcpO1xuXG4jJHtuc317XG4gIHdpZHRoOiAyMDBweDtcbiAgaGVpZ2h0OiAyMDBweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogNSU7XG4gIHRvcDogNSU7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgLjI1cyBlYXNlLWluLW91dDtcbiAgei1pbmRleDogMjE0NzQ4MzY0NTtcbn1cblxuIyR7bnN9LWJnIHtcbiAgZmlsbDogIzI4MmQzNTtcbn1cblxuIyR7bnN9LWZpbGwge1xuICBmaWxsOiByZ2JhKDAsIDAsIDAsIDApO1xuICBzdHJva2U6IHJnYigxODYsIDIyMywgMTcyKTtcbiAgc3Ryb2tlLWRhc2hhcnJheTogMjE5Ljk5MDc4MzY5MTQwNjI1O1xuICBzdHJva2UtZGFzaG9mZnNldDogLTIxOS45OTA3ODM2OTE0MDYyNTtcbiAgc3Ryb2tlLXdpZHRoOiAxMDtcbiAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpdHJhbnNsYXRlKDBweCwgLTgwcHgpO1xuICB0cmFuc2l0aW9uOiBzdHJva2UtZGFzaG9mZnNldCAxcztcbn1cblxuIyR7bnN9LXBlcmNlbnQge1xuICBmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgZmlsbDogI2ZmZmZmZjtcbn1cblxuIyR7bnN9LXBlcmNlbnQtdmFsdWUge1xuICBkb21pbmFudC1iYXNlbGluZTogbWlkZGxlO1xuICB0ZXh0LWFuY2hvcjogbWlkZGxlO1xufVxuXG4jJHtuc30tcGVyY2VudC1zdXBlciB7XG4gIGZpbGw6ICNiZGMzYzc7XG4gIGZvbnQtc2l6ZTogLjQ1ZW07XG4gIGJhc2VsaW5lLXNoaWZ0OiAxMCU7XG59XG5cbi4ke25zfS1ub3NlbGVjdCB7XG4gIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbkBrZXlmcmFtZXMgJHtuc30taGlkZGVuLWRpc3BsYXkge1xuXHQwJSB7XG5cdFx0b3BhY2l0eTogMTtcblx0XHR0cmFuc2Zvcm06IHNjYWxlKDEpO1xuXHRcdC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxKTtcblx0fVxuXHQ5OSUge1xuXHRcdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRcdG9wYWNpdHk6IDA7XG5cdFx0dHJhbnNmb3JtOiBzY2FsZSgwKTtcblx0XHQtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XG5cdH1cblx0MTAwJSB7XG5cdFx0ZGlzcGxheTogbm9uZTtcblx0XHRvcGFjaXR5OiAwO1xuXHRcdHRyYW5zZm9ybTogc2NhbGUoMCk7XG5cdFx0LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApO1xuXHR9XG59XG5cbi4ke25zfS1oaWRkZW4ge1xuICBhbmltYXRpb246ICR7bnN9LWhpZGRlbi1kaXNwbGF5IC4zcztcbiAgYW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkcztcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG59XG5cbi4ke25zfS1oaWRkZW4tb25sb2FkIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmA7XG5cbmNvbnN0IGh0bWwgPSBgXG48c3ZnIGlkPVwiJHtuc31cIiBjbGFzcz1cIiR7bnN9LW5vc2VsZWN0ICR7bnN9LWhpZGRlbi1vbmxvYWRcIiB4PVwiMHB4XCIgeT1cIjBweFwiIHZpZXdCb3g9XCIwIDAgODAgODBcIj5cbiAgPGNpcmNsZSBpZD1cIiR7bnN9LWJnXCIgY3g9XCI1MCVcIiBjeT1cIjUwJVwiIHI9XCIzNVwiPjwvY2lyY2xlPlxuICA8cGF0aCBpZD1cIiR7bnN9LWZpbGxcIiBkPVwiTTUsNDBhMzUsMzUgMCAxLDAgNzAsMGEzNSwzNSAwIDEsMCAtNzAsMFwiIC8+XG4gIDx0ZXh0IGlkPVwiJHtuc30tcGVyY2VudFwiIHg9XCI1MCVcIiB5PVwiNTElXCI+PHRzcGFuIGlkPVwiJHtuc30tcGVyY2VudC12YWx1ZVwiPjA8L3RzcGFuPjx0c3BhbiBpZD1cIiR7bnN9LXBlcmNlbnQtc3VwZXJcIj4lPC90c3Bhbj48L3RleHQ+XG48L3N2Zz5cbmA7XG5cbmNvbnN0IHVwZGF0ZSA9IChwZXJjZW50KSA9PiB7XG4gIGNvbnN0IG1heCA9IC0yMTkuOTkwNzgzNjkxNDA2MjU7XG4gIGNvbnN0IHZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7bnN9LXBlcmNlbnQtdmFsdWVgKTtcbiAgY29uc3QgdHJhY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtuc30tZmlsbGApO1xuICBjb25zdCBvZmZzZXQgPSAoKDEwMCAtIHBlcmNlbnQpIC8gMTAwKSAqIG1heDtcblxuICB0cmFjay5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYHN0cm9rZS1kYXNob2Zmc2V0OiAke29mZnNldH1gKTtcbiAgdmFsdWUuaW5uZXJIVE1MID0gcGVyY2VudC50b1N0cmluZygpO1xufTtcblxuY29uc3QgcmVzZXQgPSAoc3ZnKSA9PiB7XG4gIHN2Zy5jbGFzc0xpc3QuYWRkKGAke25zfS1oaWRkZW5gKTtcbiAgc2V0VGltZW91dCgoKSA9PiB1cGRhdGUoMCksIDFlMyk7XG59O1xuXG5jb25zdCBpbml0ID0gKG9wdGlvbnMsIHNvY2tldCkgPT4ge1xuICBpZiAob3B0aW9ucy5maXJzdEluc3RhbmNlKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICAgIGFkZENzcyhjc3MpO1xuICAgICAgYWRkSHRtbChodG1sKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zdCB7IGFjdGlvbiwgZGF0YSB9ID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuXG4gICAgaWYgKGFjdGlvbiAhPT0gJ3Byb2dyZXNzJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBlcmNlbnQgPSBNYXRoLmZsb29yKGRhdGEucGVyY2VudCAqIDEwMCk7XG4gICAgY29uc3Qgc3ZnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7bnN9YCk7XG5cbiAgICBpZiAoIXN2Zykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHdlIGNhbiBzYWZlbHkgY2FsbCB0aGlzIGV2ZW4gaWYgaXQgZG9lc24ndCBoYXZlIHRoZSBjbGFzc1xuICAgIHN2Zy5jbGFzc0xpc3QucmVtb3ZlKGAke25zfS1oaWRkZW5gLCBgJHtuc30taGlkZGVuLW9ubG9hZGApO1xuXG4gICAgaWYgKGRhdGEucGVyY2VudCA9PT0gMSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNldChzdmcpLCA1ZTMpO1xuICAgIH1cblxuICAgIHVwZGF0ZShwZXJjZW50KTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgaW5pdCB9O1xuIiwiLypcbiAgQ29weXJpZ2h0IMKpIDIwMTggQW5kcmV3IFBvd2VsbFxuXG4gIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAgTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuICBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhpcyBTb3VyY2UgQ29kZSBGb3JtLlxuKi9cbmNvbnN0IHsgYWRkQ3NzLCBhZGRIdG1sLCBzb2NrZXRNZXNzYWdlIH0gPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuY29uc3QgbnMgPSAnd3BzLXN0YXR1cyc7XG5jb25zdCBjc3MgPSBgXG5AaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9wZW4rU2Fuczo0MDAsNzAwJyk7XG5cbiMke25zfSB7XG4gIGJhY2tncm91bmQ6ICMyODJkMzU7XG4gIGJvcmRlci1yYWRpdXM6IDAuNmVtO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRmb250LWZhbWlseTogJ09wZW4gU2FucycsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XG5cdGZvbnQtc2l6ZTogMTBweDtcbiAgaGVpZ2h0OiA5MCU7XG4gIG1pbi1oZWlnaHQ6IDIwZW07XG4gIGxlZnQ6IDUwJTtcbiAgb3BhY2l0eTogMTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcGFkZGluZy1ib3R0b206IDNlbTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDJyZW07XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuMjVzIGVhc2UtaW4tb3V0O1xuICB3aWR0aDogOTUlO1xuICB6LWluZGV4OiAyMTQ3NDgzNjQ1O1xufVxuXG5Aa2V5ZnJhbWVzICR7bnN9LWhpZGRlbi1kaXNwbGF5IHtcblx0MCUge1xuXHRcdG9wYWNpdHk6IDE7XG5cdH1cblx0OTklIHtcblx0XHRkaXNwbGF5OiBpbmxpbmUtZmxleDtcblx0XHRvcGFjaXR5OiAwO1xuXHR9XG5cdDEwMCUge1xuXHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0b3BhY2l0eTogMDtcblx0fVxufVxuXG4jJHtuc30uJHtuc30taGlkZGVuIHtcbiAgYW5pbWF0aW9uOiAke25zfS1oaWRkZW4tZGlzcGxheSAuM3M7XG4gIGFuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbiMke25zfS4ke25zfS1taW4ge1xuICBhbmltYXRpb246IG1pbmltaXplIDEwcztcbiAgYm90dG9tOiAyZW07XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgaGVpZ2h0OiA2ZW07XG4gIGxlZnQ6IGF1dG87XG4gIG1pbi1oZWlnaHQ6IDZlbTtcbiAgcGFkZGluZy1ib3R0b206IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDJlbTtcbiAgdG9wOiBhdXRvO1xuICB0cmFuc2Zvcm06IG5vbmU7XG4gIHdpZHRoOiA2ZW07XG59XG5cbiMke25zfS4ke25zfS1taW4gIyR7bnN9LWJlYWNvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4jJHtuc30tdGl0bGUge1xuICBjb2xvcjogI2ZmZjtcbiAgZm9udC1zaXplOiAxLjJlbTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwLjZlbSAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jJHtuc30uJHtuc30tbWluICMke25zfS10aXRsZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbiMke25zfS10aXRsZS1lcnJvcnMge1xuICBjb2xvcjogI2ZmNWY1ODtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBwYWRkaW5nLWxlZnQ6IDFlbTtcbn1cblxuIyR7bnN9LXRpdGxlLXdhcm5pbmdzIHtcbiAgY29sb3I6ICNmZmJkMmU7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgcGFkZGluZy1sZWZ0OiAxZW07XG59XG5cbiMke25zfS1wcm9ibGVtcyB7XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIHBhZGRpbmc6IDFlbSAyZW07XG59XG5cbiMke25zfS1wcm9ibGVtcyBwcmUge1xuICBjb2xvcjogI2RkZDtcbiAgYmFja2dyb3VuZDogIzI4MmQzNTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMS4zZW07XG5cdGZvbnQtZmFtaWx5OiAnT3BlbiBTYW5zJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xufVxuXG4jJHtuc30tcHJvYmxlbXMgcHJlIGVtIHtcbiAgYmFja2dyb3VuZDogI2ZmNWY1ODtcbiAgYm9yZGVyLXJhZGl1czogMC4zZW07XG4gIGNvbG9yOiAjNjQxZTE2O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGxpbmUtaGVpZ2h0OiAzZW07XG4gIG1hcmdpbi1yaWdodDogMC40ZW07XG4gIHBhZGRpbmc6IDAuMWVtIDAuNGVtO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuXG5wcmUjJHtuc30td2FybmluZ3MgZW0ge1xuICBiYWNrZ3JvdW5kOiAjZmZiZDJlO1xuICBjb2xvcjogIzNlMjcyMztcbn1cblxucHJlIyR7bnN9LXN1Y2Nlc3Mge1xuICBkaXNwbGF5OiBub25lO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbnByZSMke25zfS1zdWNjZXNzIGVtIHtcbiAgYmFja2dyb3VuZDogIzdmYjkwMDtcbiAgY29sb3I6ICMwMDRkNDA7XG59XG5cbiMke25zfS1wcm9ibGVtcy4ke25zfS1zdWNjZXNzICMke25zfS1zdWNjZXNzIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbiMke25zfS4ke25zfS1taW4gIyR7bnN9LXByb2JsZW1zIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuIyR7bnN9LW5hdiB7XG4gIG9wYWNpdHk6IDAuNTtcbiAgcGFkZGluZzogMS4yZW07XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cblxuIyR7bnN9LiR7bnN9LW1pbiAjJHtuc30tbmF2IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuIyR7bnN9LW5hdjpob3ZlciB7XG4gIG9wYWNpdHk6IDE7XG59XG5cbiMke25zfS1uYXYgZGl2IHtcbiAgYmFja2dyb3VuZDogI2ZmNWY1ODtcbiAgYm9yZGVyLXJhZGl1czogMS4yZW07XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBoZWlnaHQ6IDEuMmVtO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAxLjJlbTtcbn1cblxuZGl2IyR7bnN9LW1pbiB7XG4gIGJhY2tncm91bmQ6ICNmZmJkMmU7XG4gIG1hcmdpbi1sZWZ0OiAwLjhlbTtcbn1cblxuIyR7bnN9LWJlYWNvbiB7XG4gIGJvcmRlci1yYWRpdXM6IDNlbTtcbiAgZGlzcGxheTogbm9uZTtcbiAgZm9udC1zaXplOiAxMHB4O1xuICBoZWlnaHQ6IDNlbTtcbiAgbWFyZ2luOiAxLjZlbSBhdXRvO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAzZW07XG59XG5cbiMke25zfS1iZWFjb246YmVmb3JlLCAjJHtuc30tYmVhY29uOmFmdGVyIHtcbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDEyNywxODUsMCwgMC4yKTtcbiAgYm9yZGVyLXJhZGl1czogM2VtO1xuICBvcGFjaXR5OiAwO1xufVxuXG4jJHtuc30tYmVhY29uOmJlZm9yZSB7XG4gIGFuaW1hdGlvbjogJHtuc30tcHVsc2UgM3MgaW5maW5pdGUgbGluZWFyO1xuICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xufVxuXG4jJHtuc30tYmVhY29uOmFmdGVyIHtcbiAgYW5pbWF0aW9uOiAke25zfS1wdWxzZSAzcyAycyBpbmZpbml0ZSBsaW5lYXI7XG59XG5cblxuQGtleWZyYW1lcyAke25zfS1wdWxzZSB7XG4gIDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMC42KTtcbiAgfVxuICAzMyUge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMS40KTtcbiAgfVxufVxuXG4jJHtuc30tYmVhY29uIG1hcmsge1xuICBiYWNrZ3JvdW5kOiByZ2JhKDEyNywgMTg1LCAwLCAxKTtcbiAgYm9yZGVyLXJhZGl1czogMTAwJSAxMDAlO1xuICBoZWlnaHQ6IDFlbTtcbiAgbGVmdDogMWVtO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMWVtO1xuICB3aWR0aDogMWVtO1xufVxuXG4jJHtuc30tYmVhY29uLiR7bnN9LWVycm9yIG1hcmsge1xuICBiYWNrZ3JvdW5kOiAjZmY1ZjU4O1xufVxuXG4jJHtuc30tYmVhY29uLiR7bnN9LWVycm9yOmJlZm9yZSwgIyR7bnN9LWJlYWNvbi5lcnJvcjphZnRlciB7XG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCA5NSwgODgsIDAuMik7XG59XG5cbiMke25zfS1iZWFjb24uJHtuc30td2FybmluZyBtYXJrIHtcbiAgYmFja2dyb3VuZDogI2ZmYmQyZTtcbn1cblxuIyR7bnN9LWJlYWNvbi4ke25zfS13YXJuaW5nOmJlZm9yZSwgIyR7bnN9LWJlYWNvbi53YXJuaW5nOmFmdGVyIHtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDE4OSwgNDYsIDAuMik7XG59XG5gO1xuXG5jb25zdCBodG1sID0gYFxuPGFzaWRlIGlkPVwiJHtuc31cIiBjbGFzcz1cIiR7bnN9LWhpZGRlblwiIHRpdGxlPVwiYnVpbGQgc3RhdHVzXCI+XG4gIDxmaWd1cmUgaWQ9XCIke25zfS1iZWFjb25cIj5cbiAgICA8bWFyay8+XG4gIDwvZmlndXJlPlxuICA8bmF2IGlkPVwiJHtuc30tbmF2XCI+XG4gICAgPGRpdiBpZD1cIiR7bnN9LWNsb3NlXCIgdGl0bGU9XCJjbG9zZVwiPjwvZGl2PlxuICAgIDxkaXYgaWQ9XCIke25zfS1taW5cIiB0aXRsZT1cIm1pbm1pemVcIj48L2Rpdj5cbiAgPC9uYXY+XG4gIDxoMSBpZD1cIiR7bnN9LXRpdGxlXCI+XG4gICAgYnVpbGQgc3RhdHVzXG4gICAgPGVtIGlkPVwiJHtuc30tdGl0bGUtZXJyb3JzXCI+PC9lbT5cbiAgICA8ZW0gaWQ9XCIke25zfS10aXRsZS13YXJuaW5nc1wiPjwvZW0+XG4gIDwvaDE+XG4gIDxhcnRpY2xlIGlkPVwiJHtuc30tcHJvYmxlbXNcIj5cbiAgICA8cHJlIGlkPVwiJHtuc30tc3VjY2Vzc1wiPjxlbT5CdWlsZCBTdWNjZXNzZnVsPC9lbT48L3ByZT5cbiAgICA8cHJlIGlkPVwiJHtuc30tZXJyb3JzXCI+PC9wcmU+XG4gICAgPHByZSBpZD1cIiR7bnN9LXdhcm5pbmdzXCI+PC9wcmU+XG4gIDwvYXJ0aWNsZT5cbjwvYXNpZGU+XG5gO1xuXG5jb25zdCBpbml0ID0gKG9wdGlvbnMsIHNvY2tldCkgPT4ge1xuICBjb25zdCBoaWRkZW4gPSBgJHtuc30taGlkZGVuYDtcbiAgbGV0IGhhc1Byb2JsZW1zID0gZmFsc2U7XG4gIGxldCBhc2lkZTtcbiAgbGV0IGJlYWNvbjtcbiAgbGV0IHByb2JsZW1zO1xuICBsZXQgcHJlRXJyb3JzO1xuICBsZXQgcHJlV2FybmluZ3M7XG4gIGxldCB0aXRsZUVycm9ycztcbiAgbGV0IHRpdGxlV2FybmluZ3M7XG5cbiAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgcHJlRXJyb3JzLmlubmVySFRNTCA9ICcnO1xuICAgIHByZVdhcm5pbmdzLmlubmVySFRNTCA9ICcnO1xuICAgIHByb2JsZW1zLmNsYXNzTGlzdC5yZW1vdmUoYCR7bnN9LXN1Y2Nlc3NgKTtcbiAgICBiZWFjb24uY2xhc3NOYW1lID0gJyc7XG4gICAgdGl0bGVFcnJvcnMuaW5uZXJUZXh0ID0gJyc7XG4gICAgdGl0bGVXYXJuaW5ncy5pbm5lclRleHQgPSAnJztcbiAgfTtcblxuICBjb25zdCBhZGRFcnJvcnMgPSAoZXJyb3JzKSA9PiB7XG4gICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgIHByb2JsZW1zLmNsYXNzTGlzdC5yZW1vdmUoYCR7bnN9LXN1Y2Nlc3NgKTtcbiAgICAgIGJlYWNvbi5jbGFzc0xpc3QuYWRkKGAke25zfS1lcnJvcmApO1xuXG4gICAgICBmb3IgKGNvbnN0IGVycm9yIG9mIGVycm9ycykge1xuICAgICAgICBjb25zdCBtYXJrdXAgPSBgPGRpdj48ZW0+RXJyb3I8L2VtPiBpbiAke2Vycm9yfTwvZGl2PmA7XG4gICAgICAgIGFkZEh0bWwobWFya3VwLCBwcmVFcnJvcnMpO1xuICAgICAgfVxuXG4gICAgICB0aXRsZUVycm9ycy5pbm5lclRleHQgPSBgJHtlcnJvcnMubGVuZ3RofSBFcnJvcihzKWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlRXJyb3JzLmlubmVyVGV4dCA9ICcnO1xuICAgIH1cbiAgICBhc2lkZS5jbGFzc0xpc3QucmVtb3ZlKGhpZGRlbik7XG4gIH07XG5cbiAgY29uc3QgYWRkV2FybmluZ3MgPSAod2FybmluZ3MpID0+IHtcbiAgICBpZiAod2FybmluZ3MubGVuZ3RoKSB7XG4gICAgICBwcm9ibGVtcy5jbGFzc0xpc3QucmVtb3ZlKGAke25zfS1zdWNjZXNzYCk7XG5cbiAgICAgIGlmICghYmVhY29uLmNsYXNzTGlzdC5jb250YWlucyhgJHtuc30tZXJyb3JgKSkge1xuICAgICAgICBiZWFjb24uY2xhc3NMaXN0LmFkZChgJHtuc30td2FybmluZ2ApO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IHdhcm5pbmcgb2Ygd2FybmluZ3MpIHtcbiAgICAgICAgY29uc3QgbWFya3VwID0gYDxkaXY+PGVtPldhcm5pbmc8L2VtPiBpbiAke3dhcm5pbmd9PC9kaXY+YDtcbiAgICAgICAgYWRkSHRtbChtYXJrdXAsIHByZVdhcm5pbmdzKTtcbiAgICAgIH1cblxuICAgICAgdGl0bGVXYXJuaW5ncy5pbm5lclRleHQgPSBgJHt3YXJuaW5ncy5sZW5ndGh9IFdhcm5pbmcocylgO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZVdhcm5pbmdzLmlubmVyVGV4dCA9ICcnO1xuICAgIH1cblxuICAgIGFzaWRlLmNsYXNzTGlzdC5yZW1vdmUoaGlkZGVuKTtcbiAgfTtcblxuICBpZiAob3B0aW9ucy5maXJzdEluc3RhbmNlKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICAgIGFkZENzcyhjc3MpO1xuICAgICAgW2FzaWRlXSA9IGFkZEh0bWwoaHRtbCk7XG4gICAgICBiZWFjb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtuc30tYmVhY29uYCk7XG4gICAgICBwcm9ibGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke25zfS1wcm9ibGVtc2ApO1xuICAgICAgcHJlRXJyb3JzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7bnN9LWVycm9yc2ApO1xuICAgICAgcHJlV2FybmluZ3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtuc30td2FybmluZ3NgKTtcbiAgICAgIHRpdGxlRXJyb3JzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7bnN9LXRpdGxlLWVycm9yc2ApO1xuICAgICAgdGl0bGVXYXJuaW5ncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke25zfS10aXRsZS13YXJuaW5nc2ApO1xuXG4gICAgICBjb25zdCBjbG9zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke25zfS1jbG9zZWApO1xuICAgICAgY29uc3QgbWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7bnN9LW1pbmApO1xuXG4gICAgICBhc2lkZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgYXNpZGUuY2xhc3NMaXN0LnJlbW92ZShgJHtuc30tbWluYCk7XG4gICAgICB9KTtcblxuICAgICAgY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGFzaWRlLmNsYXNzTGlzdC5hZGQoYCR7bnN9LWhpZGRlbmApO1xuICAgICAgfSk7XG5cbiAgICAgIG1pbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGFzaWRlLmNsYXNzTGlzdC5hZGQoYCR7bnN9LW1pbmApO1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzb2NrZXRNZXNzYWdlKHNvY2tldCwgKGFjdGlvbiwgZGF0YSkgPT4ge1xuICAgIGlmICghYXNpZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IGNvbXBpbGVycyB9ID0gd2luZG93LndlYnBhY2tQbHVnaW5TZXJ2ZTtcblxuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICBjYXNlICdidWlsZCc6XG4gICAgICAgIC8vIGNsZWFyIGVycm9ycyBhbmQgd2FybmluZ3Mgd2hlbiBhIG5ldyBidWlsZCBiZWdpbnNcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwcm9ibGVtcyc6XG4gICAgICAgIGFkZEVycm9ycyhkYXRhLmVycm9ycyk7XG4gICAgICAgIGFkZFdhcm5pbmdzKGRhdGEud2FybmluZ3MpO1xuICAgICAgICBhc2lkZS5jbGFzc0xpc3QucmVtb3ZlKGhpZGRlbik7XG4gICAgICAgIGhhc1Byb2JsZW1zID0gZGF0YS5lcnJvcnMubGVuZ3RoIHx8IGRhdGEud2FybmluZ3MubGVuZ3RoO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlcGxhY2UnOlxuICAgICAgICAvLyBpZiB0aGVyZSdzIGEgY29tcGlsZXIgdGhhdCBpc24ndCBkb25lIHlldCwgaG9sZCBvZmYgYW5kIGxldCBpdCBydW4gdGhlIHNob3dcbiAgICAgICAgZm9yIChjb25zdCBjb21waWxlck5hbWUgb2YgT2JqZWN0LmtleXMoY29tcGlsZXJzKSkge1xuICAgICAgICAgIGlmICghY29tcGlsZXJzW2NvbXBpbGVyTmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzUHJvYmxlbXMgJiYgIXByZUVycm9ycy5jaGlsZHJlbi5sZW5ndGggJiYgIXByZVdhcm5pbmdzLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHJlc2V0KCk7XG4gICAgICAgICAgaGFzUHJvYmxlbXMgPSBmYWxzZTtcbiAgICAgICAgICBwcm9ibGVtcy5jbGFzc0xpc3QuYWRkKGAke25zfS1zdWNjZXNzYCk7XG4gICAgICAgICAgYXNpZGUuY2xhc3NMaXN0LnJlbW92ZShoaWRkZW4pO1xuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBhc2lkZS5jbGFzc0xpc3QuYWRkKGhpZGRlbiksIDNlMyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgaW5pdCB9O1xuIiwiaW1wb3J0ICogYXMgTXVzdGFjaGUgZnJvbSAnbXVzdGFjaGUnO1xyXG5pbXBvcnQgRGF0ZVRpbWVGb3JtYXQgPSBJbnRsLkRhdGVUaW1lRm9ybWF0O1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGUge1xyXG5cclxuICAgIHByaXZhdGUgaWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgdGl0bGU6IHN0cmluZztcclxuICAgIHByaXZhdGUgY29udGVudDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBzdGF0dXM6IHN0cmluZztcclxuICAgIHByaXZhdGUgdGVtcGxhdGU6IHN0cmluZztcclxuICAgIHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgY29sb3I6IHN0cmluZztcclxuICAgIHByaXZhdGUgc29ydEluZGV4OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGRlbGV0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBvbmVMaW5lcnM6IGFueSA9IFtcclxuICAgICAgICAnV2hhdCBpcyB0aGUgYmlnZ2VzdCBsaWUgaW4gdGhlIGVudGlyZSB1bml2ZXJzZT8gPGJyPlwiSSBoYXZlIHJlYWQgYW5kIGFncmVlIHRvIHRoZSBUZXJtcyAmIENvbmRpdGlvbnMuXCInLFxyXG4gICAgICAgICdIb3cgZG9lcyBhIGNvbXB1dGVyIGdldCBkcnVuaz8gPGJyPkl0IHRha2VzIHNjcmVlbnNob3RzLiAnLFxyXG4gICAgICAgIC8vICdXaHkgYXJlIGlQaG9uZSBjaGFyZ2VycyBub3QgY2FsbGVkIEFwcGxlIEp1aWNlPyEnLFxyXG4gICAgICAgIC8vICdXaHkgZGlkIHRoZSBQb3dlclBvaW50IFByZXNlbnRhdGlvbiBjcm9zcyB0aGUgcm9hZD8gPGJyPlRvIGdldCB0byB0aGUgb3RoZXIgc2xpZGUuJyxcclxuICAgICAgICAnSGF2ZSB5b3UgaGVhcmQgb2YgdGhhdCBuZXcgYmFuZCBcIjEwMjMgTWVnYWJ5dGVzXCI/IFRoZXlcXCdyZSBwcmV0dHkgZ29vZCwgYnV0IHRoZXkgZG9uXFwndCBoYXZlIGEgZ2lnIGp1c3QgeWV0LicsXHJcbiAgICAgICAgJ1dlXFwnbGwgd2VcXCdsbCB3ZVxcJ2xsLi4uaWYgaXQgaXNuXFwndCBhdXRvY29ycmVjdC4nLFxyXG4gICAgICAgICdNeSBjb21wdXRlciBzdWRkZW5seSBzdGFydGVkIGJlbHRpbmcgb3V0IFwiU29tZW9uZSBMaWtlIFlvdS5cIiBJdFxcJ3MgYSBEZWxsLiAnLFxyXG4gICAgXTtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBkYXRlT3B0aW9ucyA9IHtcclxuICAgICAgICB5ZWFyOiAnbnVtZXJpYycsXHJcbiAgICAgICAgbW9udGg6ICdsb25nJyxcclxuICAgICAgICBkYXk6ICdudW1lcmljJyxcclxuICAgICAgICBob3VyOiAnbnVtZXJpYycsXHJcbiAgICAgICAgbWludXRlOiAnbnVtZXJpYycsXHJcbiAgICB9XHJcblxyXG4gICAgc2V0SWQoaWQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRUaXRsZSh0aXRsZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbnRlbnQoY29udGVudDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTdGF0dXMoc3RhdHVzOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcclxuICAgIH1cclxuXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUaXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aXRsZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb250ZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RhdHVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXR1cztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2VuZXJhdGVJZCgpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDb2xvcihjb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbG9yKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFNvcnRJbmRleChpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0SW5kZXggPSBpbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTb3J0SW5kZXgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb3J0SW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGVsZXRlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzdG9yZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRlbGV0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpc0RlbGV0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlZCA9PT0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY3JlYXRlTmV3Tm90ZSgpIHtcclxuICAgICAgICBjb25zdCBzZWxmID0gbmV3IE5vdGUoKTtcclxuICAgICAgICBsZXQgZHRmID0gbmV3IERhdGVUaW1lRm9ybWF0KCduby1OQicsIE5vdGUuZGF0ZU9wdGlvbnMpO1xyXG5cclxuICAgICAgICBzZWxmLmlkID0gTm90ZS5nZW5lcmF0ZUlkKCk7XHJcbiAgICAgICAgc2VsZi50aXRsZSA9IGR0Zi5mb3JtYXQoKERhdGUubm93KCkpKTtcclxuICAgICAgICBzZWxmLmNvbnRlbnQgPSBOb3RlLm9uZUxpbmVyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOb3RlLm9uZUxpbmVycy5sZW5ndGgpXVxyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjcmVhdGVGcm9tRGF0YShkYXRhOiBhbnkpIHtcclxuICAgICAgICBsZXQgc2VsZiA9IG5ldyBOb3RlKCk7XHJcbiAgICAgICAgc2VsZi5pZCA9IGRhdGEuaWQ7XHJcbiAgICAgICAgc2VsZi50aXRsZSA9IGRhdGEudGl0bGU7XHJcbiAgICAgICAgc2VsZi5jb250ZW50ID0gZGF0YS5jb250ZW50O1xyXG4gICAgICAgIHNlbGYuY29sb3IgPSBkYXRhLmNvbG9yO1xyXG4gICAgICAgIHNlbGYuc29ydEluZGV4ID0gZGF0YS5zb3J0SW5kZXg7XHJcbiAgICAgICAgc2VsZi5kZWxldGVkID0gZGF0YS5kZWxldGVkO1xyXG5cclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgIH1cclxuXHJcblxyXG59IiwiLyoqIVxuICogU29ydGFibGUgMS4xMC4yXG4gKiBAYXV0aG9yXHRSdWJhWGEgICA8dHJhc2hAcnViYXhhLm9yZz5cbiAqIEBhdXRob3JcdG93ZW5tICAgIDxvd2VuMjMzNTVAZ21haWwuY29tPlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjEuMTAuMlwiO1xuXG5mdW5jdGlvbiB1c2VyQWdlbnQocGF0dGVybikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvcikge1xuICAgIHJldHVybiAhIVxuICAgIC8qQF9fUFVSRV9fKi9cbiAgICBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHBhdHRlcm4pO1xuICB9XG59XG5cbnZhciBJRTExT3JMZXNzID0gdXNlckFnZW50KC8oPzpUcmlkZW50LipydlsgOl0/MTFcXC58bXNpZXxpZW1vYmlsZXxXaW5kb3dzIFBob25lKS9pKTtcbnZhciBFZGdlID0gdXNlckFnZW50KC9FZGdlL2kpO1xudmFyIEZpcmVGb3ggPSB1c2VyQWdlbnQoL2ZpcmVmb3gvaSk7XG52YXIgU2FmYXJpID0gdXNlckFnZW50KC9zYWZhcmkvaSkgJiYgIXVzZXJBZ2VudCgvY2hyb21lL2kpICYmICF1c2VyQWdlbnQoL2FuZHJvaWQvaSk7XG52YXIgSU9TID0gdXNlckFnZW50KC9pUChhZHxvZHxob25lKS9pKTtcbnZhciBDaHJvbWVGb3JBbmRyb2lkID0gdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgdXNlckFnZW50KC9hbmRyb2lkL2kpO1xuXG52YXIgY2FwdHVyZU1vZGUgPSB7XG4gIGNhcHR1cmU6IGZhbHNlLFxuICBwYXNzaXZlOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gb24oZWwsIGV2ZW50LCBmbikge1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpO1xufVxuXG5mdW5jdGlvbiBvZmYoZWwsIGV2ZW50LCBmbikge1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVzKFxuLyoqSFRNTEVsZW1lbnQqL1xuZWwsXG4vKipTdHJpbmcqL1xuc2VsZWN0b3IpIHtcbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuO1xuICBzZWxlY3RvclswXSA9PT0gJz4nICYmIChzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cmluZygxKSk7XG5cbiAgaWYgKGVsKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChlbC5tYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudE9ySG9zdChlbCkge1xuICByZXR1cm4gZWwuaG9zdCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwuaG9zdC5ub2RlVHlwZSA/IGVsLmhvc3QgOiBlbC5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0KFxuLyoqSFRNTEVsZW1lbnQqL1xuZWwsXG4vKipTdHJpbmcqL1xuc2VsZWN0b3IsXG4vKipIVE1MRWxlbWVudCovXG5jdHgsIGluY2x1ZGVDVFgpIHtcbiAgaWYgKGVsKSB7XG4gICAgY3R4ID0gY3R4IHx8IGRvY3VtZW50O1xuXG4gICAgZG8ge1xuICAgICAgaWYgKHNlbGVjdG9yICE9IG51bGwgJiYgKHNlbGVjdG9yWzBdID09PSAnPicgPyBlbC5wYXJlbnROb2RlID09PSBjdHggJiYgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpIDogbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSB8fCBpbmNsdWRlQ1RYICYmIGVsID09PSBjdHgpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWwgPT09IGN0eCkgYnJlYWs7XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgfSB3aGlsZSAoZWwgPSBnZXRQYXJlbnRPckhvc3QoZWwpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUl9TUEFDRSA9IC9cXHMrL2c7XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsLCBuYW1lLCBzdGF0ZSkge1xuICBpZiAoZWwgJiYgbmFtZSkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzdGF0ZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykucmVwbGFjZShSX1NQQUNFLCAnICcpLnJlcGxhY2UoJyAnICsgbmFtZSArICcgJywgJyAnKTtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IChjbGFzc05hbWUgKyAoc3RhdGUgPyAnICcgKyBuYW1lIDogJycpKS5yZXBsYWNlKFJfU1BBQ0UsICcgJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNzcyhlbCwgcHJvcCwgdmFsKSB7XG4gIHZhciBzdHlsZSA9IGVsICYmIGVsLnN0eWxlO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgdmFsID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgJycpO1xuICAgICAgfSBlbHNlIGlmIChlbC5jdXJyZW50U3R5bGUpIHtcbiAgICAgICAgdmFsID0gZWwuY3VycmVudFN0eWxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcCA9PT0gdm9pZCAwID8gdmFsIDogdmFsW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShwcm9wIGluIHN0eWxlKSAmJiBwcm9wLmluZGV4T2YoJ3dlYmtpdCcpID09PSAtMSkge1xuICAgICAgICBwcm9wID0gJy13ZWJraXQtJyArIHByb3A7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlW3Byb3BdID0gdmFsICsgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gJycgOiAncHgnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0cml4KGVsLCBzZWxmT25seSkge1xuICB2YXIgYXBwbGllZFRyYW5zZm9ybXMgPSAnJztcblxuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gZWw7XG4gIH0gZWxzZSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGNzcyhlbCwgJ3RyYW5zZm9ybScpO1xuXG4gICAgICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gdHJhbnNmb3JtICsgJyAnICsgYXBwbGllZFRyYW5zZm9ybXM7XG4gICAgICB9XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgICB9IHdoaWxlICghc2VsZk9ubHkgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG5cbiAgdmFyIG1hdHJpeEZuID0gd2luZG93LkRPTU1hdHJpeCB8fCB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4IHx8IHdpbmRvdy5DU1NNYXRyaXggfHwgd2luZG93Lk1TQ1NTTWF0cml4O1xuICAvKmpzaGludCAtVzA1NiAqL1xuXG4gIHJldHVybiBtYXRyaXhGbiAmJiBuZXcgbWF0cml4Rm4oYXBwbGllZFRyYW5zZm9ybXMpO1xufVxuXG5mdW5jdGlvbiBmaW5kKGN0eCwgdGFnTmFtZSwgaXRlcmF0b3IpIHtcbiAgaWYgKGN0eCkge1xuICAgIHZhciBsaXN0ID0gY3R4LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9IGxpc3QubGVuZ3RoO1xuXG4gICAgaWYgKGl0ZXJhdG9yKSB7XG4gICAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgICBpdGVyYXRvcihsaXN0W2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpIHtcbiAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50O1xuXG4gIGlmIChzY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIFwiYm91bmRpbmcgY2xpZW50IHJlY3RcIiBvZiBnaXZlbiBlbGVtZW50XHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICAgICAgICAgICAgICAgICAgVGhlIGVsZW1lbnQgd2hvc2UgYm91bmRpbmdDbGllbnRSZWN0IGlzIHdhbnRlZFxyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgIFdoZXRoZXIgdGhlIHJlY3Qgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBjb250YWluaW5nIGJsb2NrIG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWluZXJcclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICBXaGV0aGVyIHRoZSByZWN0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgcmVsYXRpdmUgcGFyZW50IG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWllbnJcclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSB1bmRvU2NhbGUgICAgICAgICAgICAgICAgICBXaGV0aGVyIHRoZSBjb250YWluZXIncyBzY2FsZSgpIHNob3VsZCBiZSB1bmRvbmVcclxuICogQHBhcmFtICB7W0hUTUxFbGVtZW50XX0gY29udGFpbmVyICAgICAgICAgICAgICBUaGUgcGFyZW50IHRoZSBlbGVtZW50IHdpbGwgYmUgcGxhY2VkIGluXHJcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGJvdW5kaW5nQ2xpZW50UmVjdCBvZiBlbCwgd2l0aCBzcGVjaWZpZWQgYWRqdXN0bWVudHNcclxuICovXG5cblxuZnVuY3Rpb24gZ2V0UmVjdChlbCwgcmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jaywgcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCwgdW5kb1NjYWxlLCBjb250YWluZXIpIHtcbiAgaWYgKCFlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgZWwgIT09IHdpbmRvdykgcmV0dXJuO1xuICB2YXIgZWxSZWN0LCB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIGhlaWdodCwgd2lkdGg7XG5cbiAgaWYgKGVsICE9PSB3aW5kb3cgJiYgZWwgIT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkge1xuICAgIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRvcCA9IGVsUmVjdC50b3A7XG4gICAgbGVmdCA9IGVsUmVjdC5sZWZ0O1xuICAgIGJvdHRvbSA9IGVsUmVjdC5ib3R0b207XG4gICAgcmlnaHQgPSBlbFJlY3QucmlnaHQ7XG4gICAgaGVpZ2h0ID0gZWxSZWN0LmhlaWdodDtcbiAgICB3aWR0aCA9IGVsUmVjdC53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSAwO1xuICAgIGxlZnQgPSAwO1xuICAgIGJvdHRvbSA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICByaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKChyZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrIHx8IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQpICYmIGVsICE9PSB3aW5kb3cpIHtcbiAgICAvLyBBZGp1c3QgZm9yIHRyYW5zbGF0ZSgpXG4gICAgY29udGFpbmVyID0gY29udGFpbmVyIHx8IGVsLnBhcmVudE5vZGU7IC8vIHNvbHZlcyAjMTEyMyAoc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzc5NTM4MDYvNjA4ODMxMilcbiAgICAvLyBOb3QgbmVlZGVkIG9uIDw9IElFMTFcblxuICAgIGlmICghSUUxMU9yTGVzcykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgKGNzcyhjb250YWluZXIsICd0cmFuc2Zvcm0nKSAhPT0gJ25vbmUnIHx8IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQgJiYgY3NzKGNvbnRhaW5lciwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnKSkge1xuICAgICAgICAgIHZhciBjb250YWluZXJSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBTZXQgcmVsYXRpdmUgdG8gZWRnZXMgb2YgcGFkZGluZyBib3ggb2YgY29udGFpbmVyXG5cbiAgICAgICAgICB0b3AgLT0gY29udGFpbmVyUmVjdC50b3AgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICAgICAgICBsZWZ0IC09IGNvbnRhaW5lclJlY3QubGVmdCArIHBhcnNlSW50KGNzcyhjb250YWluZXIsICdib3JkZXItbGVmdC13aWR0aCcpKTtcbiAgICAgICAgICBib3R0b20gPSB0b3AgKyBlbFJlY3QuaGVpZ2h0O1xuICAgICAgICAgIHJpZ2h0ID0gbGVmdCArIGVsUmVjdC53aWR0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgICAgIH0gd2hpbGUgKGNvbnRhaW5lciA9IGNvbnRhaW5lci5wYXJlbnROb2RlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5kb1NjYWxlICYmIGVsICE9PSB3aW5kb3cpIHtcbiAgICAvLyBBZGp1c3QgZm9yIHNjYWxlKClcbiAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoY29udGFpbmVyIHx8IGVsKSxcbiAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgc2NhbGVZID0gZWxNYXRyaXggJiYgZWxNYXRyaXguZDtcblxuICAgIGlmIChlbE1hdHJpeCkge1xuICAgICAgdG9wIC89IHNjYWxlWTtcbiAgICAgIGxlZnQgLz0gc2NhbGVYO1xuICAgICAgd2lkdGggLz0gc2NhbGVYO1xuICAgICAgaGVpZ2h0IC89IHNjYWxlWTtcbiAgICAgIGJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgICAgIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICByaWdodDogcmlnaHQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG4vKipcclxuICogQ2hlY2tzIGlmIGEgc2lkZSBvZiBhbiBlbGVtZW50IGlzIHNjcm9sbGVkIHBhc3QgYSBzaWRlIG9mIGl0cyBwYXJlbnRzXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWwgICAgICAgICAgIFRoZSBlbGVtZW50IHdobydzIHNpZGUgYmVpbmcgc2Nyb2xsZWQgb3V0IG9mIHZpZXcgaXMgaW4gcXVlc3Rpb25cclxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBlbFNpZGUgICAgICAgU2lkZSBvZiB0aGUgZWxlbWVudCBpbiBxdWVzdGlvbiAoJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbScpXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgcGFyZW50U2lkZSAgIFNpZGUgb2YgdGhlIHBhcmVudCBpbiBxdWVzdGlvbiAoJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbScpXHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICAgICAgIFRoZSBwYXJlbnQgc2Nyb2xsIGVsZW1lbnQgdGhhdCB0aGUgZWwncyBzaWRlIGlzIHNjcm9sbGVkIHBhc3QsIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gc3VjaCBlbGVtZW50XHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzU2Nyb2xsZWRQYXN0KGVsLCBlbFNpZGUsIHBhcmVudFNpZGUpIHtcbiAgdmFyIHBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsLCB0cnVlKSxcbiAgICAgIGVsU2lkZVZhbCA9IGdldFJlY3QoZWwpW2VsU2lkZV07XG4gIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgdmFyIHBhcmVudFNpZGVWYWwgPSBnZXRSZWN0KHBhcmVudClbcGFyZW50U2lkZV0sXG4gICAgICAgIHZpc2libGUgPSB2b2lkIDA7XG5cbiAgICBpZiAocGFyZW50U2lkZSA9PT0gJ3RvcCcgfHwgcGFyZW50U2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsID49IHBhcmVudFNpZGVWYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpc2libGUgPSBlbFNpZGVWYWwgPD0gcGFyZW50U2lkZVZhbDtcbiAgICB9XG5cbiAgICBpZiAoIXZpc2libGUpIHJldHVybiBwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSBicmVhaztcbiAgICBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChwYXJlbnQsIGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxyXG4gKiBHZXRzIG50aCBjaGlsZCBvZiBlbCwgaWdub3JpbmcgaGlkZGVuIGNoaWxkcmVuLCBzb3J0YWJsZSdzIGVsZW1lbnRzIChkb2VzIG5vdCBpZ25vcmUgY2xvbmUgaWYgaXQncyB2aXNpYmxlKVxyXG4gKiBhbmQgbm9uLWRyYWdnYWJsZSBlbGVtZW50c1xyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgVGhlIHBhcmVudCBlbGVtZW50XHJcbiAqIEBwYXJhbSAge051bWJlcn0gY2hpbGROdW0gICAgICBUaGUgaW5kZXggb2YgdGhlIGNoaWxkXHJcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyAgICAgICBQYXJlbnQgU29ydGFibGUncyBvcHRpb25zXHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgY2hpbGQgYXQgaW5kZXggY2hpbGROdW0sIG9yIG51bGwgaWYgbm90IGZvdW5kXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENoaWxkKGVsLCBjaGlsZE51bSwgb3B0aW9ucykge1xuICB2YXIgY3VycmVudENoaWxkID0gMCxcbiAgICAgIGkgPSAwLFxuICAgICAgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcblxuICB3aGlsZSAoaSA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGlmIChjaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScgJiYgY2hpbGRyZW5baV0gIT09IFNvcnRhYmxlLmdob3N0ICYmIGNoaWxkcmVuW2ldICE9PSBTb3J0YWJsZS5kcmFnZ2VkICYmIGNsb3Nlc3QoY2hpbGRyZW5baV0sIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgZmFsc2UpKSB7XG4gICAgICBpZiAoY3VycmVudENoaWxkID09PSBjaGlsZE51bSkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5baV07XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRDaGlsZCsrO1xuICAgIH1cblxuICAgIGkrKztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXHJcbiAqIEdldHMgdGhlIGxhc3QgY2hpbGQgaW4gdGhlIGVsLCBpZ25vcmluZyBnaG9zdEVsIG9yIGludmlzaWJsZSBlbGVtZW50cyAoY2xvbmVzKVxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgUGFyZW50IGVsZW1lbnRcclxuICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yICAgIEFueSBvdGhlciBlbGVtZW50cyB0aGF0IHNob3VsZCBiZSBpZ25vcmVkXHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgbGFzdCBjaGlsZCwgaWdub3JpbmcgZ2hvc3RFbFxyXG4gKi9cblxuXG5mdW5jdGlvbiBsYXN0Q2hpbGQoZWwsIHNlbGVjdG9yKSB7XG4gIHZhciBsYXN0ID0gZWwubGFzdEVsZW1lbnRDaGlsZDtcblxuICB3aGlsZSAobGFzdCAmJiAobGFzdCA9PT0gU29ydGFibGUuZ2hvc3QgfHwgY3NzKGxhc3QsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBzZWxlY3RvciAmJiAhbWF0Y2hlcyhsYXN0LCBzZWxlY3RvcikpKSB7XG4gICAgbGFzdCA9IGxhc3QucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgfVxuXG4gIHJldHVybiBsYXN0IHx8IG51bGw7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgYW4gZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudCBmb3IgYSBzZWxlY3RlZCBzZXQgb2ZcclxuICogZWxlbWVudHNcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsXHJcbiAqIEBwYXJhbSAge3NlbGVjdG9yfSBzZWxlY3RvclxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGluZGV4KGVsLCBzZWxlY3Rvcikge1xuICB2YXIgaW5kZXggPSAwO1xuXG4gIGlmICghZWwgfHwgIWVsLnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXG5cbiAgd2hpbGUgKGVsID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIGlmIChlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnVEVNUExBVEUnICYmIGVsICE9PSBTb3J0YWJsZS5jbG9uZSAmJiAoIXNlbGVjdG9yIHx8IG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHNjcm9sbCBvZmZzZXQgb2YgdGhlIGdpdmVuIGVsZW1lbnQsIGFkZGVkIHdpdGggYWxsIHRoZSBzY3JvbGwgb2Zmc2V0cyBvZiBwYXJlbnQgZWxlbWVudHMuXHJcbiAqIFRoZSB2YWx1ZSBpcyByZXR1cm5lZCBpbiByZWFsIHBpeGVscy5cclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsXHJcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICBPZmZzZXRzIGluIHRoZSBmb3JtYXQgb2YgW2xlZnQsIHRvcF1cclxuICovXG5cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZWwpIHtcbiAgdmFyIG9mZnNldExlZnQgPSAwLFxuICAgICAgb2Zmc2V0VG9wID0gMCxcbiAgICAgIHdpblNjcm9sbGVyID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuXG4gIGlmIChlbCkge1xuICAgIGRvIHtcbiAgICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChlbCksXG4gICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXguYSxcbiAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeC5kO1xuICAgICAgb2Zmc2V0TGVmdCArPSBlbC5zY3JvbGxMZWZ0ICogc2NhbGVYO1xuICAgICAgb2Zmc2V0VG9wICs9IGVsLnNjcm9sbFRvcCAqIHNjYWxlWTtcbiAgICB9IHdoaWxlIChlbCAhPT0gd2luU2Nyb2xsZXIgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG5cbiAgcmV0dXJuIFtvZmZzZXRMZWZ0LCBvZmZzZXRUb3BdO1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBvYmplY3Qgd2l0aGluIHRoZSBnaXZlbiBhcnJheVxyXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyICAgQXJyYXkgdGhhdCBtYXkgb3IgbWF5IG5vdCBob2xkIHRoZSBvYmplY3RcclxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogIEFuIG9iamVjdCB0aGF0IGhhcyBhIGtleS12YWx1ZSBwYWlyIHVuaXF1ZSB0byBhbmQgaWRlbnRpY2FsIHRvIGEga2V5LXZhbHVlIHBhaXIgaW4gdGhlIG9iamVjdCB5b3Ugd2FudCB0byBmaW5kXHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICBUaGUgaW5kZXggb2YgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXksIG9yIC0xXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGluZGV4T2ZPYmplY3QoYXJyLCBvYmopIHtcbiAgZm9yICh2YXIgaSBpbiBhcnIpIHtcbiAgICBpZiAoIWFyci5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV0gPT09IGFycltpXVtrZXldKSByZXR1cm4gTnVtYmVyKGkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWwsIGluY2x1ZGVTZWxmKSB7XG4gIC8vIHNraXAgdG8gd2luZG93XG4gIGlmICghZWwgfHwgIWVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIGVsZW0gPSBlbDtcbiAgdmFyIGdvdFNlbGYgPSBmYWxzZTtcblxuICBkbyB7XG4gICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBnZXQgZWxlbSBjc3MgaWYgaXQgaXNuJ3QgZXZlbiBvdmVyZmxvd2luZyBpbiB0aGUgZmlyc3QgcGxhY2UgKHBlcmZvcm1hbmNlKVxuICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB2YXIgZWxlbUNTUyA9IGNzcyhlbGVtKTtcblxuICAgICAgaWYgKGVsZW0uY2xpZW50V2lkdGggPCBlbGVtLnNjcm9sbFdpZHRoICYmIChlbGVtQ1NTLm92ZXJmbG93WCA9PSAnYXV0bycgfHwgZWxlbUNTUy5vdmVyZmxvd1ggPT0gJ3Njcm9sbCcpIHx8IGVsZW0uY2xpZW50SGVpZ2h0IDwgZWxlbS5zY3JvbGxIZWlnaHQgJiYgKGVsZW1DU1Mub3ZlcmZsb3dZID09ICdhdXRvJyB8fCBlbGVtQ1NTLm92ZXJmbG93WSA9PSAnc2Nyb2xsJykpIHtcbiAgICAgICAgaWYgKCFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCB8fCBlbGVtID09PSBkb2N1bWVudC5ib2R5KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICBpZiAoZ290U2VsZiB8fCBpbmNsdWRlU2VsZikgcmV0dXJuIGVsZW07XG4gICAgICAgIGdvdFNlbGYgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgfSB3aGlsZSAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSk7XG5cbiAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGRzdCwgc3JjKSB7XG4gIGlmIChkc3QgJiYgc3JjKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdDtcbn1cblxuZnVuY3Rpb24gaXNSZWN0RXF1YWwocmVjdDEsIHJlY3QyKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHJlY3QxLnRvcCkgPT09IE1hdGgucm91bmQocmVjdDIudG9wKSAmJiBNYXRoLnJvdW5kKHJlY3QxLmxlZnQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmxlZnQpICYmIE1hdGgucm91bmQocmVjdDEuaGVpZ2h0KSA9PT0gTWF0aC5yb3VuZChyZWN0Mi5oZWlnaHQpICYmIE1hdGgucm91bmQocmVjdDEud2lkdGgpID09PSBNYXRoLnJvdW5kKHJlY3QyLndpZHRoKTtcbn1cblxudmFyIF90aHJvdHRsZVRpbWVvdXQ7XG5cbmZ1bmN0aW9uIHRocm90dGxlKGNhbGxiYWNrLCBtcykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3Rocm90dGxlVGltZW91dCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChfdGhpcywgYXJnc1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIF90aHJvdHRsZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3Rocm90dGxlVGltZW91dCA9IHZvaWQgMDtcbiAgICAgIH0sIG1zKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFRocm90dGxlKCkge1xuICBjbGVhclRpbWVvdXQoX3Rocm90dGxlVGltZW91dCk7XG4gIF90aHJvdHRsZVRpbWVvdXQgPSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbEJ5KGVsLCB4LCB5KSB7XG4gIGVsLnNjcm9sbExlZnQgKz0geDtcbiAgZWwuc2Nyb2xsVG9wICs9IHk7XG59XG5cbmZ1bmN0aW9uIGNsb25lKGVsKSB7XG4gIHZhciBQb2x5bWVyID0gd2luZG93LlBvbHltZXI7XG4gIHZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XG5cbiAgaWYgKFBvbHltZXIgJiYgUG9seW1lci5kb20pIHtcbiAgICByZXR1cm4gUG9seW1lci5kb20oZWwpLmNsb25lTm9kZSh0cnVlKTtcbiAgfSBlbHNlIGlmICgkKSB7XG4gICAgcmV0dXJuICQoZWwpLmNsb25lKHRydWUpWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0UmVjdChlbCwgcmVjdCkge1xuICBjc3MoZWwsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICBjc3MoZWwsICd0b3AnLCByZWN0LnRvcCk7XG4gIGNzcyhlbCwgJ2xlZnQnLCByZWN0LmxlZnQpO1xuICBjc3MoZWwsICd3aWR0aCcsIHJlY3Qud2lkdGgpO1xuICBjc3MoZWwsICdoZWlnaHQnLCByZWN0LmhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIHVuc2V0UmVjdChlbCkge1xuICBjc3MoZWwsICdwb3NpdGlvbicsICcnKTtcbiAgY3NzKGVsLCAndG9wJywgJycpO1xuICBjc3MoZWwsICdsZWZ0JywgJycpO1xuICBjc3MoZWwsICd3aWR0aCcsICcnKTtcbiAgY3NzKGVsLCAnaGVpZ2h0JywgJycpO1xufVxuXG52YXIgZXhwYW5kbyA9ICdTb3J0YWJsZScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuZnVuY3Rpb24gQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkge1xuICB2YXIgYW5pbWF0aW9uU3RhdGVzID0gW10sXG4gICAgICBhbmltYXRpb25DYWxsYmFja0lkO1xuICByZXR1cm4ge1xuICAgIGNhcHR1cmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gY2FwdHVyZUFuaW1hdGlvblN0YXRlKCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHJldHVybjtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZHJlbik7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY3NzKGNoaWxkLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgY2hpbGQgPT09IFNvcnRhYmxlLmdob3N0KSByZXR1cm47XG4gICAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHtcbiAgICAgICAgICB0YXJnZXQ6IGNoaWxkLFxuICAgICAgICAgIHJlY3Q6IGdldFJlY3QoY2hpbGQpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBmcm9tUmVjdCA9IF9vYmplY3RTcHJlYWQoe30sIGFuaW1hdGlvblN0YXRlc1thbmltYXRpb25TdGF0ZXMubGVuZ3RoIC0gMV0ucmVjdCk7IC8vIElmIGFuaW1hdGluZzogY29tcGVuc2F0ZSBmb3IgY3VycmVudCBhbmltYXRpb25cblxuXG4gICAgICAgIGlmIChjaGlsZC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgY2hpbGRNYXRyaXggPSBtYXRyaXgoY2hpbGQsIHRydWUpO1xuXG4gICAgICAgICAgaWYgKGNoaWxkTWF0cml4KSB7XG4gICAgICAgICAgICBmcm9tUmVjdC50b3AgLT0gY2hpbGRNYXRyaXguZjtcbiAgICAgICAgICAgIGZyb21SZWN0LmxlZnQgLT0gY2hpbGRNYXRyaXguZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5mcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBhZGRBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gYWRkQW5pbWF0aW9uU3RhdGUoc3RhdGUpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICB9LFxuICAgIHJlbW92ZUFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiByZW1vdmVBbmltYXRpb25TdGF0ZSh0YXJnZXQpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5zcGxpY2UoaW5kZXhPZk9iamVjdChhbmltYXRpb25TdGF0ZXMsIHtcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0pLCAxKTtcbiAgICB9LFxuICAgIGFuaW1hdGVBbGw6IGZ1bmN0aW9uIGFuaW1hdGVBbGwoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuaW1hdGluZyA9IGZhbHNlLFxuICAgICAgICAgIGFuaW1hdGlvblRpbWUgPSAwO1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIHRhcmdldCA9IHN0YXRlLnRhcmdldCxcbiAgICAgICAgICAgIGZyb21SZWN0ID0gdGFyZ2V0LmZyb21SZWN0LFxuICAgICAgICAgICAgdG9SZWN0ID0gZ2V0UmVjdCh0YXJnZXQpLFxuICAgICAgICAgICAgcHJldkZyb21SZWN0ID0gdGFyZ2V0LnByZXZGcm9tUmVjdCxcbiAgICAgICAgICAgIHByZXZUb1JlY3QgPSB0YXJnZXQucHJldlRvUmVjdCxcbiAgICAgICAgICAgIGFuaW1hdGluZ1JlY3QgPSBzdGF0ZS5yZWN0LFxuICAgICAgICAgICAgdGFyZ2V0TWF0cml4ID0gbWF0cml4KHRhcmdldCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRhcmdldE1hdHJpeCkge1xuICAgICAgICAgIC8vIENvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG4gICAgICAgICAgdG9SZWN0LnRvcCAtPSB0YXJnZXRNYXRyaXguZjtcbiAgICAgICAgICB0b1JlY3QubGVmdCAtPSB0YXJnZXRNYXRyaXguZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldC50b1JlY3QgPSB0b1JlY3Q7XG5cbiAgICAgICAgaWYgKHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAvLyBDb3VsZCBhbHNvIGNoZWNrIGlmIGFuaW1hdGluZ1JlY3QgaXMgYmV0d2VlbiBmcm9tUmVjdCBhbmQgdG9SZWN0XG4gICAgICAgICAgaWYgKGlzUmVjdEVxdWFsKHByZXZGcm9tUmVjdCwgdG9SZWN0KSAmJiAhaXNSZWN0RXF1YWwoZnJvbVJlY3QsIHRvUmVjdCkgJiYgLy8gTWFrZSBzdXJlIGFuaW1hdGluZ1JlY3QgaXMgb24gbGluZSBiZXR3ZWVuIHRvUmVjdCAmIGZyb21SZWN0XG4gICAgICAgICAgKGFuaW1hdGluZ1JlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoYW5pbWF0aW5nUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpID09PSAoZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoZnJvbVJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSkge1xuICAgICAgICAgICAgLy8gSWYgcmV0dXJuaW5nIHRvIHNhbWUgcGxhY2UgYXMgc3RhcnRlZCBmcm9tIGFuaW1hdGlvbiBhbmQgb24gc2FtZSBheGlzXG4gICAgICAgICAgICB0aW1lID0gY2FsY3VsYXRlUmVhbFRpbWUoYW5pbWF0aW5nUmVjdCwgcHJldkZyb21SZWN0LCBwcmV2VG9SZWN0LCBfdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gaWYgZnJvbVJlY3QgIT0gdG9SZWN0OiBhbmltYXRlXG5cblxuICAgICAgICBpZiAoIWlzUmVjdEVxdWFsKHRvUmVjdCwgZnJvbVJlY3QpKSB7XG4gICAgICAgICAgdGFyZ2V0LnByZXZGcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gdG9SZWN0O1xuXG4gICAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICB0aW1lID0gX3RoaXMub3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuYW5pbWF0ZSh0YXJnZXQsIGFuaW1hdGluZ1JlY3QsIHRvUmVjdCwgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgIGFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgYW5pbWF0aW9uVGltZSA9IE1hdGgubWF4KGFuaW1hdGlvblRpbWUsIHRpbWUpO1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lcik7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhcmdldC5hbmltYXRpb25UaW1lID0gMDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBudWxsO1xuICAgICAgICAgICAgdGFyZ2V0LmZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgIH0sIHRpbWUpO1xuICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSB0aW1lO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25DYWxsYmFja0lkKTtcblxuICAgICAgaWYgKCFhbmltYXRpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICB9LCBhbmltYXRpb25UaW1lKTtcbiAgICAgIH1cblxuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHRhcmdldCwgY3VycmVudFJlY3QsIHRvUmVjdCwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KHRoaXMuZWwpLFxuICAgICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQsXG4gICAgICAgICAgICB0cmFuc2xhdGVYID0gKGN1cnJlbnRSZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkgLyAoc2NhbGVYIHx8IDEpLFxuICAgICAgICAgICAgdHJhbnNsYXRlWSA9IChjdXJyZW50UmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChzY2FsZVkgfHwgMSk7XG4gICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gISF0cmFuc2xhdGVYO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9ICEhdHJhbnNsYXRlWTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnICsgdHJhbnNsYXRlWCArICdweCwnICsgdHJhbnNsYXRlWSArICdweCwwKScpO1xuICAgICAgICByZXBhaW50KHRhcmdldCk7IC8vIHJlcGFpbnRcblxuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICd0cmFuc2Zvcm0gJyArIGR1cmF0aW9uICsgJ21zJyArICh0aGlzLm9wdGlvbnMuZWFzaW5nID8gJyAnICsgdGhpcy5vcHRpb25zLmVhc2luZyA6ICcnKSk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICAgIHR5cGVvZiB0YXJnZXQuYW5pbWF0ZWQgPT09ICdudW1iZXInICYmIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0ZWQpO1xuICAgICAgICB0YXJnZXQuYW5pbWF0ZWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSBmYWxzZTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVwYWludCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5vZmZzZXRXaWR0aDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUmVhbFRpbWUoYW5pbWF0aW5nUmVjdCwgZnJvbVJlY3QsIHRvUmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGZyb21SZWN0LnRvcCAtIGFuaW1hdGluZ1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSBhbmltYXRpbmdSZWN0LmxlZnQsIDIpKSAvIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSB0b1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSB0b1JlY3QubGVmdCwgMikpICogb3B0aW9ucy5hbmltYXRpb247XG59XG5cbnZhciBwbHVnaW5zID0gW107XG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWVcbn07XG52YXIgUGx1Z2luTWFuYWdlciA9IHtcbiAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KHBsdWdpbikge1xuICAgIC8vIFNldCBkZWZhdWx0IHN0YXRpYyBwcm9wZXJ0aWVzXG4gICAgZm9yICh2YXIgb3B0aW9uIGluIGRlZmF1bHRzKSB7XG4gICAgICBpZiAoZGVmYXVsdHMuaGFzT3duUHJvcGVydHkob3B0aW9uKSAmJiAhKG9wdGlvbiBpbiBwbHVnaW4pKSB7XG4gICAgICAgIHBsdWdpbltvcHRpb25dID0gZGVmYXVsdHNbb3B0aW9uXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgfSxcbiAgcGx1Z2luRXZlbnQ6IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUsIGV2dCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmV2ZW50Q2FuY2VsZWQgPSBmYWxzZTtcblxuICAgIGV2dC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5ldmVudENhbmNlbGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50TmFtZUdsb2JhbCA9IGV2ZW50TmFtZSArICdHbG9iYWwnO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBGaXJlIGdsb2JhbCBldmVudHMgaWYgaXQgZXhpc3RzIGluIHRoaXMgc29ydGFibGVcblxuICAgICAgaWYgKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKSB7XG4gICAgICAgIHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH0gLy8gT25seSBmaXJlIHBsdWdpbiBldmVudCBpZiBwbHVnaW4gaXMgZW5hYmxlZCBpbiB0aGlzIHNvcnRhYmxlLFxuICAgICAgLy8gYW5kIHBsdWdpbiBoYXMgZXZlbnQgZGVmaW5lZFxuXG5cbiAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zW3BsdWdpbi5wbHVnaW5OYW1lXSAmJiBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXSkge1xuICAgICAgICBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXShfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGVcbiAgICAgICAgfSwgZXZ0KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIGluaXRpYWxpemVQbHVnaW5zOiBmdW5jdGlvbiBpbml0aWFsaXplUGx1Z2lucyhzb3J0YWJsZSwgZWwsIGRlZmF1bHRzLCBvcHRpb25zKSB7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIHZhciBwbHVnaW5OYW1lID0gcGx1Z2luLnBsdWdpbk5hbWU7XG4gICAgICBpZiAoIXNvcnRhYmxlLm9wdGlvbnNbcGx1Z2luTmFtZV0gJiYgIXBsdWdpbi5pbml0aWFsaXplQnlEZWZhdWx0KSByZXR1cm47XG4gICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBuZXcgcGx1Z2luKHNvcnRhYmxlLCBlbCwgc29ydGFibGUub3B0aW9ucyk7XG4gICAgICBpbml0aWFsaXplZC5zb3J0YWJsZSA9IHNvcnRhYmxlO1xuICAgICAgaW5pdGlhbGl6ZWQub3B0aW9ucyA9IHNvcnRhYmxlLm9wdGlvbnM7XG4gICAgICBzb3J0YWJsZVtwbHVnaW5OYW1lXSA9IGluaXRpYWxpemVkOyAvLyBBZGQgZGVmYXVsdCBvcHRpb25zIGZyb20gcGx1Z2luXG5cbiAgICAgIF9leHRlbmRzKGRlZmF1bHRzLCBpbml0aWFsaXplZC5kZWZhdWx0cyk7XG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBvcHRpb24gaW4gc29ydGFibGUub3B0aW9ucykge1xuICAgICAgaWYgKCFzb3J0YWJsZS5vcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbikpIGNvbnRpbnVlO1xuICAgICAgdmFyIG1vZGlmaWVkID0gdGhpcy5tb2RpZnlPcHRpb24oc29ydGFibGUsIG9wdGlvbiwgc29ydGFibGUub3B0aW9uc1tvcHRpb25dKTtcblxuICAgICAgaWYgKHR5cGVvZiBtb2RpZmllZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc29ydGFibGUub3B0aW9uc1tvcHRpb25dID0gbW9kaWZpZWQ7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBnZXRFdmVudFByb3BlcnRpZXM6IGZ1bmN0aW9uIGdldEV2ZW50UHJvcGVydGllcyhuYW1lLCBzb3J0YWJsZSkge1xuICAgIHZhciBldmVudFByb3BlcnRpZXMgPSB7fTtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgaWYgKHR5cGVvZiBwbHVnaW4uZXZlbnRQcm9wZXJ0aWVzICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG5cbiAgICAgIF9leHRlbmRzKGV2ZW50UHJvcGVydGllcywgcGx1Z2luLmV2ZW50UHJvcGVydGllcy5jYWxsKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSwgbmFtZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBldmVudFByb3BlcnRpZXM7XG4gIH0sXG4gIG1vZGlmeU9wdGlvbjogZnVuY3Rpb24gbW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBtb2RpZmllZFZhbHVlO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAvLyBQbHVnaW4gbXVzdCBleGlzdCBvbiB0aGUgU29ydGFibGVcbiAgICAgIGlmICghc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdKSByZXR1cm47IC8vIElmIHN0YXRpYyBvcHRpb24gbGlzdGVuZXIgZXhpc3RzIGZvciB0aGlzIG9wdGlvbiwgY2FsbCBpbiB0aGUgY29udGV4dCBvZiB0aGUgU29ydGFibGUncyBpbnN0YW5jZSBvZiB0aGlzIHBsdWdpblxuXG4gICAgICBpZiAocGx1Z2luLm9wdGlvbkxpc3RlbmVycyAmJiB0eXBlb2YgcGx1Z2luLm9wdGlvbkxpc3RlbmVyc1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtb2RpZmllZFZhbHVlID0gcGx1Z2luLm9wdGlvbkxpc3RlbmVyc1tuYW1lXS5jYWxsKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtb2RpZmllZFZhbHVlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KF9yZWYpIHtcbiAgdmFyIHNvcnRhYmxlID0gX3JlZi5zb3J0YWJsZSxcbiAgICAgIHJvb3RFbCA9IF9yZWYucm9vdEVsLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIHRhcmdldEVsID0gX3JlZi50YXJnZXRFbCxcbiAgICAgIGNsb25lRWwgPSBfcmVmLmNsb25lRWwsXG4gICAgICB0b0VsID0gX3JlZi50b0VsLFxuICAgICAgZnJvbUVsID0gX3JlZi5mcm9tRWwsXG4gICAgICBvbGRJbmRleCA9IF9yZWYub2xkSW5kZXgsXG4gICAgICBuZXdJbmRleCA9IF9yZWYubmV3SW5kZXgsXG4gICAgICBvbGREcmFnZ2FibGVJbmRleCA9IF9yZWYub2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IF9yZWYubmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgICBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50LFxuICAgICAgcHV0U29ydGFibGUgPSBfcmVmLnB1dFNvcnRhYmxlLFxuICAgICAgZXh0cmFFdmVudFByb3BlcnRpZXMgPSBfcmVmLmV4dHJhRXZlbnRQcm9wZXJ0aWVzO1xuICBzb3J0YWJsZSA9IHNvcnRhYmxlIHx8IHJvb3RFbCAmJiByb290RWxbZXhwYW5kb107XG4gIGlmICghc29ydGFibGUpIHJldHVybjtcbiAgdmFyIGV2dCxcbiAgICAgIG9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zLFxuICAgICAgb25OYW1lID0gJ29uJyArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKTsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmVcblxuICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7XG4gICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KG5hbWUsIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZ0LmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTtcbiAgfVxuXG4gIGV2dC50byA9IHRvRWwgfHwgcm9vdEVsO1xuICBldnQuZnJvbSA9IGZyb21FbCB8fCByb290RWw7XG4gIGV2dC5pdGVtID0gdGFyZ2V0RWwgfHwgcm9vdEVsO1xuICBldnQuY2xvbmUgPSBjbG9uZUVsO1xuICBldnQub2xkSW5kZXggPSBvbGRJbmRleDtcbiAgZXZ0Lm5ld0luZGV4ID0gbmV3SW5kZXg7XG4gIGV2dC5vbGREcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICBldnQubmV3RHJhZ2dhYmxlSW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleDtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBldnQucHVsbE1vZGUgPSBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlIDogdW5kZWZpbmVkO1xuXG4gIHZhciBhbGxFdmVudFByb3BlcnRpZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBleHRyYUV2ZW50UHJvcGVydGllcywgUGx1Z2luTWFuYWdlci5nZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpKTtcblxuICBmb3IgKHZhciBvcHRpb24gaW4gYWxsRXZlbnRQcm9wZXJ0aWVzKSB7XG4gICAgZXZ0W29wdGlvbl0gPSBhbGxFdmVudFByb3BlcnRpZXNbb3B0aW9uXTtcbiAgfVxuXG4gIGlmIChyb290RWwpIHtcbiAgICByb290RWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnNbb25OYW1lXSkge1xuICAgIG9wdGlvbnNbb25OYW1lXS5jYWxsKHNvcnRhYmxlLCBldnQpO1xuICB9XG59XG5cbnZhciBwbHVnaW5FdmVudCA9IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgb3JpZ2luYWxFdmVudCA9IF9yZWYuZXZ0LFxuICAgICAgZGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJldnRcIl0pO1xuXG4gIFBsdWdpbk1hbmFnZXIucGx1Z2luRXZlbnQuYmluZChTb3J0YWJsZSkoZXZlbnROYW1lLCBzb3J0YWJsZSwgX29iamVjdFNwcmVhZCh7XG4gICAgZHJhZ0VsOiBkcmFnRWwsXG4gICAgcGFyZW50RWw6IHBhcmVudEVsLFxuICAgIGdob3N0RWw6IGdob3N0RWwsXG4gICAgcm9vdEVsOiByb290RWwsXG4gICAgbmV4dEVsOiBuZXh0RWwsXG4gICAgbGFzdERvd25FbDogbGFzdERvd25FbCxcbiAgICBjbG9uZUVsOiBjbG9uZUVsLFxuICAgIGNsb25lSGlkZGVuOiBjbG9uZUhpZGRlbixcbiAgICBkcmFnU3RhcnRlZDogbW92ZWQsXG4gICAgcHV0U29ydGFibGU6IHB1dFNvcnRhYmxlLFxuICAgIGFjdGl2ZVNvcnRhYmxlOiBTb3J0YWJsZS5hY3RpdmUsXG4gICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudCxcbiAgICBvbGRJbmRleDogb2xkSW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXg6IG9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0luZGV4OiBuZXdJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgaGlkZUdob3N0Rm9yVGFyZ2V0OiBfaGlkZUdob3N0Rm9yVGFyZ2V0LFxuICAgIHVuaGlkZUdob3N0Rm9yVGFyZ2V0OiBfdW5oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgY2xvbmVOb3dIaWRkZW46IGZ1bmN0aW9uIGNsb25lTm93SGlkZGVuKCkge1xuICAgICAgY2xvbmVIaWRkZW4gPSB0cnVlO1xuICAgIH0sXG4gICAgY2xvbmVOb3dTaG93bjogZnVuY3Rpb24gY2xvbmVOb3dTaG93bigpIHtcbiAgICAgIGNsb25lSGlkZGVuID0gZmFsc2U7XG4gICAgfSxcbiAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQ6IGZ1bmN0aW9uIGRpc3BhdGNoU29ydGFibGVFdmVudChuYW1lKSB7XG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBkYXRhKSk7XG59O1xuXG5mdW5jdGlvbiBfZGlzcGF0Y2hFdmVudChpbmZvKSB7XG4gIGRpc3BhdGNoRXZlbnQoX29iamVjdFNwcmVhZCh7XG4gICAgcHV0U29ydGFibGU6IHB1dFNvcnRhYmxlLFxuICAgIGNsb25lRWw6IGNsb25lRWwsXG4gICAgdGFyZ2V0RWw6IGRyYWdFbCxcbiAgICByb290RWw6IHJvb3RFbCxcbiAgICBvbGRJbmRleDogb2xkSW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXg6IG9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0luZGV4OiBuZXdJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXhcbiAgfSwgaW5mbykpO1xufVxuXG52YXIgZHJhZ0VsLFxuICAgIHBhcmVudEVsLFxuICAgIGdob3N0RWwsXG4gICAgcm9vdEVsLFxuICAgIG5leHRFbCxcbiAgICBsYXN0RG93bkVsLFxuICAgIGNsb25lRWwsXG4gICAgY2xvbmVIaWRkZW4sXG4gICAgb2xkSW5kZXgsXG4gICAgbmV3SW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgYWN0aXZlR3JvdXAsXG4gICAgcHV0U29ydGFibGUsXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlLFxuICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlLFxuICAgIHNvcnRhYmxlcyA9IFtdLFxuICAgIHRhcEV2dCxcbiAgICB0b3VjaEV2dCxcbiAgICBsYXN0RHgsXG4gICAgbGFzdER5LFxuICAgIHRhcERpc3RhbmNlTGVmdCxcbiAgICB0YXBEaXN0YW5jZVRvcCxcbiAgICBtb3ZlZCxcbiAgICBsYXN0VGFyZ2V0LFxuICAgIGxhc3REaXJlY3Rpb24sXG4gICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2UsXG4gICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9IGZhbHNlLFxuICAgIHRhcmdldE1vdmVEaXN0YW5jZSxcbiAgICAvLyBGb3IgcG9zaXRpb25pbmcgZ2hvc3QgYWJzb2x1dGVseVxuZ2hvc3RSZWxhdGl2ZVBhcmVudCxcbiAgICBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCA9IFtdLFxuICAgIC8vIChsZWZ0LCB0b3ApXG5fc2lsZW50ID0gZmFsc2UsXG4gICAgc2F2ZWRJbnB1dENoZWNrZWQgPSBbXTtcbi8qKiBAY29uc3QgKi9cblxudmFyIGRvY3VtZW50RXhpc3RzID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyxcbiAgICBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA9IElPUyxcbiAgICBDU1NGbG9hdFByb3BlcnR5ID0gRWRnZSB8fCBJRTExT3JMZXNzID8gJ2Nzc0Zsb2F0JyA6ICdmbG9hdCcsXG4gICAgLy8gVGhpcyB3aWxsIG5vdCBwYXNzIGZvciBJRTksIGJlY2F1c2UgSUU5IERuRCBvbmx5IHdvcmtzIG9uIGFuY2hvcnNcbnN1cHBvcnREcmFnZ2FibGUgPSBkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCAmJiAhSU9TICYmICdkcmFnZ2FibGUnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgIHN1cHBvcnRDc3NQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWRvY3VtZW50RXhpc3RzKSByZXR1cm47IC8vIGZhbHNlIHdoZW4gPD0gSUUxMVxuXG4gIGlmIChJRTExT3JMZXNzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgneCcpO1xuICBlbC5zdHlsZS5jc3NUZXh0ID0gJ3BvaW50ZXItZXZlbnRzOmF1dG8nO1xuICByZXR1cm4gZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9PT0gJ2F1dG8nO1xufSgpLFxuICAgIF9kZXRlY3REaXJlY3Rpb24gPSBmdW5jdGlvbiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCBvcHRpb25zKSB7XG4gIHZhciBlbENTUyA9IGNzcyhlbCksXG4gICAgICBlbFdpZHRoID0gcGFyc2VJbnQoZWxDU1Mud2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ0xlZnQpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ1JpZ2h0KSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlckxlZnRXaWR0aCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICAgIGNoaWxkMSA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zKSxcbiAgICAgIGNoaWxkMiA9IGdldENoaWxkKGVsLCAxLCBvcHRpb25zKSxcbiAgICAgIGZpcnN0Q2hpbGRDU1MgPSBjaGlsZDEgJiYgY3NzKGNoaWxkMSksXG4gICAgICBzZWNvbmRDaGlsZENTUyA9IGNoaWxkMiAmJiBjc3MoY2hpbGQyKSxcbiAgICAgIGZpcnN0Q2hpbGRXaWR0aCA9IGZpcnN0Q2hpbGRDU1MgJiYgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KGZpcnN0Q2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDEpLndpZHRoLFxuICAgICAgc2Vjb25kQ2hpbGRXaWR0aCA9IHNlY29uZENoaWxkQ1NTICYmIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDIpLndpZHRoO1xuXG4gIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZmxleCcpIHtcbiAgICByZXR1cm4gZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbicgfHwgZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbi1yZXZlcnNlJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoZWxDU1MuZGlzcGxheSA9PT0gJ2dyaWQnKSB7XG4gICAgcmV0dXJuIGVsQ1NTLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoJyAnKS5sZW5ndGggPD0gMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoY2hpbGQxICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAmJiBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gIT09ICdub25lJykge1xuICAgIHZhciB0b3VjaGluZ1NpZGVDaGlsZDIgPSBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gPT09ICdsZWZ0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgcmV0dXJuIGNoaWxkMiAmJiAoc2Vjb25kQ2hpbGRDU1MuY2xlYXIgPT09ICdib3RoJyB8fCBzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gdG91Y2hpbmdTaWRlQ2hpbGQyKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICByZXR1cm4gY2hpbGQxICYmIChmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdibG9jaycgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZmxleCcgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAndGFibGUnIHx8IGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2dyaWQnIHx8IGZpcnN0Q2hpbGRXaWR0aCA+PSBlbFdpZHRoICYmIGVsQ1NTW0NTU0Zsb2F0UHJvcGVydHldID09PSAnbm9uZScgfHwgY2hpbGQyICYmIGVsQ1NTW0NTU0Zsb2F0UHJvcGVydHldID09PSAnbm9uZScgJiYgZmlyc3RDaGlsZFdpZHRoICsgc2Vjb25kQ2hpbGRXaWR0aCA+IGVsV2lkdGgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbn0sXG4gICAgX2RyYWdFbEluUm93Q29sdW1uID0gZnVuY3Rpb24gX2RyYWdFbEluUm93Q29sdW1uKGRyYWdSZWN0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCkge1xuICB2YXIgZHJhZ0VsUzFPcHAgPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LmxlZnQgOiBkcmFnUmVjdC50b3AsXG4gICAgICBkcmFnRWxTMk9wcCA9IHZlcnRpY2FsID8gZHJhZ1JlY3QucmlnaHQgOiBkcmFnUmVjdC5ib3R0b20sXG4gICAgICBkcmFnRWxPcHBMZW5ndGggPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LndpZHRoIDogZHJhZ1JlY3QuaGVpZ2h0LFxuICAgICAgdGFyZ2V0UzFPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QubGVmdCA6IHRhcmdldFJlY3QudG9wLFxuICAgICAgdGFyZ2V0UzJPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QucmlnaHQgOiB0YXJnZXRSZWN0LmJvdHRvbSxcbiAgICAgIHRhcmdldE9wcExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC53aWR0aCA6IHRhcmdldFJlY3QuaGVpZ2h0O1xuICByZXR1cm4gZHJhZ0VsUzFPcHAgPT09IHRhcmdldFMxT3BwIHx8IGRyYWdFbFMyT3BwID09PSB0YXJnZXRTMk9wcCB8fCBkcmFnRWxTMU9wcCArIGRyYWdFbE9wcExlbmd0aCAvIDIgPT09IHRhcmdldFMxT3BwICsgdGFyZ2V0T3BwTGVuZ3RoIC8gMjtcbn0sXG5cbi8qKlxuICogRGV0ZWN0cyBmaXJzdCBuZWFyZXN0IGVtcHR5IHNvcnRhYmxlIHRvIFggYW5kIFkgcG9zaXRpb24gdXNpbmcgZW1wdHlJbnNlcnRUaHJlc2hvbGQuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggICAgICBYIHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkgICAgICBZIHBvc2l0aW9uXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICBFbGVtZW50IG9mIHRoZSBmaXJzdCBmb3VuZCBuZWFyZXN0IFNvcnRhYmxlXG4gKi9cbl9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSA9IGZ1bmN0aW9uIF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSh4LCB5KSB7XG4gIHZhciByZXQ7XG4gIHNvcnRhYmxlcy5zb21lKGZ1bmN0aW9uIChzb3J0YWJsZSkge1xuICAgIGlmIChsYXN0Q2hpbGQoc29ydGFibGUpKSByZXR1cm47XG4gICAgdmFyIHJlY3QgPSBnZXRSZWN0KHNvcnRhYmxlKSxcbiAgICAgICAgdGhyZXNob2xkID0gc29ydGFibGVbZXhwYW5kb10ub3B0aW9ucy5lbXB0eUluc2VydFRocmVzaG9sZCxcbiAgICAgICAgaW5zaWRlSG9yaXpvbnRhbGx5ID0geCA+PSByZWN0LmxlZnQgLSB0aHJlc2hvbGQgJiYgeCA8PSByZWN0LnJpZ2h0ICsgdGhyZXNob2xkLFxuICAgICAgICBpbnNpZGVWZXJ0aWNhbGx5ID0geSA+PSByZWN0LnRvcCAtIHRocmVzaG9sZCAmJiB5IDw9IHJlY3QuYm90dG9tICsgdGhyZXNob2xkO1xuXG4gICAgaWYgKHRocmVzaG9sZCAmJiBpbnNpZGVIb3Jpem9udGFsbHkgJiYgaW5zaWRlVmVydGljYWxseSkge1xuICAgICAgcmV0dXJuIHJldCA9IHNvcnRhYmxlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59LFxuICAgIF9wcmVwYXJlR3JvdXAgPSBmdW5jdGlvbiBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpIHtcbiAgZnVuY3Rpb24gdG9Gbih2YWx1ZSwgcHVsbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIGRyYWdFbCwgZXZ0KSB7XG4gICAgICB2YXIgc2FtZUdyb3VwID0gdG8ub3B0aW9ucy5ncm91cC5uYW1lICYmIGZyb20ub3B0aW9ucy5ncm91cC5uYW1lICYmIHRvLm9wdGlvbnMuZ3JvdXAubmFtZSA9PT0gZnJvbS5vcHRpb25zLmdyb3VwLm5hbWU7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIChwdWxsIHx8IHNhbWVHcm91cCkpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBwdWxsIHZhbHVlXG4gICAgICAgIC8vIERlZmF1bHQgcHVsbCBhbmQgcHV0IHZhbHVlIGlmIHNhbWUgZ3JvdXBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAocHVsbCAmJiB2YWx1ZSA9PT0gJ2Nsb25lJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdG9Gbih2YWx1ZSh0bywgZnJvbSwgZHJhZ0VsLCBldnQpLCBwdWxsKSh0bywgZnJvbSwgZHJhZ0VsLCBldnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG90aGVyR3JvdXAgPSAocHVsbCA/IHRvIDogZnJvbSkub3B0aW9ucy5ncm91cC5uYW1lO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSA9PT0gb3RoZXJHcm91cCB8fCB2YWx1ZS5qb2luICYmIHZhbHVlLmluZGV4T2Yob3RoZXJHcm91cCkgPiAtMTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGdyb3VwID0ge307XG4gIHZhciBvcmlnaW5hbEdyb3VwID0gb3B0aW9ucy5ncm91cDtcblxuICBpZiAoIW9yaWdpbmFsR3JvdXAgfHwgX3R5cGVvZihvcmlnaW5hbEdyb3VwKSAhPSAnb2JqZWN0Jykge1xuICAgIG9yaWdpbmFsR3JvdXAgPSB7XG4gICAgICBuYW1lOiBvcmlnaW5hbEdyb3VwXG4gICAgfTtcbiAgfVxuXG4gIGdyb3VwLm5hbWUgPSBvcmlnaW5hbEdyb3VwLm5hbWU7XG4gIGdyb3VwLmNoZWNrUHVsbCA9IHRvRm4ob3JpZ2luYWxHcm91cC5wdWxsLCB0cnVlKTtcbiAgZ3JvdXAuY2hlY2tQdXQgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHV0KTtcbiAgZ3JvdXAucmV2ZXJ0Q2xvbmUgPSBvcmlnaW5hbEdyb3VwLnJldmVydENsb25lO1xuICBvcHRpb25zLmdyb3VwID0gZ3JvdXA7XG59LFxuICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfaGlkZUdob3N0Rm9yVGFyZ2V0KCkge1xuICBpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzICYmIGdob3N0RWwpIHtcbiAgICBjc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICB9XG59LFxuICAgIF91bmhpZGVHaG9zdEZvclRhcmdldCA9IGZ1bmN0aW9uIF91bmhpZGVHaG9zdEZvclRhcmdldCgpIHtcbiAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7XG4gICAgY3NzKGdob3N0RWwsICdkaXNwbGF5JywgJycpO1xuICB9XG59OyAvLyAjMTE4NCBmaXggLSBQcmV2ZW50IGNsaWNrIGV2ZW50IG9uIGZhbGxiYWNrIGlmIGRyYWdnZWQgYnV0IGl0ZW0gbm90IGNoYW5nZWQgcG9zaXRpb25cblxuXG5pZiAoZG9jdW1lbnRFeGlzdHMpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgaWYgKGlnbm9yZU5leHRDbGljaykge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cblxudmFyIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50ID0gZnVuY3Rpb24gbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KSB7XG4gIGlmIChkcmFnRWwpIHtcbiAgICBldnQgPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0O1xuXG4gICAgdmFyIG5lYXJlc3QgPSBfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUoZXZ0LmNsaWVudFgsIGV2dC5jbGllbnRZKTtcblxuICAgIGlmIChuZWFyZXN0KSB7XG4gICAgICAvLyBDcmVhdGUgaW1pdGF0aW9uIGV2ZW50XG4gICAgICB2YXIgZXZlbnQgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSBpbiBldnQpIHtcbiAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGV2ZW50W2ldID0gZXZ0W2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnJvb3RFbCA9IG5lYXJlc3Q7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IHZvaWQgMDtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHZvaWQgMDtcblxuICAgICAgbmVhcmVzdFtleHBhbmRvXS5fb25EcmFnT3ZlcihldmVudCk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgX2NoZWNrT3V0c2lkZVRhcmdldEVsID0gZnVuY3Rpb24gX2NoZWNrT3V0c2lkZVRhcmdldEVsKGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTtcbiAgfVxufTtcbi8qKlxuICogQGNsYXNzICBTb3J0YWJsZVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbFxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICBbb3B0aW9uc11cbiAqL1xuXG5cbmZ1bmN0aW9uIFNvcnRhYmxlKGVsLCBvcHRpb25zKSB7XG4gIGlmICghKGVsICYmIGVsLm5vZGVUeXBlICYmIGVsLm5vZGVUeXBlID09PSAxKSkge1xuICAgIHRocm93IFwiU29ydGFibGU6IGBlbGAgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKGVsKSk7XG4gIH1cblxuICB0aGlzLmVsID0gZWw7IC8vIHJvb3QgZWxlbWVudFxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucyk7IC8vIEV4cG9ydCBpbnN0YW5jZVxuXG4gIGVsW2V4cGFuZG9dID0gdGhpcztcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGdyb3VwOiBudWxsLFxuICAgIHNvcnQ6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHN0b3JlOiBudWxsLFxuICAgIGhhbmRsZTogbnVsbCxcbiAgICBkcmFnZ2FibGU6IC9eW3VvXWwkL2kudGVzdChlbC5ub2RlTmFtZSkgPyAnPmxpJyA6ICc+KicsXG4gICAgc3dhcFRocmVzaG9sZDogMSxcbiAgICAvLyBwZXJjZW50YWdlOyAwIDw9IHggPD0gMVxuICAgIGludmVydFN3YXA6IGZhbHNlLFxuICAgIC8vIGludmVydCBhbHdheXNcbiAgICBpbnZlcnRlZFN3YXBUaHJlc2hvbGQ6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgdG8gc2FtZSBhcyBzd2FwVGhyZXNob2xkIGlmIGRlZmF1bHRcbiAgICByZW1vdmVDbG9uZU9uSGlkZTogdHJ1ZSxcbiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uIGRpcmVjdGlvbigpIHtcbiAgICAgIHJldHVybiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgIH0sXG4gICAgZ2hvc3RDbGFzczogJ3NvcnRhYmxlLWdob3N0JyxcbiAgICBjaG9zZW5DbGFzczogJ3NvcnRhYmxlLWNob3NlbicsXG4gICAgZHJhZ0NsYXNzOiAnc29ydGFibGUtZHJhZycsXG4gICAgaWdub3JlOiAnYSwgaW1nJyxcbiAgICBmaWx0ZXI6IG51bGwsXG4gICAgcHJldmVudE9uRmlsdGVyOiB0cnVlLFxuICAgIGFuaW1hdGlvbjogMCxcbiAgICBlYXNpbmc6IG51bGwsXG4gICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkcmFnRWwudGV4dENvbnRlbnQpO1xuICAgIH0sXG4gICAgZHJvcEJ1YmJsZTogZmFsc2UsXG4gICAgZHJhZ292ZXJCdWJibGU6IGZhbHNlLFxuICAgIGRhdGFJZEF0dHI6ICdkYXRhLWlkJyxcbiAgICBkZWxheTogMCxcbiAgICBkZWxheU9uVG91Y2hPbmx5OiBmYWxzZSxcbiAgICB0b3VjaFN0YXJ0VGhyZXNob2xkOiAoTnVtYmVyLnBhcnNlSW50ID8gTnVtYmVyIDogd2luZG93KS5wYXJzZUludCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgMTApIHx8IDEsXG4gICAgZm9yY2VGYWxsYmFjazogZmFsc2UsXG4gICAgZmFsbGJhY2tDbGFzczogJ3NvcnRhYmxlLWZhbGxiYWNrJyxcbiAgICBmYWxsYmFja09uQm9keTogZmFsc2UsXG4gICAgZmFsbGJhY2tUb2xlcmFuY2U6IDAsXG4gICAgZmFsbGJhY2tPZmZzZXQ6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfSxcbiAgICBzdXBwb3J0UG9pbnRlcjogU29ydGFibGUuc3VwcG9ydFBvaW50ZXIgIT09IGZhbHNlICYmICdQb2ludGVyRXZlbnQnIGluIHdpbmRvdyxcbiAgICBlbXB0eUluc2VydFRocmVzaG9sZDogNVxuICB9O1xuICBQbHVnaW5NYW5hZ2VyLmluaXRpYWxpemVQbHVnaW5zKHRoaXMsIGVsLCBkZWZhdWx0cyk7IC8vIFNldCBkZWZhdWx0IG9wdGlvbnNcblxuICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7XG4gICAgIShuYW1lIGluIG9wdGlvbnMpICYmIChvcHRpb25zW25hbWVdID0gZGVmYXVsdHNbbmFtZV0pO1xuICB9XG5cbiAgX3ByZXBhcmVHcm91cChvcHRpb25zKTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cblxuICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgfSAvLyBTZXR1cCBkcmFnIG1vZGVcblxuXG4gIHRoaXMubmF0aXZlRHJhZ2dhYmxlID0gb3B0aW9ucy5mb3JjZUZhbGxiYWNrID8gZmFsc2UgOiBzdXBwb3J0RHJhZ2dhYmxlO1xuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIC8vIFRvdWNoIHN0YXJ0IHRocmVzaG9sZCBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBuYXRpdmUgZHJhZ3N0YXJ0IHRocmVzaG9sZFxuICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gMTtcbiAgfSAvLyBCaW5kIGV2ZW50c1xuXG5cbiAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICBvbihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgb24oZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvbihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfVxuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIG9uKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcbiAgICBvbihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuICB9XG5cbiAgc29ydGFibGVzLnB1c2godGhpcy5lbCk7IC8vIFJlc3RvcmUgc29ydGluZ1xuXG4gIG9wdGlvbnMuc3RvcmUgJiYgb3B0aW9ucy5zdG9yZS5nZXQgJiYgdGhpcy5zb3J0KG9wdGlvbnMuc3RvcmUuZ2V0KHRoaXMpIHx8IFtdKTsgLy8gQWRkIGFuaW1hdGlvbiBzdGF0ZSBtYW5hZ2VyXG5cbiAgX2V4dGVuZHModGhpcywgQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkpO1xufVxuXG5Tb3J0YWJsZS5wcm90b3R5cGUgPVxuLyoqIEBsZW5kcyBTb3J0YWJsZS5wcm90b3R5cGUgKi9cbntcbiAgY29uc3RydWN0b3I6IFNvcnRhYmxlLFxuICBfaXNPdXRzaWRlVGhpc0VsOiBmdW5jdGlvbiBfaXNPdXRzaWRlVGhpc0VsKHRhcmdldCkge1xuICAgIGlmICghdGhpcy5lbC5jb250YWlucyh0YXJnZXQpICYmIHRhcmdldCAhPT0gdGhpcy5lbCkge1xuICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgfVxuICB9LFxuICBfZ2V0RGlyZWN0aW9uOiBmdW5jdGlvbiBfZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCBkcmFnRWwpIDogdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgfSxcbiAgX29uVGFwU3RhcnQ6IGZ1bmN0aW9uIF9vblRhcFN0YXJ0KFxuICAvKiogRXZlbnR8VG91Y2hFdmVudCAqL1xuICBldnQpIHtcbiAgICBpZiAoIWV2dC5jYW5jZWxhYmxlKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBlbCA9IHRoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHByZXZlbnRPbkZpbHRlciA9IG9wdGlvbnMucHJldmVudE9uRmlsdGVyLFxuICAgICAgICB0eXBlID0gZXZ0LnR5cGUsXG4gICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXMgJiYgZXZ0LnRvdWNoZXNbMF0gfHwgZXZ0LnBvaW50ZXJUeXBlICYmIGV2dC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyAmJiBldnQsXG4gICAgICAgIHRhcmdldCA9ICh0b3VjaCB8fCBldnQpLnRhcmdldCxcbiAgICAgICAgb3JpZ2luYWxUYXJnZXQgPSBldnQudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgKGV2dC5wYXRoICYmIGV2dC5wYXRoWzBdIHx8IGV2dC5jb21wb3NlZFBhdGggJiYgZXZ0LmNvbXBvc2VkUGF0aCgpWzBdKSB8fCB0YXJnZXQsXG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuXG4gICAgX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShlbCk7IC8vIERvbid0IHRyaWdnZXIgc3RhcnQgZXZlbnQgd2hlbiBhbiBlbGVtZW50IGlzIGJlZW4gZHJhZ2dlZCwgb3RoZXJ3aXNlIHRoZSBldnQub2xkaW5kZXggYWx3YXlzIHdyb25nIHdoZW4gc2V0IG9wdGlvbi5ncm91cC5cblxuXG4gICAgaWYgKGRyYWdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICgvbW91c2Vkb3dufHBvaW50ZXJkb3duLy50ZXN0KHR5cGUpICYmIGV2dC5idXR0b24gIT09IDAgfHwgb3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuOyAvLyBvbmx5IGxlZnQgYnV0dG9uIGFuZCBlbmFibGVkXG4gICAgfSAvLyBjYW5jZWwgZG5kIGlmIG9yaWdpbmFsIHRhcmdldCBpcyBjb250ZW50IGVkaXRhYmxlXG5cblxuICAgIGlmIChvcmlnaW5hbFRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRhcmdldCA9IGNsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIGZhbHNlKTtcblxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LmFuaW1hdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxhc3REb3duRWwgPT09IHRhcmdldCkge1xuICAgICAgLy8gSWdub3JpbmcgZHVwbGljYXRlIGBkb3duYFxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50XG5cblxuICAgIG9sZEluZGV4ID0gaW5kZXgodGFyZ2V0KTtcbiAgICBvbGREcmFnZ2FibGVJbmRleCA9IGluZGV4KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUpOyAvLyBDaGVjayBmaWx0ZXJcblxuICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZmlsdGVyLmNhbGwodGhpcywgZXZ0LCB0YXJnZXQsIHRoaXMpKSB7XG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgcm9vdEVsOiBvcmlnaW5hbFRhcmdldCxcbiAgICAgICAgICBuYW1lOiAnZmlsdGVyJyxcbiAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LFxuICAgICAgICAgIHRvRWw6IGVsLFxuICAgICAgICAgIGZyb21FbDogZWxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgfSk7XG4gICAgICAgIHByZXZlbnRPbkZpbHRlciAmJiBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgIGNyaXRlcmlhID0gY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgY3JpdGVyaWEudHJpbSgpLCBlbCwgZmFsc2UpO1xuXG4gICAgICAgIGlmIChjcml0ZXJpYSkge1xuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICAgIHJvb3RFbDogY3JpdGVyaWEsXG4gICAgICAgICAgICBuYW1lOiAnZmlsdGVyJyxcbiAgICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXQsXG4gICAgICAgICAgICBmcm9tRWw6IGVsLFxuICAgICAgICAgICAgdG9FbDogZWxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHBsdWdpbkV2ZW50KCdmaWx0ZXInLCBfdGhpcywge1xuICAgICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgcHJldmVudE9uRmlsdGVyICYmIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47IC8vIGNhbmNlbCBkbmRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5oYW5kbGUgJiYgIWNsb3Nlc3Qob3JpZ2luYWxUYXJnZXQsIG9wdGlvbnMuaGFuZGxlLCBlbCwgZmFsc2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBQcmVwYXJlIGBkcmFnc3RhcnRgXG5cblxuICAgIHRoaXMuX3ByZXBhcmVEcmFnU3RhcnQoZXZ0LCB0b3VjaCwgdGFyZ2V0KTtcbiAgfSxcbiAgX3ByZXBhcmVEcmFnU3RhcnQ6IGZ1bmN0aW9uIF9wcmVwYXJlRHJhZ1N0YXJ0KFxuICAvKiogRXZlbnQgKi9cbiAgZXZ0LFxuICAvKiogVG91Y2ggKi9cbiAgdG91Y2gsXG4gIC8qKiBIVE1MRWxlbWVudCAqL1xuICB0YXJnZXQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBlbCA9IF90aGlzLmVsLFxuICAgICAgICBvcHRpb25zID0gX3RoaXMub3B0aW9ucyxcbiAgICAgICAgb3duZXJEb2N1bWVudCA9IGVsLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIGRyYWdTdGFydEZuO1xuXG4gICAgaWYgKHRhcmdldCAmJiAhZHJhZ0VsICYmIHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgcm9vdEVsID0gZWw7XG4gICAgICBkcmFnRWwgPSB0YXJnZXQ7XG4gICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlO1xuICAgICAgbmV4dEVsID0gZHJhZ0VsLm5leHRTaWJsaW5nO1xuICAgICAgbGFzdERvd25FbCA9IHRhcmdldDtcbiAgICAgIGFjdGl2ZUdyb3VwID0gb3B0aW9ucy5ncm91cDtcbiAgICAgIFNvcnRhYmxlLmRyYWdnZWQgPSBkcmFnRWw7XG4gICAgICB0YXBFdnQgPSB7XG4gICAgICAgIHRhcmdldDogZHJhZ0VsLFxuICAgICAgICBjbGllbnRYOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRYLFxuICAgICAgICBjbGllbnRZOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRZXG4gICAgICB9O1xuICAgICAgdGFwRGlzdGFuY2VMZWZ0ID0gdGFwRXZ0LmNsaWVudFggLSBkcmFnUmVjdC5sZWZ0O1xuICAgICAgdGFwRGlzdGFuY2VUb3AgPSB0YXBFdnQuY2xpZW50WSAtIGRyYWdSZWN0LnRvcDtcbiAgICAgIHRoaXMuX2xhc3RYID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WDtcbiAgICAgIHRoaXMuX2xhc3RZID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WTtcbiAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICdhbGwnO1xuXG4gICAgICBkcmFnU3RhcnRGbiA9IGZ1bmN0aW9uIGRyYWdTdGFydEZuKCkge1xuICAgICAgICBwbHVnaW5FdmVudCgnZGVsYXlFbmRlZCcsIF90aGlzLCB7XG4gICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgICAgICBfdGhpcy5fb25Ecm9wKCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gRGVsYXllZCBkcmFnIGhhcyBiZWVuIHRyaWdnZXJlZFxuICAgICAgICAvLyB3ZSBjYW4gcmUtZW5hYmxlIHRoZSBldmVudHM6IHRvdWNobW92ZS9tb3VzZW1vdmVcblxuXG4gICAgICAgIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcblxuICAgICAgICBpZiAoIUZpcmVGb3ggJiYgX3RoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgZHJhZ0VsLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIH0gLy8gQmluZCB0aGUgZXZlbnRzOiBkcmFnc3RhcnQvZHJhZ2VuZFxuXG5cbiAgICAgICAgX3RoaXMuX3RyaWdnZXJEcmFnU3RhcnQoZXZ0LCB0b3VjaCk7IC8vIERyYWcgc3RhcnQgZXZlbnRcblxuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgbmFtZTogJ2Nob29zZScsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pOyAvLyBDaG9zZW4gaXRlbVxuXG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmNob3NlbkNsYXNzLCB0cnVlKTtcbiAgICAgIH07IC8vIERpc2FibGUgXCJkcmFnZ2FibGVcIlxuXG5cbiAgICAgIG9wdGlvbnMuaWdub3JlLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAoY3JpdGVyaWEpIHtcbiAgICAgICAgZmluZChkcmFnRWwsIGNyaXRlcmlhLnRyaW0oKSwgX2Rpc2FibGVEcmFnZ2FibGUpO1xuICAgICAgfSk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAnZHJhZ292ZXInLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9vbkRyb3ApOyAvLyBNYWtlIGRyYWdFbCBkcmFnZ2FibGUgKG11c3QgYmUgYmVmb3JlIGRlbGF5IGZvciBGaXJlRm94KVxuXG4gICAgICBpZiAoRmlyZUZveCAmJiB0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudG91Y2hTdGFydFRocmVzaG9sZCA9IDQ7XG4gICAgICAgIGRyYWdFbC5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBwbHVnaW5FdmVudCgnZGVsYXlTdGFydCcsIHRoaXMsIHtcbiAgICAgICAgZXZ0OiBldnRcbiAgICAgIH0pOyAvLyBEZWxheSBpcyBpbXBvc3NpYmxlIGZvciBuYXRpdmUgRG5EIGluIEVkZ2Ugb3IgSUVcblxuICAgICAgaWYgKG9wdGlvbnMuZGVsYXkgJiYgKCFvcHRpb25zLmRlbGF5T25Ub3VjaE9ubHkgfHwgdG91Y2gpICYmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgfHwgIShFZGdlIHx8IElFMTFPckxlc3MpKSkge1xuICAgICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIHRoaXMuX29uRHJvcCgpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIElmIHRoZSB1c2VyIG1vdmVzIHRoZSBwb2ludGVyIG9yIGxldCBnbyB0aGUgY2xpY2sgb3IgdG91Y2hcbiAgICAgICAgLy8gYmVmb3JlIHRoZSBkZWxheSBoYXMgYmVlbiByZWFjaGVkOlxuICAgICAgICAvLyBkaXNhYmxlIHRoZSBkZWxheWVkIGRyYWdcblxuXG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgX3RoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICAgIG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIgJiYgb24ob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgX3RoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICAgIF90aGlzLl9kcmFnU3RhcnRUaW1lciA9IHNldFRpbWVvdXQoZHJhZ1N0YXJ0Rm4sIG9wdGlvbnMuZGVsYXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ1N0YXJ0Rm4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIF9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXI6IGZ1bmN0aW9uIF9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIoXG4gIC8qKiBUb3VjaEV2ZW50fFBvaW50ZXJFdmVudCAqKi9cbiAgZSkge1xuICAgIHZhciB0b3VjaCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG5cbiAgICBpZiAoTWF0aC5tYXgoTWF0aC5hYnModG91Y2guY2xpZW50WCAtIHRoaXMuX2xhc3RYKSwgTWF0aC5hYnModG91Y2guY2xpZW50WSAtIHRoaXMuX2xhc3RZKSkgPj0gTWF0aC5mbG9vcih0aGlzLm9wdGlvbnMudG91Y2hTdGFydFRocmVzaG9sZCAvICh0aGlzLm5hdGl2ZURyYWdnYWJsZSAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSkpIHtcbiAgICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZygpO1xuICAgIH1cbiAgfSxcbiAgX2Rpc2FibGVEZWxheWVkRHJhZzogZnVuY3Rpb24gX2Rpc2FibGVEZWxheWVkRHJhZygpIHtcbiAgICBkcmFnRWwgJiYgX2Rpc2FibGVEcmFnZ2FibGUoZHJhZ0VsKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fZHJhZ1N0YXJ0VGltZXIpO1xuXG4gICAgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCk7XG4gIH0sXG4gIF9kaXNhYmxlRGVsYXllZERyYWdFdmVudHM6IGZ1bmN0aW9uIF9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICB9LFxuICBfdHJpZ2dlckRyYWdTdGFydDogZnVuY3Rpb24gX3RyaWdnZXJEcmFnU3RhcnQoXG4gIC8qKiBFdmVudCAqL1xuICBldnQsXG4gIC8qKiBUb3VjaCAqL1xuICB0b3VjaCkge1xuICAgIHRvdWNoID0gdG91Y2ggfHwgZXZ0LnBvaW50ZXJUeXBlID09ICd0b3VjaCcgJiYgZXZ0O1xuXG4gICAgaWYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCB0b3VjaCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdXBwb3J0UG9pbnRlcikge1xuICAgICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgICAgfSBlbHNlIGlmICh0b3VjaCkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvbihkcmFnRWwsICdkcmFnZW5kJywgdGhpcyk7XG4gICAgICBvbihyb290RWwsICdkcmFnc3RhcnQnLCB0aGlzLl9vbkRyYWdTdGFydCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICAgICAgLy8gVGltZW91dCBuZWNjZXNzYXJ5IGZvciBJRTlcbiAgICAgICAgX25leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkb2N1bWVudC5zZWxlY3Rpb24uZW1wdHkoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICB9LFxuICBfZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIF9kcmFnU3RhcnRlZChmYWxsYmFjaywgZXZ0KSB7XG5cbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gZmFsc2U7XG5cbiAgICBpZiAocm9vdEVsICYmIGRyYWdFbCkge1xuICAgICAgcGx1Z2luRXZlbnQoJ2RyYWdTdGFydGVkJywgdGhpcywge1xuICAgICAgICBldnQ6IGV2dFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ2RyYWdvdmVyJywgX2NoZWNrT3V0c2lkZVRhcmdldEVsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIEFwcGx5IGVmZmVjdFxuXG4gICAgICAhZmFsbGJhY2sgJiYgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgZmFsc2UpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmdob3N0Q2xhc3MsIHRydWUpO1xuICAgICAgU29ydGFibGUuYWN0aXZlID0gdGhpcztcbiAgICAgIGZhbGxiYWNrICYmIHRoaXMuX2FwcGVuZEdob3N0KCk7IC8vIERyYWcgc3RhcnQgZXZlbnRcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgbmFtZTogJ3N0YXJ0JyxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbnVsbGluZygpO1xuICAgIH1cbiAgfSxcbiAgX2VtdWxhdGVEcmFnT3ZlcjogZnVuY3Rpb24gX2VtdWxhdGVEcmFnT3ZlcigpIHtcbiAgICBpZiAodG91Y2hFdnQpIHtcbiAgICAgIHRoaXMuX2xhc3RYID0gdG91Y2hFdnQuY2xpZW50WDtcbiAgICAgIHRoaXMuX2xhc3RZID0gdG91Y2hFdnQuY2xpZW50WTtcblxuICAgICAgX2hpZGVHaG9zdEZvclRhcmdldCgpO1xuXG4gICAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaEV2dC5jbGllbnRYLCB0b3VjaEV2dC5jbGllbnRZKTtcbiAgICAgIHZhciBwYXJlbnQgPSB0YXJnZXQ7XG5cbiAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0LnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnNoYWRvd1Jvb3QuZWxlbWVudEZyb21Qb2ludCh0b3VjaEV2dC5jbGllbnRYLCB0b3VjaEV2dC5jbGllbnRZKTtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gcGFyZW50KSBicmVhaztcbiAgICAgICAgcGFyZW50ID0gdGFyZ2V0O1xuICAgICAgfVxuXG4gICAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKHRhcmdldCk7XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmIChwYXJlbnRbZXhwYW5kb10pIHtcbiAgICAgICAgICAgIHZhciBpbnNlcnRlZCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGluc2VydGVkID0gcGFyZW50W2V4cGFuZG9dLl9vbkRyYWdPdmVyKHtcbiAgICAgICAgICAgICAgY2xpZW50WDogdG91Y2hFdnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgY2xpZW50WTogdG91Y2hFdnQuY2xpZW50WSxcbiAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGluc2VydGVkICYmICF0aGlzLm9wdGlvbnMuZHJhZ292ZXJCdWJibGUpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGFyZ2V0ID0gcGFyZW50OyAvLyBzdG9yZSBsYXN0IGVsZW1lbnRcbiAgICAgICAgfVxuICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgICAgIHdoaWxlIChwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSk7XG4gICAgICB9XG5cbiAgICAgIF91bmhpZGVHaG9zdEZvclRhcmdldCgpO1xuICAgIH1cbiAgfSxcbiAgX29uVG91Y2hNb3ZlOiBmdW5jdGlvbiBfb25Ub3VjaE1vdmUoXG4gIC8qKlRvdWNoRXZlbnQqL1xuICBldnQpIHtcbiAgICBpZiAodGFwRXZ0KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBmYWxsYmFja1RvbGVyYW5jZSA9IG9wdGlvbnMuZmFsbGJhY2tUb2xlcmFuY2UsXG4gICAgICAgICAgZmFsbGJhY2tPZmZzZXQgPSBvcHRpb25zLmZhbGxiYWNrT2Zmc2V0LFxuICAgICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCxcbiAgICAgICAgICBnaG9zdE1hdHJpeCA9IGdob3N0RWwgJiYgbWF0cml4KGdob3N0RWwsIHRydWUpLFxuICAgICAgICAgIHNjYWxlWCA9IGdob3N0RWwgJiYgZ2hvc3RNYXRyaXggJiYgZ2hvc3RNYXRyaXguYSxcbiAgICAgICAgICBzY2FsZVkgPSBnaG9zdEVsICYmIGdob3N0TWF0cml4ICYmIGdob3N0TWF0cml4LmQsXG4gICAgICAgICAgcmVsYXRpdmVTY3JvbGxPZmZzZXQgPSBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICYmIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGdob3N0UmVsYXRpdmVQYXJlbnQpLFxuICAgICAgICAgIGR4ID0gKHRvdWNoLmNsaWVudFggLSB0YXBFdnQuY2xpZW50WCArIGZhbGxiYWNrT2Zmc2V0LngpIC8gKHNjYWxlWCB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzBdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMF0gOiAwKSAvIChzY2FsZVggfHwgMSksXG4gICAgICAgICAgZHkgPSAodG91Y2guY2xpZW50WSAtIHRhcEV2dC5jbGllbnRZICsgZmFsbGJhY2tPZmZzZXQueSkgLyAoc2NhbGVZIHx8IDEpICsgKHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID8gcmVsYXRpdmVTY3JvbGxPZmZzZXRbMV0gLSBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbFsxXSA6IDApIC8gKHNjYWxlWSB8fCAxKTsgLy8gb25seSBzZXQgdGhlIHN0YXR1cyB0byBkcmFnZ2luZywgd2hlbiB3ZSBhcmUgYWN0dWFsbHkgZHJhZ2dpbmdcblxuICAgICAgaWYgKCFTb3J0YWJsZS5hY3RpdmUgJiYgIWF3YWl0aW5nRHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrVG9sZXJhbmNlICYmIE1hdGgubWF4KE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9sYXN0WCksIE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpIDwgZmFsbGJhY2tUb2xlcmFuY2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9vbkRyYWdTdGFydChldnQsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2hvc3RFbCkge1xuICAgICAgICBpZiAoZ2hvc3RNYXRyaXgpIHtcbiAgICAgICAgICBnaG9zdE1hdHJpeC5lICs9IGR4IC0gKGxhc3REeCB8fCAwKTtcbiAgICAgICAgICBnaG9zdE1hdHJpeC5mICs9IGR5IC0gKGxhc3REeSB8fCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnaG9zdE1hdHJpeCA9IHtcbiAgICAgICAgICAgIGE6IDEsXG4gICAgICAgICAgICBiOiAwLFxuICAgICAgICAgICAgYzogMCxcbiAgICAgICAgICAgIGQ6IDEsXG4gICAgICAgICAgICBlOiBkeCxcbiAgICAgICAgICAgIGY6IGR5XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjc3NNYXRyaXggPSBcIm1hdHJpeChcIi5jb25jYXQoZ2hvc3RNYXRyaXguYSwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5iLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmMsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZCwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5lLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmYsIFwiKVwiKTtcbiAgICAgICAgY3NzKGdob3N0RWwsICd3ZWJraXRUcmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ21velRyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnbXNUcmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGxhc3REeCA9IGR4O1xuICAgICAgICBsYXN0RHkgPSBkeTtcbiAgICAgICAgdG91Y2hFdnQgPSB0b3VjaDtcbiAgICAgIH1cblxuICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LFxuICBfYXBwZW5kR2hvc3Q6IGZ1bmN0aW9uIF9hcHBlbmRHaG9zdCgpIHtcbiAgICAvLyBCdWcgaWYgdXNpbmcgc2NhbGUoKTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjYzNzA1OFxuICAgIC8vIE5vdCBiZWluZyBhZGp1c3RlZCBmb3JcbiAgICBpZiAoIWdob3N0RWwpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLm9wdGlvbnMuZmFsbGJhY2tPbkJvZHkgPyBkb2N1bWVudC5ib2R5IDogcm9vdEVsLFxuICAgICAgICAgIHJlY3QgPSBnZXRSZWN0KGRyYWdFbCwgdHJ1ZSwgUG9zaXRpb25HaG9zdEFic29sdXRlbHksIHRydWUsIGNvbnRhaW5lciksXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gUG9zaXRpb24gYWJzb2x1dGVseVxuXG4gICAgICBpZiAoUG9zaXRpb25HaG9zdEFic29sdXRlbHkpIHtcbiAgICAgICAgLy8gR2V0IHJlbGF0aXZlbHkgcG9zaXRpb25lZCBwYXJlbnRcbiAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGNvbnRhaW5lcjtcblxuICAgICAgICB3aGlsZSAoY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJyAmJiBjc3MoZ2hvc3RSZWxhdGl2ZVBhcmVudCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScgJiYgZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQpIHtcbiAgICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50LmJvZHkgJiYgZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgaWYgKGdob3N0UmVsYXRpdmVQYXJlbnQgPT09IGRvY3VtZW50KSBnaG9zdFJlbGF0aXZlUGFyZW50ID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICAgIHJlY3QudG9wICs9IGdob3N0UmVsYXRpdmVQYXJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgIHJlY3QubGVmdCArPSBnaG9zdFJlbGF0aXZlUGFyZW50LnNjcm9sbExlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsID0gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIGdob3N0RWwgPSBkcmFnRWwuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICB0b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmZhbGxiYWNrQ2xhc3MsIHRydWUpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIHRydWUpO1xuICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2JveC1zaXppbmcnLCAnYm9yZGVyLWJveCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdtYXJnaW4nLCAwKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndG9wJywgcmVjdC50b3ApO1xuICAgICAgY3NzKGdob3N0RWwsICdsZWZ0JywgcmVjdC5sZWZ0KTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnd2lkdGgnLCByZWN0LndpZHRoKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnaGVpZ2h0JywgcmVjdC5oZWlnaHQpO1xuICAgICAgY3NzKGdob3N0RWwsICdvcGFjaXR5JywgJzAuOCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdwb3NpdGlvbicsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ID8gJ2Fic29sdXRlJyA6ICdmaXhlZCcpO1xuICAgICAgY3NzKGdob3N0RWwsICd6SW5kZXgnLCAnMTAwMDAwJyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3BvaW50ZXJFdmVudHMnLCAnbm9uZScpO1xuICAgICAgU29ydGFibGUuZ2hvc3QgPSBnaG9zdEVsO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGdob3N0RWwpOyAvLyBTZXQgdHJhbnNmb3JtLW9yaWdpblxuXG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybS1vcmlnaW4nLCB0YXBEaXN0YW5jZUxlZnQgLyBwYXJzZUludChnaG9zdEVsLnN0eWxlLndpZHRoKSAqIDEwMCArICclICcgKyB0YXBEaXN0YW5jZVRvcCAvIHBhcnNlSW50KGdob3N0RWwuc3R5bGUuaGVpZ2h0KSAqIDEwMCArICclJyk7XG4gICAgfVxuICB9LFxuICBfb25EcmFnU3RhcnQ6IGZ1bmN0aW9uIF9vbkRyYWdTdGFydChcbiAgLyoqRXZlbnQqL1xuICBldnQsXG4gIC8qKmJvb2xlYW4qL1xuICBmYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZGF0YVRyYW5zZmVyID0gZXZ0LmRhdGFUcmFuc2ZlcjtcbiAgICB2YXIgb3B0aW9ucyA9IF90aGlzLm9wdGlvbnM7XG4gICAgcGx1Z2luRXZlbnQoJ2RyYWdTdGFydCcsIHRoaXMsIHtcbiAgICAgIGV2dDogZXZ0XG4gICAgfSk7XG5cbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgdGhpcy5fb25Ecm9wKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwbHVnaW5FdmVudCgnc2V0dXBDbG9uZScsIHRoaXMpO1xuXG4gICAgaWYgKCFTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICBjbG9uZUVsID0gY2xvbmUoZHJhZ0VsKTtcbiAgICAgIGNsb25lRWwuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICBjbG9uZUVsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG5cbiAgICAgIHRoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICB0b2dnbGVDbGFzcyhjbG9uZUVsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTtcbiAgICAgIFNvcnRhYmxlLmNsb25lID0gY2xvbmVFbDtcbiAgICB9IC8vICMxMTQzOiBJRnJhbWUgc3VwcG9ydCB3b3JrYXJvdW5kXG5cblxuICAgIF90aGlzLmNsb25lSWQgPSBfbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgcGx1Z2luRXZlbnQoJ2Nsb25lJywgX3RoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjtcblxuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2Nsb25lJ1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgIWZhbGxiYWNrICYmIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIHRydWUpOyAvLyBTZXQgcHJvcGVyIGRyb3AgZXZlbnRzXG5cbiAgICBpZiAoZmFsbGJhY2spIHtcbiAgICAgIGlnbm9yZU5leHRDbGljayA9IHRydWU7XG4gICAgICBfdGhpcy5fbG9vcElkID0gc2V0SW50ZXJ2YWwoX3RoaXMuX2VtdWxhdGVEcmFnT3ZlciwgNTApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVbmRvIHdoYXQgd2FzIHNldCBpbiBfcHJlcGFyZURyYWdTdGFydCBiZWZvcmUgZHJhZyBzdGFydGVkXG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fb25Ecm9wKTtcblxuICAgICAgaWYgKGRhdGFUcmFuc2Zlcikge1xuICAgICAgICBkYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcbiAgICAgICAgb3B0aW9ucy5zZXREYXRhICYmIG9wdGlvbnMuc2V0RGF0YS5jYWxsKF90aGlzLCBkYXRhVHJhbnNmZXIsIGRyYWdFbCk7XG4gICAgICB9XG5cbiAgICAgIG9uKGRvY3VtZW50LCAnZHJvcCcsIF90aGlzKTsgLy8gIzEyNzYgZml4OlxuXG4gICAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVooMCknKTtcbiAgICB9XG5cbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gdHJ1ZTtcbiAgICBfdGhpcy5fZHJhZ1N0YXJ0SWQgPSBfbmV4dFRpY2soX3RoaXMuX2RyYWdTdGFydGVkLmJpbmQoX3RoaXMsIGZhbGxiYWNrLCBldnQpKTtcbiAgICBvbihkb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgX3RoaXMpO1xuICAgIG1vdmVkID0gdHJ1ZTtcblxuICAgIGlmIChTYWZhcmkpIHtcbiAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAndXNlci1zZWxlY3QnLCAnbm9uZScpO1xuICAgIH1cbiAgfSxcbiAgLy8gUmV0dXJucyB0cnVlIC0gaWYgbm8gZnVydGhlciBhY3Rpb24gaXMgbmVlZGVkIChlaXRoZXIgaW5zZXJ0ZWQgb3IgYW5vdGhlciBjb25kaXRpb24pXG4gIF9vbkRyYWdPdmVyOiBmdW5jdGlvbiBfb25EcmFnT3ZlcihcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICB2YXIgZWwgPSB0aGlzLmVsLFxuICAgICAgICB0YXJnZXQgPSBldnQudGFyZ2V0LFxuICAgICAgICBkcmFnUmVjdCxcbiAgICAgICAgdGFyZ2V0UmVjdCxcbiAgICAgICAgcmV2ZXJ0LFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBncm91cCA9IG9wdGlvbnMuZ3JvdXAsXG4gICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gU29ydGFibGUuYWN0aXZlLFxuICAgICAgICBpc093bmVyID0gYWN0aXZlR3JvdXAgPT09IGdyb3VwLFxuICAgICAgICBjYW5Tb3J0ID0gb3B0aW9ucy5zb3J0LFxuICAgICAgICBmcm9tU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCBhY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgdmVydGljYWwsXG4gICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgY29tcGxldGVkRmlyZWQgPSBmYWxzZTtcblxuICAgIGlmIChfc2lsZW50KSByZXR1cm47XG5cbiAgICBmdW5jdGlvbiBkcmFnT3ZlckV2ZW50KG5hbWUsIGV4dHJhKSB7XG4gICAgICBwbHVnaW5FdmVudChuYW1lLCBfdGhpcywgX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGV2dDogZXZ0LFxuICAgICAgICBpc093bmVyOiBpc093bmVyLFxuICAgICAgICBheGlzOiB2ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIHJldmVydDogcmV2ZXJ0LFxuICAgICAgICBkcmFnUmVjdDogZHJhZ1JlY3QsXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QsXG4gICAgICAgIGNhblNvcnQ6IGNhblNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZTogZnJvbVNvcnRhYmxlLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICAgIG9uTW92ZTogZnVuY3Rpb24gb25Nb3ZlKHRhcmdldCwgYWZ0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIGdldFJlY3QodGFyZ2V0KSwgZXZ0LCBhZnRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZWQ6IGNoYW5nZWRcbiAgICAgIH0sIGV4dHJhKSk7XG4gICAgfSAvLyBDYXB0dXJlIGFuaW1hdGlvbiBzdGF0ZVxuXG5cbiAgICBmdW5jdGlvbiBjYXB0dXJlKCkge1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlJyk7XG5cbiAgICAgIF90aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICBmcm9tU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICB9XG4gICAgfSAvLyBSZXR1cm4gaW52b2NhdGlvbiB3aGVuIGRyYWdFbCBpcyBpbnNlcnRlZCAob3IgY29tcGxldGVkKVxuXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZWQoaW5zZXJ0aW9uKSB7XG4gICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckNvbXBsZXRlZCcsIHtcbiAgICAgICAgaW5zZXJ0aW9uOiBpbnNlcnRpb25cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoX3RoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgICAvLyBTZXQgZ2hvc3QgY2xhc3MgdG8gbmV3IHNvcnRhYmxlJ3MgZ2hvc3QgY2xhc3NcbiAgICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIHB1dFNvcnRhYmxlID8gcHV0U29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzIDogYWN0aXZlU29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmdob3N0Q2xhc3MsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHB1dFNvcnRhYmxlICE9PSBfdGhpcyAmJiBfdGhpcyAhPT0gU29ydGFibGUuYWN0aXZlKSB7XG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfdGhpcztcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcyA9PT0gU29ydGFibGUuYWN0aXZlICYmIHB1dFNvcnRhYmxlKSB7XG4gICAgICAgICAgcHV0U29ydGFibGUgPSBudWxsO1xuICAgICAgICB9IC8vIEFuaW1hdGlvblxuXG5cbiAgICAgICAgaWYgKGZyb21Tb3J0YWJsZSA9PT0gX3RoaXMpIHtcbiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSB0YXJnZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5hbmltYXRlQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlJyk7XG4gICAgICAgICAgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gbnVsbDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgICBmcm9tU29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5faWdub3JlV2hpbGVBbmltYXRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IC8vIE51bGwgbGFzdFRhcmdldCBpZiBpdCBpcyBub3QgaW5zaWRlIGEgcHJldmlvdXNseSBzd2FwcGVkIGVsZW1lbnRcblxuXG4gICAgICBpZiAodGFyZ2V0ID09PSBkcmFnRWwgJiYgIWRyYWdFbC5hbmltYXRlZCB8fCB0YXJnZXQgPT09IGVsICYmICF0YXJnZXQuYW5pbWF0ZWQpIHtcbiAgICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgICB9IC8vIG5vIGJ1YmJsaW5nIGFuZCBub3QgZmFsbGJhY2tcblxuXG4gICAgICBpZiAoIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgIWV2dC5yb290RWwgJiYgdGFyZ2V0ICE9PSBkb2N1bWVudCkge1xuICAgICAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKGV2dC50YXJnZXQpOyAvLyBEbyBub3QgZGV0ZWN0IGZvciBlbXB0eSBpbnNlcnQgaWYgYWxyZWFkeSBpbnNlcnRlZFxuXG5cbiAgICAgICAgIWluc2VydGlvbiAmJiBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudChldnQpO1xuICAgICAgfVxuXG4gICAgICAhb3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybiBjb21wbGV0ZWRGaXJlZCA9IHRydWU7XG4gICAgfSAvLyBDYWxsIHdoZW4gZHJhZ0VsIGhhcyBiZWVuIGluc2VydGVkXG5cblxuICAgIGZ1bmN0aW9uIGNoYW5nZWQoKSB7XG4gICAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2NoYW5nZScsXG4gICAgICAgIHRvRWw6IGVsLFxuICAgICAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZ0LnByZXZlbnREZWZhdWx0ICE9PSB2b2lkIDApIHtcbiAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHRhcmdldCA9IGNsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIHRydWUpO1xuICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyJyk7XG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcblxuICAgIGlmIChkcmFnRWwuY29udGFpbnMoZXZ0LnRhcmdldCkgfHwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC5hbmltYXRpbmdYICYmIHRhcmdldC5hbmltYXRpbmdZIHx8IF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTtcblxuICAgIGlmIChhY3RpdmVTb3J0YWJsZSAmJiAhb3B0aW9ucy5kaXNhYmxlZCAmJiAoaXNPd25lciA/IGNhblNvcnQgfHwgKHJldmVydCA9ICFyb290RWwuY29udGFpbnMoZHJhZ0VsKSkgLy8gUmV2ZXJ0aW5nIGl0ZW0gaW50byB0aGUgb3JpZ2luYWwgbGlzdFxuICAgIDogcHV0U29ydGFibGUgPT09IHRoaXMgfHwgKHRoaXMubGFzdFB1dE1vZGUgPSBhY3RpdmVHcm91cC5jaGVja1B1bGwodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkgJiYgZ3JvdXAuY2hlY2tQdXQodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkpIHtcbiAgICAgIHZlcnRpY2FsID0gdGhpcy5fZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwpO1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJWYWxpZCcpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcblxuICAgICAgaWYgKHJldmVydCkge1xuICAgICAgICBwYXJlbnRFbCA9IHJvb3RFbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgIGNhcHR1cmUoKTtcblxuICAgICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgICBkcmFnT3ZlckV2ZW50KCdyZXZlcnQnKTtcblxuICAgICAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgICAgICBpZiAobmV4dEVsKSB7XG4gICAgICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgbmV4dEVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsTGFzdENoaWxkID0gbGFzdENoaWxkKGVsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cbiAgICAgIGlmICghZWxMYXN0Q2hpbGQgfHwgX2dob3N0SXNMYXN0KGV2dCwgdmVydGljYWwsIHRoaXMpICYmICFlbExhc3RDaGlsZC5hbmltYXRlZCkge1xuICAgICAgICAvLyBJZiBhbHJlYWR5IGF0IGVuZCBvZiBsaXN0OiBEbyBub3QgaW5zZXJ0XG4gICAgICAgIGlmIChlbExhc3RDaGlsZCA9PT0gZHJhZ0VsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIH0gLy8gYXNzaWduIHRhcmdldCBvbmx5IGlmIGNvbmRpdGlvbiBpcyB0cnVlXG5cblxuICAgICAgICBpZiAoZWxMYXN0Q2hpbGQgJiYgZWwgPT09IGV2dC50YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXQgPSBlbExhc3RDaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsICEhdGFyZ2V0KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBjYXB0dXJlKCk7XG4gICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICBwYXJlbnRFbCA9IGVsOyAvLyBhY3R1YWxpemF0aW9uXG5cbiAgICAgICAgICBjaGFuZ2VkKCk7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQucGFyZW50Tm9kZSA9PT0gZWwpIHtcbiAgICAgICAgdGFyZ2V0UmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IDAsXG4gICAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAsXG4gICAgICAgICAgICBkaWZmZXJlbnRMZXZlbCA9IGRyYWdFbC5wYXJlbnROb2RlICE9PSBlbCxcbiAgICAgICAgICAgIGRpZmZlcmVudFJvd0NvbCA9ICFfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ0VsLmFuaW1hdGVkICYmIGRyYWdFbC50b1JlY3QgfHwgZHJhZ1JlY3QsIHRhcmdldC5hbmltYXRlZCAmJiB0YXJnZXQudG9SZWN0IHx8IHRhcmdldFJlY3QsIHZlcnRpY2FsKSxcbiAgICAgICAgICAgIHNpZGUxID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgIHNjcm9sbGVkUGFzdFRvcCA9IGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgJ3RvcCcsICd0b3AnKSB8fCBpc1Njcm9sbGVkUGFzdChkcmFnRWwsICd0b3AnLCAndG9wJyksXG4gICAgICAgICAgICBzY3JvbGxCZWZvcmUgPSBzY3JvbGxlZFBhc3RUb3AgPyBzY3JvbGxlZFBhc3RUb3Auc2Nyb2xsVG9wIDogdm9pZCAwO1xuXG4gICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAgPSB0YXJnZXRSZWN0W3NpZGUxXTtcbiAgICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICAgICAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gIWRpZmZlcmVudFJvd0NvbCAmJiBvcHRpb25zLmludmVydFN3YXAgfHwgZGlmZmVyZW50TGV2ZWw7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3Rpb24gPSBfZ2V0U3dhcERpcmVjdGlvbihldnQsIHRhcmdldCwgdGFyZ2V0UmVjdCwgdmVydGljYWwsIGRpZmZlcmVudFJvd0NvbCA/IDEgOiBvcHRpb25zLnN3YXBUaHJlc2hvbGQsIG9wdGlvbnMuaW52ZXJ0ZWRTd2FwVGhyZXNob2xkID09IG51bGwgPyBvcHRpb25zLnN3YXBUaHJlc2hvbGQgOiBvcHRpb25zLmludmVydGVkU3dhcFRocmVzaG9sZCwgaXNDaXJjdW1zdGFudGlhbEludmVydCwgbGFzdFRhcmdldCA9PT0gdGFyZ2V0KTtcbiAgICAgICAgdmFyIHNpYmxpbmc7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAhPT0gMCkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHRhcmdldCBpcyBiZXNpZGUgZHJhZ0VsIGluIHJlc3BlY3RpdmUgZGlyZWN0aW9uIChpZ25vcmluZyBoaWRkZW4gZWxlbWVudHMpXG4gICAgICAgICAgdmFyIGRyYWdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBkcmFnSW5kZXggLT0gZGlyZWN0aW9uO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudEVsLmNoaWxkcmVuW2RyYWdJbmRleF07XG4gICAgICAgICAgfSB3aGlsZSAoc2libGluZyAmJiAoY3NzKHNpYmxpbmcsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBzaWJsaW5nID09PSBnaG9zdEVsKSk7XG4gICAgICAgIH0gLy8gSWYgZHJhZ0VsIGlzIGFscmVhZHkgYmVzaWRlIHRhcmdldDogRG8gbm90IGluc2VydFxuXG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMCB8fCBzaWJsaW5nID09PSB0YXJnZXQpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIGxhc3REaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcsXG4gICAgICAgICAgICBhZnRlciA9IGZhbHNlO1xuICAgICAgICBhZnRlciA9IGRpcmVjdGlvbiA9PT0gMTtcblxuICAgICAgICB2YXIgbW92ZVZlY3RvciA9IF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsIGFmdGVyKTtcblxuICAgICAgICBpZiAobW92ZVZlY3RvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAobW92ZVZlY3RvciA9PT0gMSB8fCBtb3ZlVmVjdG9yID09PSAtMSkge1xuICAgICAgICAgICAgYWZ0ZXIgPSBtb3ZlVmVjdG9yID09PSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9zaWxlbnQgPSB0cnVlO1xuICAgICAgICAgIHNldFRpbWVvdXQoX3Vuc2lsZW50LCAzMCk7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuXG4gICAgICAgICAgaWYgKGFmdGVyICYmICFuZXh0U2libGluZykge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgYWZ0ZXIgPyBuZXh0U2libGluZyA6IHRhcmdldCk7XG4gICAgICAgICAgfSAvLyBVbmRvIGNocm9tZSdzIHNjcm9sbCBhZGp1c3RtZW50IChoYXMgbm8gZWZmZWN0IG9uIG90aGVyIGJyb3dzZXJzKVxuXG5cbiAgICAgICAgICBpZiAoc2Nyb2xsZWRQYXN0VG9wKSB7XG4gICAgICAgICAgICBzY3JvbGxCeShzY3JvbGxlZFBhc3RUb3AsIDAsIHNjcm9sbEJlZm9yZSAtIHNjcm9sbGVkUGFzdFRvcC5zY3JvbGxUb3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7IC8vIGFjdHVhbGl6YXRpb25cbiAgICAgICAgICAvLyBtdXN0IGJlIGRvbmUgYmVmb3JlIGFuaW1hdGlvblxuXG4gICAgICAgICAgaWYgKHRhcmdldEJlZm9yZUZpcnN0U3dhcCAhPT0gdW5kZWZpbmVkICYmICFpc0NpcmN1bXN0YW50aWFsSW52ZXJ0KSB7XG4gICAgICAgICAgICB0YXJnZXRNb3ZlRGlzdGFuY2UgPSBNYXRoLmFicyh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgLSBnZXRSZWN0KHRhcmdldClbc2lkZTFdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkKCk7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZWwuY29udGFpbnMoZHJhZ0VsKSkge1xuICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIF9pZ25vcmVXaGlsZUFuaW1hdGluZzogbnVsbCxcbiAgX29mZk1vdmVFdmVudHM6IGZ1bmN0aW9uIF9vZmZNb3ZlRXZlbnRzKCkge1xuICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgfSxcbiAgX29mZlVwRXZlbnRzOiBmdW5jdGlvbiBfb2ZmVXBFdmVudHMoKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCB0aGlzKTtcbiAgfSxcbiAgX29uRHJvcDogZnVuY3Rpb24gX29uRHJvcChcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICB2YXIgZWwgPSB0aGlzLmVsLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcblxuICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuICAgIHBsdWdpbkV2ZW50KCdkcm9wJywgdGhpcywge1xuICAgICAgZXZ0OiBldnRcbiAgICB9KTtcbiAgICBwYXJlbnRFbCA9IGRyYWdFbCAmJiBkcmFnRWwucGFyZW50Tm9kZTsgLy8gR2V0IGFnYWluIGFmdGVyIHBsdWdpbiBldmVudFxuXG4gICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgdGhpcy5fbnVsbGluZygpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSBmYWxzZTtcbiAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2xvb3BJZCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcblxuICAgIF9jYW5jZWxOZXh0VGljayh0aGlzLmNsb25lSWQpO1xuXG4gICAgX2NhbmNlbE5leHRUaWNrKHRoaXMuX2RyYWdTdGFydElkKTsgLy8gVW5iaW5kIGV2ZW50c1xuXG5cbiAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2Ryb3AnLCB0aGlzKTtcbiAgICAgIG9mZihlbCwgJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0KTtcbiAgICB9XG5cbiAgICB0aGlzLl9vZmZNb3ZlRXZlbnRzKCk7XG5cbiAgICB0aGlzLl9vZmZVcEV2ZW50cygpO1xuXG4gICAgaWYgKFNhZmFyaSkge1xuICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd1c2VyLXNlbGVjdCcsICcnKTtcbiAgICB9XG5cbiAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJycpO1xuXG4gICAgaWYgKGV2dCkge1xuICAgICAgaWYgKG1vdmVkKSB7XG4gICAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAhb3B0aW9ucy5kcm9wQnViYmxlICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgZ2hvc3RFbCAmJiBnaG9zdEVsLnBhcmVudE5vZGUgJiYgZ2hvc3RFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGdob3N0RWwpO1xuXG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICAvLyBSZW1vdmUgY2xvbmUocylcbiAgICAgICAgY2xvbmVFbCAmJiBjbG9uZUVsLnBhcmVudE5vZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHJhZ0VsKSB7XG4gICAgICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICAgIG9mZihkcmFnRWwsICdkcmFnZW5kJywgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfZGlzYWJsZURyYWdnYWJsZShkcmFnRWwpO1xuXG4gICAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnOyAvLyBSZW1vdmUgY2xhc3Nlc1xuICAgICAgICAvLyBnaG9zdENsYXNzIGlzIGFkZGVkIGluIGRyYWdTdGFydGVkXG5cbiAgICAgICAgaWYgKG1vdmVkICYmICFhd2FpdGluZ0RyYWdTdGFydGVkKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IHRoaXMub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpOyAvLyBEcmFnIHN0b3AgZXZlbnRcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgbmFtZTogJ3VuY2hvb3NlJyxcbiAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICBuZXdJbmRleDogbnVsbCxcbiAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleDogbnVsbCxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJvb3RFbCAhPT0gcGFyZW50RWwpIHtcbiAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgLy8gQWRkIGV2ZW50XG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG5hbWU6ICdhZGQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgZnJvbUVsOiByb290RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7IC8vIFJlbW92ZSBldmVudFxuXG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgIG5hbWU6ICdyZW1vdmUnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICB9KTsgLy8gZHJhZyBmcm9tIG9uZSBsaXN0IGFuZCBkcm9wIGludG8gYW5vdGhlclxuXG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgbmFtZTogJ3NvcnQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgZnJvbUVsOiByb290RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUuc2F2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChuZXdJbmRleCAhPT0gb2xkSW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChuZXdJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgIC8vIGRyYWcgJiBkcm9wIHdpdGhpbiB0aGUgc2FtZSBsaXN0XG4gICAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFNvcnRhYmxlLmFjdGl2ZSkge1xuICAgICAgICAgIC8qIGpzaGludCBlcW51bGw6dHJ1ZSAqL1xuICAgICAgICAgIGlmIChuZXdJbmRleCA9PSBudWxsIHx8IG5ld0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgbmV3SW5kZXggPSBvbGRJbmRleDtcbiAgICAgICAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICBuYW1lOiAnZW5kJyxcbiAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgfSk7IC8vIFNhdmUgc29ydGluZ1xuXG5cbiAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX251bGxpbmcoKTtcbiAgfSxcbiAgX251bGxpbmc6IGZ1bmN0aW9uIF9udWxsaW5nKCkge1xuICAgIHBsdWdpbkV2ZW50KCdudWxsaW5nJywgdGhpcyk7XG4gICAgcm9vdEVsID0gZHJhZ0VsID0gcGFyZW50RWwgPSBnaG9zdEVsID0gbmV4dEVsID0gY2xvbmVFbCA9IGxhc3REb3duRWwgPSBjbG9uZUhpZGRlbiA9IHRhcEV2dCA9IHRvdWNoRXZ0ID0gbW92ZWQgPSBuZXdJbmRleCA9IG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleCA9IGxhc3RUYXJnZXQgPSBsYXN0RGlyZWN0aW9uID0gcHV0U29ydGFibGUgPSBhY3RpdmVHcm91cCA9IFNvcnRhYmxlLmRyYWdnZWQgPSBTb3J0YWJsZS5naG9zdCA9IFNvcnRhYmxlLmNsb25lID0gU29ydGFibGUuYWN0aXZlID0gbnVsbDtcbiAgICBzYXZlZElucHV0Q2hlY2tlZC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwuY2hlY2tlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gbGFzdER4ID0gbGFzdER5ID0gMDtcbiAgfSxcbiAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KFxuICAvKipFdmVudCovXG4gIGV2dCkge1xuICAgIHN3aXRjaCAoZXZ0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ2Ryb3AnOlxuICAgICAgY2FzZSAnZHJhZ2VuZCc6XG4gICAgICAgIHRoaXMuX29uRHJvcChldnQpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkcmFnZW50ZXInOlxuICAgICAgY2FzZSAnZHJhZ292ZXInOlxuICAgICAgICBpZiAoZHJhZ0VsKSB7XG4gICAgICAgICAgdGhpcy5fb25EcmFnT3ZlcihldnQpO1xuXG4gICAgICAgICAgX2dsb2JhbERyYWdPdmVyKGV2dCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2VsZWN0c3RhcnQnOlxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBpdGVtIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5nLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nW119XG4gICAqL1xuICB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHZhciBvcmRlciA9IFtdLFxuICAgICAgICBlbCxcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmVsLmNoaWxkcmVuLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICBlbCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgICBpZiAoY2xvc2VzdChlbCwgb3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwsIGZhbHNlKSkge1xuICAgICAgICBvcmRlci5wdXNoKGVsLmdldEF0dHJpYnV0ZShvcHRpb25zLmRhdGFJZEF0dHIpIHx8IF9nZW5lcmF0ZUlkKGVsKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yZGVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTb3J0cyB0aGUgZWxlbWVudHMgYWNjb3JkaW5nIHRvIHRoZSBhcnJheS5cbiAgICogQHBhcmFtICB7U3RyaW5nW119ICBvcmRlciAgb3JkZXIgb2YgdGhlIGl0ZW1zXG4gICAqL1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KG9yZGVyKSB7XG4gICAgdmFyIGl0ZW1zID0ge30sXG4gICAgICAgIHJvb3RFbCA9IHRoaXMuZWw7XG4gICAgdGhpcy50b0FycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAoaWQsIGkpIHtcbiAgICAgIHZhciBlbCA9IHJvb3RFbC5jaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNsb3Nlc3QoZWwsIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHJvb3RFbCwgZmFsc2UpKSB7XG4gICAgICAgIGl0ZW1zW2lkXSA9IGVsO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoaXRlbXNbaWRdKSB7XG4gICAgICAgIHJvb3RFbC5yZW1vdmVDaGlsZChpdGVtc1tpZF0pO1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogU2F2ZSB0aGUgY3VycmVudCBzb3J0aW5nXG4gICAqL1xuICBzYXZlOiBmdW5jdGlvbiBzYXZlKCkge1xuICAgIHZhciBzdG9yZSA9IHRoaXMub3B0aW9ucy5zdG9yZTtcbiAgICBzdG9yZSAmJiBzdG9yZS5zZXQgJiYgc3RvcmUuc2V0KHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXG4gICAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gIGVsXG4gICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgIFtzZWxlY3Rvcl0gIGRlZmF1bHQ6IGBvcHRpb25zLmRyYWdnYWJsZWBcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fG51bGx9XG4gICAqL1xuICBjbG9zZXN0OiBmdW5jdGlvbiBjbG9zZXN0JDEoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGNsb3Nlc3QoZWwsIHNlbGVjdG9yIHx8IHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwsIGZhbHNlKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0L2dldCBvcHRpb25cbiAgICogQHBhcmFtICAge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0gICB7Kn0gICAgICBbdmFsdWVdXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgb3B0aW9uOiBmdW5jdGlvbiBvcHRpb24obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gb3B0aW9uc1tuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1vZGlmaWVkVmFsdWUgPSBQbHVnaW5NYW5hZ2VyLm1vZGlmeU9wdGlvbih0aGlzLCBuYW1lLCB2YWx1ZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IG1vZGlmaWVkVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSAnZ3JvdXAnKSB7XG4gICAgICAgIF9wcmVwYXJlR3JvdXAob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZXN0cm95XG4gICAqL1xuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHBsdWdpbkV2ZW50KCdkZXN0cm95JywgdGhpcyk7XG4gICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICBlbFtleHBhbmRvXSA9IG51bGw7XG4gICAgb2ZmKGVsLCAnbW91c2Vkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgb2ZmKGVsLCAndG91Y2hzdGFydCcsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9mZihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG5cbiAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgIG9mZihlbCwgJ2RyYWdvdmVyJywgdGhpcyk7XG4gICAgICBvZmYoZWwsICdkcmFnZW50ZXInLCB0aGlzKTtcbiAgICB9IC8vIFJlbW92ZSBkcmFnZ2FibGUgYXR0cmlidXRlc1xuXG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkcmFnZ2FibGVdJyksIGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkcmFnZ2FibGUnKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX29uRHJvcCgpO1xuXG4gICAgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCk7XG5cbiAgICBzb3J0YWJsZXMuc3BsaWNlKHNvcnRhYmxlcy5pbmRleE9mKHRoaXMuZWwpLCAxKTtcbiAgICB0aGlzLmVsID0gZWwgPSBudWxsO1xuICB9LFxuICBfaGlkZUNsb25lOiBmdW5jdGlvbiBfaGlkZUNsb25lKCkge1xuICAgIGlmICghY2xvbmVIaWRkZW4pIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdoaWRlQ2xvbmUnLCB0aGlzKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm47XG4gICAgICBjc3MoY2xvbmVFbCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlICYmIGNsb25lRWwucGFyZW50Tm9kZSkge1xuICAgICAgICBjbG9uZUVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGNsb25lSGlkZGVuID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIF9zaG93Q2xvbmU6IGZ1bmN0aW9uIF9zaG93Q2xvbmUocHV0U29ydGFibGUpIHtcbiAgICBpZiAocHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgIHRoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNsb25lSGlkZGVuKSB7XG4gICAgICBwbHVnaW5FdmVudCgnc2hvd0Nsb25lJywgdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuOyAvLyBzaG93IGNsb25lIGF0IGRyYWdFbCBvciBvcmlnaW5hbCBwb3NpdGlvblxuXG4gICAgICBpZiAocm9vdEVsLmNvbnRhaW5zKGRyYWdFbCkgJiYgIXRoaXMub3B0aW9ucy5ncm91cC5yZXZlcnRDbG9uZSkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIGRyYWdFbCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHRFbCkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIG5leHRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlKGRyYWdFbCwgY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICcnKTtcbiAgICAgIGNsb25lSGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfZ2xvYmFsRHJhZ092ZXIoXG4vKipFdmVudCovXG5ldnQpIHtcbiAgaWYgKGV2dC5kYXRhVHJhbnNmZXIpIHtcbiAgICBldnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gIH1cblxuICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbn1cblxuZnVuY3Rpb24gX29uTW92ZShmcm9tRWwsIHRvRWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldEVsLCB0YXJnZXRSZWN0LCBvcmlnaW5hbEV2ZW50LCB3aWxsSW5zZXJ0QWZ0ZXIpIHtcbiAgdmFyIGV2dCxcbiAgICAgIHNvcnRhYmxlID0gZnJvbUVsW2V4cGFuZG9dLFxuICAgICAgb25Nb3ZlRm4gPSBzb3J0YWJsZS5vcHRpb25zLm9uTW92ZSxcbiAgICAgIHJldFZhbDsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmVcblxuICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7XG4gICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KCdtb3ZlJywge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KCdtb3ZlJywgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBldnQudG8gPSB0b0VsO1xuICBldnQuZnJvbSA9IGZyb21FbDtcbiAgZXZ0LmRyYWdnZWQgPSBkcmFnRWw7XG4gIGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0O1xuICBldnQucmVsYXRlZCA9IHRhcmdldEVsIHx8IHRvRWw7XG4gIGV2dC5yZWxhdGVkUmVjdCA9IHRhcmdldFJlY3QgfHwgZ2V0UmVjdCh0b0VsKTtcbiAgZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBmcm9tRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuXG4gIGlmIChvbk1vdmVGbikge1xuICAgIHJldFZhbCA9IG9uTW92ZUZuLmNhbGwoc29ydGFibGUsIGV2dCwgb3JpZ2luYWxFdmVudCk7XG4gIH1cblxuICByZXR1cm4gcmV0VmFsO1xufVxuXG5mdW5jdGlvbiBfZGlzYWJsZURyYWdnYWJsZShlbCkge1xuICBlbC5kcmFnZ2FibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX3Vuc2lsZW50KCkge1xuICBfc2lsZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9naG9zdElzTGFzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgcmVjdCA9IGdldFJlY3QobGFzdENoaWxkKHNvcnRhYmxlLmVsLCBzb3J0YWJsZS5vcHRpb25zLmRyYWdnYWJsZSkpO1xuICB2YXIgc3BhY2VyID0gMTA7XG4gIHJldHVybiB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRYID4gcmVjdC5yaWdodCArIHNwYWNlciB8fCBldnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC5ib3R0b20gJiYgZXZ0LmNsaWVudFggPj0gcmVjdC5sZWZ0IDogZXZ0LmNsaWVudFggPiByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC50b3AgfHwgZXZ0LmNsaWVudFggPD0gcmVjdC5yaWdodCAmJiBldnQuY2xpZW50WSA+IHJlY3QuYm90dG9tICsgc3BhY2VyO1xufVxuXG5mdW5jdGlvbiBfZ2V0U3dhcERpcmVjdGlvbihldnQsIHRhcmdldCwgdGFyZ2V0UmVjdCwgdmVydGljYWwsIHN3YXBUaHJlc2hvbGQsIGludmVydGVkU3dhcFRocmVzaG9sZCwgaW52ZXJ0U3dhcCwgaXNMYXN0VGFyZ2V0KSB7XG4gIHZhciBtb3VzZU9uQXhpcyA9IHZlcnRpY2FsID8gZXZ0LmNsaWVudFkgOiBldnQuY2xpZW50WCxcbiAgICAgIHRhcmdldExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5oZWlnaHQgOiB0YXJnZXRSZWN0LndpZHRoLFxuICAgICAgdGFyZ2V0UzEgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QudG9wIDogdGFyZ2V0UmVjdC5sZWZ0LFxuICAgICAgdGFyZ2V0UzIgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QuYm90dG9tIDogdGFyZ2V0UmVjdC5yaWdodCxcbiAgICAgIGludmVydCA9IGZhbHNlO1xuXG4gIGlmICghaW52ZXJ0U3dhcCkge1xuICAgIC8vIE5ldmVyIGludmVydCBvciBjcmVhdGUgZHJhZ0VsIHNoYWRvdyB3aGVuIHRhcmdldCBtb3ZlbWVuZXQgY2F1c2VzIG1vdXNlIHRvIG1vdmUgcGFzdCB0aGUgZW5kIG9mIHJlZ3VsYXIgc3dhcFRocmVzaG9sZFxuICAgIGlmIChpc0xhc3RUYXJnZXQgJiYgdGFyZ2V0TW92ZURpc3RhbmNlIDwgdGFyZ2V0TGVuZ3RoICogc3dhcFRocmVzaG9sZCkge1xuICAgICAgLy8gbXVsdGlwbGllZCBvbmx5IGJ5IHN3YXBUaHJlc2hvbGQgYmVjYXVzZSBtb3VzZSB3aWxsIGFscmVhZHkgYmUgaW5zaWRlIHRhcmdldCBieSAoMSAtIHRocmVzaG9sZCkgKiB0YXJnZXRMZW5ndGggLyAyXG4gICAgICAvLyBjaGVjayBpZiBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQgb24gc2lkZSBvcHBvc2l0ZSBvZiBsYXN0RGlyZWN0aW9uXG4gICAgICBpZiAoIXBhc3RGaXJzdEludmVydFRocmVzaCAmJiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIDogbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIpKSB7XG4gICAgICAgIC8vIHBhc3QgZmlyc3QgaW52ZXJ0IHRocmVzaG9sZCwgZG8gbm90IHJlc3RyaWN0IGludmVydGVkIHRocmVzaG9sZCB0byBkcmFnRWwgc2hhZG93XG4gICAgICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoKSB7XG4gICAgICAgIC8vIGRyYWdFbCBzaGFkb3cgKHRhcmdldCBtb3ZlIGRpc3RhbmNlIHNoYWRvdylcbiAgICAgICAgaWYgKGxhc3REaXJlY3Rpb24gPT09IDEgPyBtb3VzZU9uQXhpcyA8IHRhcmdldFMxICsgdGFyZ2V0TW92ZURpc3RhbmNlIC8vIG92ZXIgZHJhZ0VsIHNoYWRvd1xuICAgICAgICA6IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRNb3ZlRGlzdGFuY2UpIHtcbiAgICAgICAgICByZXR1cm4gLWxhc3REaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmVydCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlZ3VsYXJcbiAgICAgIGlmIChtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIgJiYgbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqICgxIC0gc3dhcFRocmVzaG9sZCkgLyAyKSB7XG4gICAgICAgIHJldHVybiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW52ZXJ0ID0gaW52ZXJ0IHx8IGludmVydFN3YXA7XG5cbiAgaWYgKGludmVydCkge1xuICAgIC8vIEludmVydCBvZiByZWd1bGFyXG4gICAgaWYgKG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIHx8IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSB7XG4gICAgICByZXR1cm4gbW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAvIDIgPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG4vKipcbiAqIEdldHMgdGhlIGRpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkIHJlbGF0aXZlIHRvIHRhcmdldCBpbiBvcmRlciB0byBtYWtlIGl0XG4gKiBzZWVtIHRoYXQgZHJhZ0VsIGhhcyBiZWVuIFwiaW5zZXJ0ZWRcIiBpbnRvIHRoYXQgZWxlbWVudCdzIHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gdGFyZ2V0ICAgICAgIFRoZSB0YXJnZXQgd2hvc2UgcG9zaXRpb24gZHJhZ0VsIGlzIGJlaW5nIGluc2VydGVkIGF0XG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgIERpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkXG4gKi9cblxuXG5mdW5jdGlvbiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCkge1xuICBpZiAoaW5kZXgoZHJhZ0VsKSA8IGluZGV4KHRhcmdldCkpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn1cbi8qKlxuICogR2VuZXJhdGUgaWRcbiAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gX2dlbmVyYXRlSWQoZWwpIHtcbiAgdmFyIHN0ciA9IGVsLnRhZ05hbWUgKyBlbC5jbGFzc05hbWUgKyBlbC5zcmMgKyBlbC5ocmVmICsgZWwudGV4dENvbnRlbnQsXG4gICAgICBpID0gc3RyLmxlbmd0aCxcbiAgICAgIHN1bSA9IDA7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHN1bSArPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuXG4gIHJldHVybiBzdW0udG9TdHJpbmcoMzYpO1xufVxuXG5mdW5jdGlvbiBfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKHJvb3QpIHtcbiAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gMDtcbiAgdmFyIGlucHV0cyA9IHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0Jyk7XG4gIHZhciBpZHggPSBpbnB1dHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpZHgtLSkge1xuICAgIHZhciBlbCA9IGlucHV0c1tpZHhdO1xuICAgIGVsLmNoZWNrZWQgJiYgc2F2ZWRJbnB1dENoZWNrZWQucHVzaChlbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX25leHRUaWNrKGZuKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZuLCAwKTtcbn1cblxuZnVuY3Rpb24gX2NhbmNlbE5leHRUaWNrKGlkKSB7XG4gIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufSAvLyBGaXhlZCAjOTczOlxuXG5cbmlmIChkb2N1bWVudEV4aXN0cykge1xuICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoKFNvcnRhYmxlLmFjdGl2ZSB8fCBhd2FpdGluZ0RyYWdTdGFydGVkKSAmJiBldnQuY2FuY2VsYWJsZSkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9KTtcbn0gLy8gRXhwb3J0IHV0aWxzXG5cblxuU29ydGFibGUudXRpbHMgPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGNzczogY3NzLFxuICBmaW5kOiBmaW5kLFxuICBpczogZnVuY3Rpb24gaXMoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuICEhY2xvc2VzdChlbCwgc2VsZWN0b3IsIGVsLCBmYWxzZSk7XG4gIH0sXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0aHJvdHRsZTogdGhyb3R0bGUsXG4gIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcbiAgY2xvbmU6IGNsb25lLFxuICBpbmRleDogaW5kZXgsXG4gIG5leHRUaWNrOiBfbmV4dFRpY2ssXG4gIGNhbmNlbE5leHRUaWNrOiBfY2FuY2VsTmV4dFRpY2ssXG4gIGRldGVjdERpcmVjdGlvbjogX2RldGVjdERpcmVjdGlvbixcbiAgZ2V0Q2hpbGQ6IGdldENoaWxkXG59O1xuLyoqXG4gKiBHZXQgdGhlIFNvcnRhYmxlIGluc3RhbmNlIG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50XG4gKiBAcmV0dXJuIHtTb3J0YWJsZXx1bmRlZmluZWR9ICAgICAgICAgVGhlIGluc3RhbmNlIG9mIFNvcnRhYmxlXG4gKi9cblxuU29ydGFibGUuZ2V0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnRbZXhwYW5kb107XG59O1xuLyoqXG4gKiBNb3VudCBhIHBsdWdpbiB0byBTb3J0YWJsZVxuICogQHBhcmFtICB7Li4uU29ydGFibGVQbHVnaW58U29ydGFibGVQbHVnaW5bXX0gcGx1Z2lucyAgICAgICBQbHVnaW5zIGJlaW5nIG1vdW50ZWRcbiAqL1xuXG5cblNvcnRhYmxlLm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKHBsdWdpbnNbMF0uY29uc3RydWN0b3IgPT09IEFycmF5KSBwbHVnaW5zID0gcGx1Z2luc1swXTtcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICBpZiAoIXBsdWdpbi5wcm90b3R5cGUgfHwgIXBsdWdpbi5wcm90b3R5cGUuY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IFwiU29ydGFibGU6IE1vdW50ZWQgcGx1Z2luIG11c3QgYmUgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKHBsdWdpbikpO1xuICAgIH1cblxuICAgIGlmIChwbHVnaW4udXRpbHMpIFNvcnRhYmxlLnV0aWxzID0gX29iamVjdFNwcmVhZCh7fSwgU29ydGFibGUudXRpbHMsIHBsdWdpbi51dGlscyk7XG4gICAgUGx1Z2luTWFuYWdlci5tb3VudChwbHVnaW4pO1xuICB9KTtcbn07XG4vKipcbiAqIENyZWF0ZSBzb3J0YWJsZSBpbnN0YW5jZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gIGVsXG4gKiBAcGFyYW0ge09iamVjdH0gICAgICBbb3B0aW9uc11cbiAqL1xuXG5cblNvcnRhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChlbCwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFNvcnRhYmxlKGVsLCBvcHRpb25zKTtcbn07IC8vIEV4cG9ydFxuXG5cblNvcnRhYmxlLnZlcnNpb24gPSB2ZXJzaW9uO1xuXG52YXIgYXV0b1Njcm9sbHMgPSBbXSxcbiAgICBzY3JvbGxFbCxcbiAgICBzY3JvbGxSb290RWwsXG4gICAgc2Nyb2xsaW5nID0gZmFsc2UsXG4gICAgbGFzdEF1dG9TY3JvbGxYLFxuICAgIGxhc3RBdXRvU2Nyb2xsWSxcbiAgICB0b3VjaEV2dCQxLFxuICAgIHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsO1xuXG5mdW5jdGlvbiBBdXRvU2Nyb2xsUGx1Z2luKCkge1xuICBmdW5jdGlvbiBBdXRvU2Nyb2xsKCkge1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICBzY3JvbGw6IHRydWUsXG4gICAgICBzY3JvbGxTZW5zaXRpdml0eTogMzAsXG4gICAgICBzY3JvbGxTcGVlZDogMTAsXG4gICAgICBidWJibGVTY3JvbGw6IHRydWVcbiAgICB9OyAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcblxuICAgIGZvciAodmFyIGZuIGluIHRoaXMpIHtcbiAgICAgIGlmIChmbi5jaGFyQXQoMCkgPT09ICdfJyAmJiB0eXBlb2YgdGhpc1tmbl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEF1dG9TY3JvbGwucHJvdG90eXBlID0ge1xuICAgIGRyYWdTdGFydGVkOiBmdW5jdGlvbiBkcmFnU3RhcnRlZChfcmVmKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudDtcblxuICAgICAgaWYgKHRoaXMuc29ydGFibGUubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbEV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjIpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZjIub3JpZ2luYWxFdmVudDtcblxuICAgICAgLy8gRm9yIHdoZW4gYnViYmxpbmcgaXMgY2FuY2VsZWQgYW5kIHVzaW5nIGZhbGxiYWNrIChmYWxsYmFjayAndG91Y2htb3ZlJyBhbHdheXMgcmVhY2hlZClcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRyYWdPdmVyQnViYmxlICYmICFvcmlnaW5hbEV2ZW50LnJvb3RFbCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKG9yaWdpbmFsRXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcCgpIHtcbiAgICAgIGlmICh0aGlzLnNvcnRhYmxlLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvZmYoZG9jdW1lbnQsICdkcmFnb3ZlcicsIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgfVxuXG4gICAgICBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCk7XG4gICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICBjYW5jZWxUaHJvdHRsZSgpO1xuICAgIH0sXG4gICAgbnVsbGluZzogZnVuY3Rpb24gbnVsbGluZygpIHtcbiAgICAgIHRvdWNoRXZ0JDEgPSBzY3JvbGxSb290RWwgPSBzY3JvbGxFbCA9IHNjcm9sbGluZyA9IHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsID0gbGFzdEF1dG9TY3JvbGxYID0gbGFzdEF1dG9TY3JvbGxZID0gbnVsbDtcbiAgICAgIGF1dG9TY3JvbGxzLmxlbmd0aCA9IDA7XG4gICAgfSxcbiAgICBfaGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsOiBmdW5jdGlvbiBfaGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKGV2dCkge1xuICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChldnQsIHRydWUpO1xuICAgIH0sXG4gICAgX2hhbmRsZUF1dG9TY3JvbGw6IGZ1bmN0aW9uIF9oYW5kbGVBdXRvU2Nyb2xsKGV2dCwgZmFsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsXG4gICAgICAgICAgeSA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRZLFxuICAgICAgICAgIGVsZW0gPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgICAgdG91Y2hFdnQkMSA9IGV2dDsgLy8gSUUgZG9lcyBub3Qgc2VlbSB0byBoYXZlIG5hdGl2ZSBhdXRvc2Nyb2xsLFxuICAgICAgLy8gRWRnZSdzIGF1dG9zY3JvbGwgc2VlbXMgdG9vIGNvbmRpdGlvbmFsLFxuICAgICAgLy8gTUFDT1MgU2FmYXJpIGRvZXMgbm90IGhhdmUgYXV0b3Njcm9sbCxcbiAgICAgIC8vIEZpcmVmb3ggYW5kIENocm9tZSBhcmUgZ29vZFxuXG4gICAgICBpZiAoZmFsbGJhY2sgfHwgRWRnZSB8fCBJRTExT3JMZXNzIHx8IFNhZmFyaSkge1xuICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgdGhpcy5vcHRpb25zLCBlbGVtLCBmYWxsYmFjayk7IC8vIExpc3RlbmVyIGZvciBwb2ludGVyIGVsZW1lbnQgY2hhbmdlXG5cbiAgICAgICAgdmFyIG9nRWxlbVNjcm9sbGVyID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHNjcm9sbGluZyAmJiAoIXBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIHx8IHggIT09IGxhc3RBdXRvU2Nyb2xsWCB8fCB5ICE9PSBsYXN0QXV0b1Njcm9sbFkpKSB7XG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgJiYgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpOyAvLyBEZXRlY3QgZm9yIHBvaW50ZXIgZWxlbSBjaGFuZ2UsIGVtdWxhdGluZyBuYXRpdmUgRG5EIGJlaGF2aW91clxuXG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV3RWxlbSA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSksIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAobmV3RWxlbSAhPT0gb2dFbGVtU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgb2dFbGVtU2Nyb2xsZXIgPSBuZXdFbGVtO1xuICAgICAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF1dG9TY3JvbGwoZXZ0LCBfdGhpcy5vcHRpb25zLCBuZXdFbGVtLCBmYWxsYmFjayk7XG4gICAgICAgICAgfSwgMTApO1xuICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWCA9IHg7XG4gICAgICAgICAgbGFzdEF1dG9TY3JvbGxZID0geTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgRG5EIGlzIGVuYWJsZWQgKGFuZCBicm93c2VyIGhhcyBnb29kIGF1dG9zY3JvbGxpbmcpLCBmaXJzdCBhdXRvc2Nyb2xsIHdpbGwgYWxyZWFkeSBzY3JvbGwsIHNvIGdldCBwYXJlbnQgYXV0b3Njcm9sbCBvZiBmaXJzdCBhdXRvc2Nyb2xsXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmJ1YmJsZVNjcm9sbCB8fCBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbGVtLCB0cnVlKSA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSB7XG4gICAgICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF1dG9TY3JvbGwoZXZ0LCB0aGlzLm9wdGlvbnMsIGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIGZhbHNlKSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKEF1dG9TY3JvbGwsIHtcbiAgICBwbHVnaW5OYW1lOiAnc2Nyb2xsJyxcbiAgICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhckF1dG9TY3JvbGxzKCkge1xuICBhdXRvU2Nyb2xscy5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvU2Nyb2xsKSB7XG4gICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsLnBpZCk7XG4gIH0pO1xuICBhdXRvU2Nyb2xscyA9IFtdO1xufVxuXG5mdW5jdGlvbiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCkge1xuICBjbGVhckludGVydmFsKHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKTtcbn1cblxudmFyIGF1dG9TY3JvbGwgPSB0aHJvdHRsZShmdW5jdGlvbiAoZXZ0LCBvcHRpb25zLCByb290RWwsIGlzRmFsbGJhY2spIHtcbiAgLy8gQnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01MDU1MjFcbiAgaWYgKCFvcHRpb25zLnNjcm9sbCkgcmV0dXJuO1xuICB2YXIgeCA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRYLFxuICAgICAgeSA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRZLFxuICAgICAgc2VucyA9IG9wdGlvbnMuc2Nyb2xsU2Vuc2l0aXZpdHksXG4gICAgICBzcGVlZCA9IG9wdGlvbnMuc2Nyb2xsU3BlZWQsXG4gICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIHNjcm9sbFRoaXNJbnN0YW5jZSA9IGZhbHNlLFxuICAgICAgc2Nyb2xsQ3VzdG9tRm47IC8vIE5ldyBzY3JvbGwgcm9vdCwgc2V0IHNjcm9sbEVsXG5cbiAgaWYgKHNjcm9sbFJvb3RFbCAhPT0gcm9vdEVsKSB7XG4gICAgc2Nyb2xsUm9vdEVsID0gcm9vdEVsO1xuICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICBzY3JvbGxFbCA9IG9wdGlvbnMuc2Nyb2xsO1xuICAgIHNjcm9sbEN1c3RvbUZuID0gb3B0aW9ucy5zY3JvbGxGbjtcblxuICAgIGlmIChzY3JvbGxFbCA9PT0gdHJ1ZSkge1xuICAgICAgc2Nyb2xsRWwgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChyb290RWwsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsYXllcnNPdXQgPSAwO1xuICB2YXIgY3VycmVudFBhcmVudCA9IHNjcm9sbEVsO1xuXG4gIGRvIHtcbiAgICB2YXIgZWwgPSBjdXJyZW50UGFyZW50LFxuICAgICAgICByZWN0ID0gZ2V0UmVjdChlbCksXG4gICAgICAgIHRvcCA9IHJlY3QudG9wLFxuICAgICAgICBib3R0b20gPSByZWN0LmJvdHRvbSxcbiAgICAgICAgbGVmdCA9IHJlY3QubGVmdCxcbiAgICAgICAgcmlnaHQgPSByZWN0LnJpZ2h0LFxuICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0LFxuICAgICAgICBjYW5TY3JvbGxYID0gdm9pZCAwLFxuICAgICAgICBjYW5TY3JvbGxZID0gdm9pZCAwLFxuICAgICAgICBzY3JvbGxXaWR0aCA9IGVsLnNjcm9sbFdpZHRoLFxuICAgICAgICBzY3JvbGxIZWlnaHQgPSBlbC5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGVsQ1NTID0gY3NzKGVsKSxcbiAgICAgICAgc2Nyb2xsUG9zWCA9IGVsLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFBvc1kgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICBpZiAoZWwgPT09IHdpblNjcm9sbGVyKSB7XG4gICAgICBjYW5TY3JvbGxYID0gd2lkdGggPCBzY3JvbGxXaWR0aCAmJiAoZWxDU1Mub3ZlcmZsb3dYID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAnc2Nyb2xsJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICd2aXNpYmxlJyk7XG4gICAgICBjYW5TY3JvbGxZID0gaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICYmIChlbENTUy5vdmVyZmxvd1kgPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Zpc2libGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcpO1xuICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyk7XG4gICAgfVxuXG4gICAgdmFyIHZ4ID0gY2FuU2Nyb2xsWCAmJiAoTWF0aC5hYnMocmlnaHQgLSB4KSA8PSBzZW5zICYmIHNjcm9sbFBvc1ggKyB3aWR0aCA8IHNjcm9sbFdpZHRoKSAtIChNYXRoLmFicyhsZWZ0IC0geCkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1gpO1xuICAgIHZhciB2eSA9IGNhblNjcm9sbFkgJiYgKE1hdGguYWJzKGJvdHRvbSAtIHkpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWSArIGhlaWdodCA8IHNjcm9sbEhlaWdodCkgLSAoTWF0aC5hYnModG9wIC0geSkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1kpO1xuXG4gICAgaWYgKCFhdXRvU2Nyb2xsc1tsYXllcnNPdXRdKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXllcnNPdXQ7IGkrKykge1xuICAgICAgICBpZiAoIWF1dG9TY3JvbGxzW2ldKSB7XG4gICAgICAgICAgYXV0b1Njcm9sbHNbaV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ4ICE9IHZ4IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0udnkgIT0gdnkgfHwgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5lbCAhPT0gZWwpIHtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgPSBlbDtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0udnggPSB2eDtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0udnkgPSB2eTtcbiAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQpO1xuXG4gICAgICBpZiAodnggIT0gMCB8fCB2eSAhPSAwKSB7XG4gICAgICAgIHNjcm9sbFRoaXNJbnN0YW5jZSA9IHRydWU7XG4gICAgICAgIC8qIGpzaGludCBsb29wZnVuYzp0cnVlICovXG5cbiAgICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gZW11bGF0ZSBkcmFnIG92ZXIgZHVyaW5nIGF1dG9zY3JvbGwgKGZhbGxiYWNrKSwgZW11bGF0aW5nIG5hdGl2ZSBEbkQgYmVoYXZpb3VyXG4gICAgICAgICAgaWYgKGlzRmFsbGJhY2sgJiYgdGhpcy5sYXllciA9PT0gMCkge1xuICAgICAgICAgICAgU29ydGFibGUuYWN0aXZlLl9vblRvdWNoTW92ZSh0b3VjaEV2dCQxKTsgLy8gVG8gbW92ZSBnaG9zdCBpZiBpdCBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHlcblxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXRZID0gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnkgPyBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSAqIHNwZWVkIDogMDtcbiAgICAgICAgICB2YXIgc2Nyb2xsT2Zmc2V0WCA9IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ4ID8gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnggKiBzcGVlZCA6IDA7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHNjcm9sbEN1c3RvbUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsQ3VzdG9tRm4uY2FsbChTb3J0YWJsZS5kcmFnZ2VkLnBhcmVudE5vZGVbZXhwYW5kb10sIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFksIGV2dCwgdG91Y2hFdnQkMSwgYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwpICE9PSAnY29udGludWUnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY3JvbGxCeShhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS5lbCwgc2Nyb2xsT2Zmc2V0WCwgc2Nyb2xsT2Zmc2V0WSk7XG4gICAgICAgIH0uYmluZCh7XG4gICAgICAgICAgbGF5ZXI6IGxheWVyc091dFxuICAgICAgICB9KSwgMjQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxheWVyc091dCsrO1xuICB9IHdoaWxlIChvcHRpb25zLmJ1YmJsZVNjcm9sbCAmJiBjdXJyZW50UGFyZW50ICE9PSB3aW5TY3JvbGxlciAmJiAoY3VycmVudFBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGN1cnJlbnRQYXJlbnQsIGZhbHNlKSkpO1xuXG4gIHNjcm9sbGluZyA9IHNjcm9sbFRoaXNJbnN0YW5jZTsgLy8gaW4gY2FzZSBhbm90aGVyIGZ1bmN0aW9uIGNhdGNoZXMgc2Nyb2xsaW5nIGFzIGZhbHNlIGluIGJldHdlZW4gd2hlbiBpdCBpcyBub3Rcbn0sIDMwKTtcblxudmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKF9yZWYpIHtcbiAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsXG4gICAgICBwdXRTb3J0YWJsZSA9IF9yZWYucHV0U29ydGFibGUsXG4gICAgICBkcmFnRWwgPSBfcmVmLmRyYWdFbCxcbiAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZi5hY3RpdmVTb3J0YWJsZSxcbiAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LFxuICAgICAgaGlkZUdob3N0Rm9yVGFyZ2V0ID0gX3JlZi5oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgICB1bmhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYudW5oaWRlR2hvc3RGb3JUYXJnZXQ7XG4gIGlmICghb3JpZ2luYWxFdmVudCkgcmV0dXJuO1xuICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlO1xuICBoaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgdmFyIHRvdWNoID0gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/IG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBvcmlnaW5hbEV2ZW50O1xuICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcbiAgdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcblxuICBpZiAodG9Tb3J0YWJsZSAmJiAhdG9Tb3J0YWJsZS5lbC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdzcGlsbCcpO1xuICAgIHRoaXMub25TcGlsbCh7XG4gICAgICBkcmFnRWw6IGRyYWdFbCxcbiAgICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZVxuICAgIH0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZXZlcnQoKSB7fVxuXG5SZXZlcnQucHJvdG90eXBlID0ge1xuICBzdGFydEluZGV4OiBudWxsLFxuICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmMikge1xuICAgIHZhciBvbGREcmFnZ2FibGVJbmRleCA9IF9yZWYyLm9sZERyYWdnYWJsZUluZGV4O1xuICAgIHRoaXMuc3RhcnRJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICB9LFxuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWYzKSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWYzLmRyYWdFbCxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZTtcbiAgICB0aGlzLnNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgaWYgKHB1dFNvcnRhYmxlKSB7XG4gICAgICBwdXRTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFNpYmxpbmcgPSBnZXRDaGlsZCh0aGlzLnNvcnRhYmxlLmVsLCB0aGlzLnN0YXJ0SW5kZXgsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAobmV4dFNpYmxpbmcpIHtcbiAgICAgIHRoaXMuc29ydGFibGUuZWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgbmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNvcnRhYmxlLmVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgfVxuXG4gICAgdGhpcy5zb3J0YWJsZS5hbmltYXRlQWxsKCk7XG5cbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICB9XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5cbl9leHRlbmRzKFJldmVydCwge1xuICBwbHVnaW5OYW1lOiAncmV2ZXJ0T25TcGlsbCdcbn0pO1xuXG5mdW5jdGlvbiBSZW1vdmUoKSB7fVxuXG5SZW1vdmUucHJvdG90eXBlID0ge1xuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWY0KSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWY0LmRyYWdFbCxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmNC5wdXRTb3J0YWJsZTtcbiAgICB2YXIgcGFyZW50U29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgIHBhcmVudFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIGRyYWdFbC5wYXJlbnROb2RlICYmIGRyYWdFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRyYWdFbCk7XG4gICAgcGFyZW50U29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICB9LFxuICBkcm9wOiBkcm9wXG59O1xuXG5fZXh0ZW5kcyhSZW1vdmUsIHtcbiAgcGx1Z2luTmFtZTogJ3JlbW92ZU9uU3BpbGwnXG59KTtcblxudmFyIGxhc3RTd2FwRWw7XG5cbmZ1bmN0aW9uIFN3YXBQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIFN3YXAoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHN3YXBDbGFzczogJ3NvcnRhYmxlLXN3YXAtaGlnaGxpZ2h0J1xuICAgIH07XG4gIH1cblxuICBTd2FwLnByb3RvdHlwZSA9IHtcbiAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ0VsID0gX3JlZi5kcmFnRWw7XG4gICAgICBsYXN0U3dhcEVsID0gZHJhZ0VsO1xuICAgIH0sXG4gICAgZHJhZ092ZXJWYWxpZDogZnVuY3Rpb24gZHJhZ092ZXJWYWxpZChfcmVmMikge1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IF9yZWYyLmNvbXBsZXRlZCxcbiAgICAgICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICAgICAgb25Nb3ZlID0gX3JlZjIub25Nb3ZlLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjIuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgY2hhbmdlZCA9IF9yZWYyLmNoYW5nZWQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjIuY2FuY2VsO1xuICAgICAgaWYgKCFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnN3YXApIHJldHVybjtcbiAgICAgIHZhciBlbCA9IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IGVsKSB7XG4gICAgICAgIHZhciBwcmV2U3dhcEVsID0gbGFzdFN3YXBFbDtcblxuICAgICAgICBpZiAob25Nb3ZlKHRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3ModGFyZ2V0LCBvcHRpb25zLnN3YXBDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgbGFzdFN3YXBFbCA9IHRhcmdldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2U3dhcEVsICYmIHByZXZTd2FwRWwgIT09IGxhc3RTd2FwRWwpIHtcbiAgICAgICAgICB0b2dnbGVDbGFzcyhwcmV2U3dhcEVsLCBvcHRpb25zLnN3YXBDbGFzcywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoYW5nZWQoKTtcbiAgICAgIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcChfcmVmMykge1xuICAgICAgdmFyIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjMuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZSxcbiAgICAgICAgICBkcmFnRWwgPSBfcmVmMy5kcmFnRWw7XG4gICAgICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIGxhc3RTd2FwRWwgJiYgdG9nZ2xlQ2xhc3MobGFzdFN3YXBFbCwgb3B0aW9ucy5zd2FwQ2xhc3MsIGZhbHNlKTtcblxuICAgICAgaWYgKGxhc3RTd2FwRWwgJiYgKG9wdGlvbnMuc3dhcCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5vcHRpb25zLnN3YXApKSB7XG4gICAgICAgIGlmIChkcmFnRWwgIT09IGxhc3RTd2FwRWwpIHtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgICAgICAgIGlmICh0b1NvcnRhYmxlICE9PSBhY3RpdmVTb3J0YWJsZSkgYWN0aXZlU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICAgICAgc3dhcE5vZGVzKGRyYWdFbCwgbGFzdFN3YXBFbCk7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgICAgaWYgKHRvU29ydGFibGUgIT09IGFjdGl2ZVNvcnRhYmxlKSBhY3RpdmVTb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmc6IGZ1bmN0aW9uIG51bGxpbmcoKSB7XG4gICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhTd2FwLCB7XG4gICAgcGx1Z2luTmFtZTogJ3N3YXAnLFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3dhcEl0ZW06IGxhc3RTd2FwRWxcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICB2YXIgcDEgPSBuMS5wYXJlbnROb2RlLFxuICAgICAgcDIgPSBuMi5wYXJlbnROb2RlLFxuICAgICAgaTEsXG4gICAgICBpMjtcbiAgaWYgKCFwMSB8fCAhcDIgfHwgcDEuaXNFcXVhbE5vZGUobjIpIHx8IHAyLmlzRXF1YWxOb2RlKG4xKSkgcmV0dXJuO1xuICBpMSA9IGluZGV4KG4xKTtcbiAgaTIgPSBpbmRleChuMik7XG5cbiAgaWYgKHAxLmlzRXF1YWxOb2RlKHAyKSAmJiBpMSA8IGkyKSB7XG4gICAgaTIrKztcbiAgfVxuXG4gIHAxLmluc2VydEJlZm9yZShuMiwgcDEuY2hpbGRyZW5baTFdKTtcbiAgcDIuaW5zZXJ0QmVmb3JlKG4xLCBwMi5jaGlsZHJlbltpMl0pO1xufVxuXG52YXIgbXVsdGlEcmFnRWxlbWVudHMgPSBbXSxcbiAgICBtdWx0aURyYWdDbG9uZXMgPSBbXSxcbiAgICBsYXN0TXVsdGlEcmFnU2VsZWN0LFxuICAgIC8vIGZvciBzZWxlY3Rpb24gd2l0aCBtb2RpZmllciBrZXkgZG93biAoU0hJRlQpXG5tdWx0aURyYWdTb3J0YWJsZSxcbiAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlLFxuICAgIC8vIEluaXRpYWwgbXVsdGktZHJhZyBmb2xkIHdoZW4gZHJhZyBzdGFydGVkXG5mb2xkaW5nID0gZmFsc2UsXG4gICAgLy8gRm9sZGluZyBhbnkgb3RoZXIgdGltZVxuZHJhZ1N0YXJ0ZWQgPSBmYWxzZSxcbiAgICBkcmFnRWwkMSxcbiAgICBjbG9uZXNGcm9tUmVjdCxcbiAgICBjbG9uZXNIaWRkZW47XG5cbmZ1bmN0aW9uIE11bHRpRHJhZ1BsdWdpbigpIHtcbiAgZnVuY3Rpb24gTXVsdGlEcmFnKHNvcnRhYmxlKSB7XG4gICAgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG4gICAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNvcnRhYmxlLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvbihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgIH1cblxuICAgIG9uKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuX2NoZWNrS2V5RG93bik7XG4gICAgb24oZG9jdW1lbnQsICdrZXl1cCcsIHRoaXMuX2NoZWNrS2V5VXApO1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICBzZWxlY3RlZENsYXNzOiAnc29ydGFibGUtc2VsZWN0ZWQnLFxuICAgICAgbXVsdGlEcmFnS2V5OiBudWxsLFxuICAgICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgICB2YXIgZGF0YSA9ICcnO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgZGF0YSArPSAoIWkgPyAnJyA6ICcsICcpICsgbXVsdGlEcmFnRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gZHJhZ0VsLnRleHRDb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgTXVsdGlEcmFnLnByb3RvdHlwZSA9IHtcbiAgICBtdWx0aURyYWdLZXlEb3duOiBmYWxzZSxcbiAgICBpc011bHRpRHJhZzogZmFsc2UsXG4gICAgZGVsYXlTdGFydEdsb2JhbDogZnVuY3Rpb24gZGVsYXlTdGFydEdsb2JhbChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ2dlZCA9IF9yZWYuZHJhZ0VsO1xuICAgICAgZHJhZ0VsJDEgPSBkcmFnZ2VkO1xuICAgIH0sXG4gICAgZGVsYXlFbmRlZDogZnVuY3Rpb24gZGVsYXlFbmRlZCgpIHtcbiAgICAgIHRoaXMuaXNNdWx0aURyYWcgPSB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSk7XG4gICAgfSxcbiAgICBzZXR1cENsb25lOiBmdW5jdGlvbiBzZXR1cENsb25lKF9yZWYyKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMi5zb3J0YWJsZSxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmMi5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMucHVzaChjbG9uZShtdWx0aURyYWdFbGVtZW50c1tpXSkpO1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uc29ydGFibGVJbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzW2ldLnNvcnRhYmxlSW5kZXg7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG4gICAgICAgIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHNbaV0gPT09IGRyYWdFbCQxICYmIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoX3JlZjMpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYzLnNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYzLnJvb3RFbCxcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmMy5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjMuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKHRydWUsIHJvb3RFbCk7XG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdjbG9uZScpO1xuICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93Q2xvbmU6IGZ1bmN0aW9uIHNob3dDbG9uZShfcmVmNCkge1xuICAgICAgdmFyIGNsb25lTm93U2hvd24gPSBfcmVmNC5jbG9uZU5vd1Nob3duLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY0LnJvb3RFbCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmNC5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyhmYWxzZSwgcm9vdEVsKTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJycpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd1Nob3duKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSBmYWxzZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgaGlkZUNsb25lOiBmdW5jdGlvbiBoaWRlQ2xvbmUoX3JlZjUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY1LnNvcnRhYmxlLFxuICAgICAgICAgIGNsb25lTm93SGlkZGVuID0gX3JlZjUuY2xvbmVOb3dIaWRkZW4sXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjUuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgY3NzKGNsb25lLCAnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUgJiYgY2xvbmUucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsb25lTm93SGlkZGVuKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSB0cnVlO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBkcmFnU3RhcnRHbG9iYWw6IGZ1bmN0aW9uIGRyYWdTdGFydEdsb2JhbChfcmVmNikge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjYuc29ydGFibGU7XG5cbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZyAmJiBtdWx0aURyYWdTb3J0YWJsZSkge1xuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZS5tdWx0aURyYWcuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG4gICAgICB9XG5cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICB9KTsgLy8gU29ydCBtdWx0aS1kcmFnIGVsZW1lbnRzXG5cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzID0gbXVsdGlEcmFnRWxlbWVudHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5zb3J0YWJsZUluZGV4IC0gYi5zb3J0YWJsZUluZGV4O1xuICAgICAgfSk7XG4gICAgICBkcmFnU3RhcnRlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkcmFnU3RhcnRlZDogZnVuY3Rpb24gZHJhZ1N0YXJ0ZWQoX3JlZjcpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNy5zb3J0YWJsZTtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNvcnQpIHtcbiAgICAgICAgLy8gQ2FwdHVyZSByZWN0cyxcbiAgICAgICAgLy8gaGlkZSBtdWx0aSBkcmFnIGVsZW1lbnRzIChieSBwb3NpdGlvbmluZyB0aGVtIGFic29sdXRlKSxcbiAgICAgICAgLy8gc2V0IG11bHRpIGRyYWcgZWxlbWVudHMgcmVjdHMgdG8gZHJhZ1JlY3QsXG4gICAgICAgIC8vIHNob3cgbXVsdGkgZHJhZyBlbGVtZW50cyxcbiAgICAgICAgLy8gYW5pbWF0ZSB0byByZWN0cyxcbiAgICAgICAgLy8gdW5zZXQgcmVjdHMgJiByZW1vdmUgZnJvbSBET01cbiAgICAgICAgc29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIGNzcyhtdWx0aURyYWdFbGVtZW50LCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgICBpbml0aWFsRm9sZGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc29ydGFibGUuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgdW5zZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFJlbW92ZSBhbGwgYXV4aWxpYXJ5IG11bHRpZHJhZyBpdGVtcyBmcm9tIGVsLCBpZiBzb3J0aW5nIGVuYWJsZWRcblxuXG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkcmFnT3ZlcjogZnVuY3Rpb24gZHJhZ092ZXIoX3JlZjgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmOC50YXJnZXQsXG4gICAgICAgICAgY29tcGxldGVkID0gX3JlZjguY29tcGxldGVkLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWY4LmNhbmNlbDtcblxuICAgICAgaWYgKGZvbGRpbmcgJiYgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YodGFyZ2V0KSkge1xuICAgICAgICBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJldmVydDogZnVuY3Rpb24gcmV2ZXJ0KF9yZWY5KSB7XG4gICAgICB2YXIgZnJvbVNvcnRhYmxlID0gX3JlZjkuZnJvbVNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY5LnJvb3RFbCxcbiAgICAgICAgICBzb3J0YWJsZSA9IF9yZWY5LnNvcnRhYmxlLFxuICAgICAgICAgIGRyYWdSZWN0ID0gX3JlZjkuZHJhZ1JlY3Q7XG5cbiAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIFNldHVwIHVuZm9sZCBhbmltYXRpb25cbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgIHNvcnRhYmxlLmFkZEFuaW1hdGlvblN0YXRlKHtcbiAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgIHJlY3Q6IGZvbGRpbmcgPyBnZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpIDogZHJhZ1JlY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5mcm9tUmVjdCA9IGRyYWdSZWN0O1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5yZW1vdmVBbmltYXRpb25TdGF0ZShtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoIXRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSwgcm9vdEVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQ29tcGxldGVkOiBmdW5jdGlvbiBkcmFnT3ZlckNvbXBsZXRlZChfcmVmMTApIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYxMC5zb3J0YWJsZSxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjEwLmlzT3duZXIsXG4gICAgICAgICAgaW5zZXJ0aW9uID0gX3JlZjEwLmluc2VydGlvbixcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMC5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMC5wYXJlbnRFbCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMC5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTsgLy8gSWYgbGVhdmluZyBzb3J0OmZhbHNlIHJvb3QsIG9yIGFscmVhZHkgZm9sZGluZyAtIEZvbGQgdG8gbmV3IGxvY2F0aW9uXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEgJiYgKGZvbGRpbmcgfHwgIWlzT3duZXIgJiYgIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc29ydCAmJiAhcHV0U29ydGFibGUpKSB7XG4gICAgICAgICAgLy8gRm9sZDogU2V0IGFsbCBtdWx0aSBkcmFnIGVsZW1lbnRzJ3MgcmVjdHMgdG8gZHJhZ0VsJ3MgcmVjdCB3aGVuIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGludmlzaWJsZVxuICAgICAgICAgIHZhciBkcmFnUmVjdEFic29sdXRlID0gZ2V0UmVjdChkcmFnRWwkMSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0UmVjdChtdWx0aURyYWdFbGVtZW50LCBkcmFnUmVjdEFic29sdXRlKTsgLy8gTW92ZSBlbGVtZW50KHMpIHRvIGVuZCBvZiBwYXJlbnRFbCBzbyB0aGF0IGl0IGRvZXMgbm90IGludGVyZmVyZSB3aXRoIG11bHRpLWRyYWcgY2xvbmVzIGluc2VydGlvbiBpZiB0aGV5IGFyZSBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gd2hpbGUgZm9sZGluZywgYW5kIHNvIHRoYXQgd2UgY2FuIGNhcHR1cmUgdGhlbSBhZ2FpbiBiZWNhdXNlIG9sZCBzb3J0YWJsZSB3aWxsIG5vIGxvbmdlciBiZSBmcm9tU29ydGFibGVcblxuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9sZGluZyA9IHRydWU7XG4gICAgICAgIH0gLy8gQ2xvbmVzIG11c3QgYmUgc2hvd24gKGFuZCBjaGVjayB0byByZW1vdmUgbXVsdGkgZHJhZ3MpIGFmdGVyIGZvbGRpbmcgd2hlbiBpbnRlcmZlcmluZyBtdWx0aURyYWdFbGVtZW50cyBhcmUgbW92ZWQgb3V0XG5cblxuICAgICAgICBpZiAoIWlzT3duZXIpIHtcbiAgICAgICAgICAvLyBPbmx5IHJlbW92ZSBpZiBub3QgZm9sZGluZyAoZm9sZGluZyB3aWxsIHJlbW92ZSB0aGVtIGFueXdheXMpXG4gICAgICAgICAgaWYgKCFmb2xkaW5nKSB7XG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgY2xvbmVzSGlkZGVuQmVmb3JlID0gY2xvbmVzSGlkZGVuO1xuXG4gICAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5fc2hvd0Nsb25lKHNvcnRhYmxlKTsgLy8gVW5mb2xkIGFuaW1hdGlvbiBmb3IgY2xvbmVzIGlmIHNob3dpbmcgZnJvbSBoaWRkZW5cblxuXG4gICAgICAgICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWNsb25lc0hpZGRlbiAmJiBjbG9uZXNIaWRkZW5CZWZvcmUpIHtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjbG9uZSxcbiAgICAgICAgICAgICAgICAgIHJlY3Q6IGNsb25lc0Zyb21SZWN0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2xvbmUuZnJvbVJlY3QgPSBjbG9uZXNGcm9tUmVjdDtcbiAgICAgICAgICAgICAgICBjbG9uZS50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZShfcmVmMTEpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IF9yZWYxMS5kcmFnUmVjdCxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjExLmlzT3duZXIsXG4gICAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMTEuYWN0aXZlU29ydGFibGU7XG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWlzT3duZXIgJiYgYWN0aXZlU29ydGFibGUubXVsdGlEcmFnLmlzTXVsdGlEcmFnKSB7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0ID0gX2V4dGVuZHMoe30sIGRyYWdSZWN0KTtcbiAgICAgICAgdmFyIGRyYWdNYXRyaXggPSBtYXRyaXgoZHJhZ0VsJDEsIHRydWUpO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC50b3AgLT0gZHJhZ01hdHJpeC5mO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC5sZWZ0IC09IGRyYWdNYXRyaXguZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICBpZiAoZm9sZGluZykge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYxMikge1xuICAgICAgdmFyIGV2dCA9IF9yZWYxMi5vcmlnaW5hbEV2ZW50LFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYxMi5yb290RWwsXG4gICAgICAgICAgcGFyZW50RWwgPSBfcmVmMTIucGFyZW50RWwsXG4gICAgICAgICAgc29ydGFibGUgPSBfcmVmMTIuc29ydGFibGUsXG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZjEyLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgICAgICBvbGRJbmRleCA9IF9yZWYxMi5vbGRJbmRleCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMi5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICAgIGlmICghZXZ0KSByZXR1cm47XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBjaGlsZHJlbiA9IHBhcmVudEVsLmNoaWxkcmVuOyAvLyBNdWx0aS1kcmFnIHNlbGVjdGlvblxuXG4gICAgICBpZiAoIWRyYWdTdGFydGVkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm11bHRpRHJhZ0tleSAmJiAhdGhpcy5tdWx0aURyYWdLZXlEb3duKSB7XG4gICAgICAgICAgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCQxLCBvcHRpb25zLnNlbGVjdGVkQ2xhc3MsICF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpO1xuXG4gICAgICAgIGlmICghfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChkcmFnRWwkMSk7XG4gICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgdGFyZ2V0RWw6IGRyYWdFbCQxLFxuICAgICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICAgIH0pOyAvLyBNb2RpZmllciBhY3RpdmF0ZWQsIHNlbGVjdCBmcm9tIGxhc3QgdG8gZHJhZ0VsXG5cbiAgICAgICAgICBpZiAoZXZ0LnNoaWZ0S2V5ICYmIGxhc3RNdWx0aURyYWdTZWxlY3QgJiYgc29ydGFibGUuZWwuY29udGFpbnMobGFzdE11bHRpRHJhZ1NlbGVjdCkpIHtcbiAgICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBpbmRleChsYXN0TXVsdGlEcmFnU2VsZWN0KSxcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleChkcmFnRWwkMSk7XG5cbiAgICAgICAgICAgIGlmICh+bGFzdEluZGV4ICYmIH5jdXJyZW50SW5kZXggJiYgbGFzdEluZGV4ICE9PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgLy8gTXVzdCBpbmNsdWRlIGxhc3RNdWx0aURyYWdTZWxlY3QgKHNlbGVjdCBpdCksIGluIGNhc2UgbW9kaWZpZWQgc2VsZWN0aW9uIGZyb20gbm8gc2VsZWN0aW9uXG4gICAgICAgICAgICAgIC8vIChidXQgcHJldmlvdXMgc2VsZWN0aW9uIGV4aXN0ZWQpXG4gICAgICAgICAgICAgIHZhciBuLCBpO1xuXG4gICAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpID0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgIG4gPSBjdXJyZW50SW5kZXg7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICBuID0gbGFzdEluZGV4ICsgMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGNoaWxkcmVuW2ldKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoY2hpbGRyZW5baV0sIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGNoaWxkcmVuW2ldLFxuICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RNdWx0aURyYWdTZWxlY3QgPSBkcmFnRWwkMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpLCAxKTtcbiAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gbnVsbDtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBNdWx0aS1kcmFnIGRyb3BcblxuXG4gICAgICBpZiAoZHJhZ1N0YXJ0ZWQgJiYgdGhpcy5pc011bHRpRHJhZykge1xuICAgICAgICAvLyBEbyBub3QgXCJ1bmZvbGRcIiBhZnRlciBhcm91bmQgZHJhZ0VsIGlmIHJldmVydGVkXG4gICAgICAgIGlmICgocGFyZW50RWxbZXhwYW5kb10ub3B0aW9ucy5zb3J0IHx8IHBhcmVudEVsICE9PSByb290RWwpICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxKSxcbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXggPSBpbmRleChkcmFnRWwkMSwgJzpub3QoLicgKyB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcyArICcpJyk7XG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZyAmJiBvcHRpb25zLmFuaW1hdGlvbikgZHJhZ0VsJDEudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGRyYWdFbCQxLmZyb21SZWN0ID0gZHJhZ1JlY3Q7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCAhPT0gZHJhZ0VsJDEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSByZWN0OyAvLyBQcmVwYXJlIHVuZm9sZCBhbmltYXRpb25cblxuICAgICAgICAgICAgICAgICAgdG9Tb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgcmVjdDogcmVjdFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gTXVsdGkgZHJhZyBlbGVtZW50cyBhcmUgbm90IG5lY2Vzc2FyaWx5IHJlbW92ZWQgZnJvbSB0aGUgRE9NIG9uIGRyb3AsIHNvIHRvIHJlaW5zZXJ0XG4gICAgICAgICAgICAvLyBwcm9wZXJseSB0aGV5IG11c3QgYWxsIGJlIHJlbW92ZWRcblxuXG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bbXVsdGlEcmFnSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBtdWx0aURyYWdJbmRleCsrO1xuICAgICAgICAgICAgfSk7IC8vIElmIGluaXRpYWwgZm9sZGluZyBpcyBkb25lLCB0aGUgZWxlbWVudHMgbWF5IGhhdmUgY2hhbmdlZCBwb3NpdGlvbiBiZWNhdXNlIHRoZXkgYXJlIG5vd1xuICAgICAgICAgICAgLy8gdW5mb2xkaW5nIGFyb3VuZCBkcmFnRWwsIGV2ZW4gdGhvdWdoIGRyYWdFbCBtYXkgbm90IGhhdmUgaGlzIGluZGV4IGNoYW5nZWQsIHNvIHVwZGF0ZSBldmVudFxuICAgICAgICAgICAgLy8gbXVzdCBiZSBmaXJlZCBoZXJlIGFzIFNvcnRhYmxlIHdpbGwgbm90LlxuXG4gICAgICAgICAgICBpZiAob2xkSW5kZXggPT09IGluZGV4KGRyYWdFbCQxKSkge1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICE9PSBpbmRleChtdWx0aURyYWdFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBNdXN0IGJlIGRvbmUgYWZ0ZXIgY2FwdHVyaW5nIGluZGl2aWR1YWwgcmVjdHMgKHNjcm9sbCBiYXIpXG5cblxuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlID0gdG9Tb3J0YWJsZTtcbiAgICAgIH0gLy8gUmVtb3ZlIGNsb25lcyBpZiBuZWNlc3NhcnlcblxuXG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlICYmIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmdHbG9iYWw6IGZ1bmN0aW9uIG51bGxpbmdHbG9iYWwoKSB7XG4gICAgICB0aGlzLmlzTXVsdGlEcmFnID0gZHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgZGVzdHJveUdsb2JhbDogZnVuY3Rpb24gZGVzdHJveUdsb2JhbCgpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgICAgb2ZmKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB9LFxuICAgIF9kZXNlbGVjdE11bHRpRHJhZzogZnVuY3Rpb24gX2Rlc2VsZWN0TXVsdGlEcmFnKGV2dCkge1xuICAgICAgaWYgKHR5cGVvZiBkcmFnU3RhcnRlZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkcmFnU3RhcnRlZCkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHNlbGVjdGlvbiBpcyBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAhPT0gdGhpcy5zb3J0YWJsZSkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHRhcmdldCBpcyBub3QgaXRlbSBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChldnQgJiYgY2xvc2VzdChldnQudGFyZ2V0LCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLnNvcnRhYmxlLmVsLCBmYWxzZSkpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiBsZWZ0IGNsaWNrXG5cbiAgICAgIGlmIChldnQgJiYgZXZ0LmJ1dHRvbiAhPT0gMCkgcmV0dXJuO1xuXG4gICAgICB3aGlsZSAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbCA9IG11bHRpRHJhZ0VsZW1lbnRzWzBdO1xuICAgICAgICB0b2dnbGVDbGFzcyhlbCwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc2hpZnQoKTtcbiAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IHRoaXMuc29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsOiB0aGlzLnNvcnRhYmxlLmVsLFxuICAgICAgICAgIG5hbWU6ICdkZXNlbGVjdCcsXG4gICAgICAgICAgdGFyZ2V0RWw6IGVsLFxuICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tLZXlEb3duOiBmdW5jdGlvbiBfY2hlY2tLZXlEb3duKGV2dCkge1xuICAgICAgaWYgKGV2dC5rZXkgPT09IHRoaXMub3B0aW9ucy5tdWx0aURyYWdLZXkpIHtcbiAgICAgICAgdGhpcy5tdWx0aURyYWdLZXlEb3duID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9jaGVja0tleVVwOiBmdW5jdGlvbiBfY2hlY2tLZXlVcChldnQpIHtcbiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGlEcmFnS2V5RG93biA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKE11bHRpRHJhZywge1xuICAgIC8vIFN0YXRpYyBtZXRob2RzICYgcHJvcGVydGllc1xuICAgIHBsdWdpbk5hbWU6ICdtdWx0aURyYWcnLFxuICAgIHV0aWxzOiB7XG4gICAgICAvKipcclxuICAgICAgICogU2VsZWN0cyB0aGUgcHJvdmlkZWQgbXVsdGktZHJhZyBpdGVtXHJcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICBUaGUgZWxlbWVudCB0byBiZSBzZWxlY3RlZFxyXG4gICAgICAgKi9cbiAgICAgIHNlbGVjdDogZnVuY3Rpb24gc2VsZWN0KGVsKSB7XG4gICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb107XG4gICAgICAgIGlmICghc29ydGFibGUgfHwgIXNvcnRhYmxlLm9wdGlvbnMubXVsdGlEcmFnIHx8IH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGVsKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAmJiBtdWx0aURyYWdTb3J0YWJsZSAhPT0gc29ydGFibGUpIHtcbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZS5tdWx0aURyYWcuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHNvcnRhYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHNvcnRhYmxlLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goZWwpO1xuICAgICAgfSxcblxuICAgICAgLyoqXHJcbiAgICAgICAqIERlc2VsZWN0cyB0aGUgcHJvdmlkZWQgbXVsdGktZHJhZyBpdGVtXHJcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICBUaGUgZWxlbWVudCB0byBiZSBkZXNlbGVjdGVkXHJcbiAgICAgICAqL1xuICAgICAgZGVzZWxlY3Q6IGZ1bmN0aW9uIGRlc2VsZWN0KGVsKSB7XG4gICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb10sXG4gICAgICAgICAgICBpbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCAhfmluZGV4KSByZXR1cm47XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBvbGRJbmRpY2llcyA9IFtdLFxuICAgICAgICAgIG5ld0luZGljaWVzID0gW107XG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG9sZEluZGljaWVzLnB1c2goe1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgaW5kZXg6IG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleFxuICAgICAgICB9KTsgLy8gbXVsdGlEcmFnRWxlbWVudHMgd2lsbCBhbHJlYWR5IGJlIHNvcnRlZCBpZiBmb2xkaW5nXG5cbiAgICAgICAgdmFyIG5ld0luZGV4O1xuXG4gICAgICAgIGlmIChmb2xkaW5nICYmIG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChmb2xkaW5nKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50LCAnOm5vdCguJyArIF90aGlzMy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdJbmRpY2llcy5wdXNoKHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgIGluZGV4OiBuZXdJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IF90b0NvbnN1bWFibGVBcnJheShtdWx0aURyYWdFbGVtZW50cyksXG4gICAgICAgIGNsb25lczogW10uY29uY2F0KG11bHRpRHJhZ0Nsb25lcyksXG4gICAgICAgIG9sZEluZGljaWVzOiBvbGRJbmRpY2llcyxcbiAgICAgICAgbmV3SW5kaWNpZXM6IG5ld0luZGljaWVzXG4gICAgICB9O1xuICAgIH0sXG4gICAgb3B0aW9uTGlzdGVuZXJzOiB7XG4gICAgICBtdWx0aURyYWdLZXk6IGZ1bmN0aW9uIG11bHRpRHJhZ0tleShrZXkpIHtcbiAgICAgICAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2N0cmwnKSB7XG4gICAgICAgICAga2V5ID0gJ0NvbnRyb2wnO1xuICAgICAgICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAga2V5ID0ga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoY2xvbmVzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50LCBpKSB7XG4gICAgdmFyIHRhcmdldCA9IHJvb3RFbC5jaGlsZHJlblttdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggKyAoY2xvbmVzSW5zZXJ0ZWQgPyBOdW1iZXIoaSkgOiAwKV07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXHJcbiAqIEluc2VydCBtdWx0aS1kcmFnIGNsb25lc1xyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IGVsZW1lbnRzSW5zZXJ0ZWQgIFdoZXRoZXIgdGhlIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGluc2VydGVkXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSByb290RWxcclxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGVsZW1lbnRzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUsIGkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcm9vdEVsLmNoaWxkcmVuW2Nsb25lLnNvcnRhYmxlSW5kZXggKyAoZWxlbWVudHNJbnNlcnRlZCA/IE51bWJlcihpKSA6IDApXTtcblxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKSB7XG4gIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUgJiYgbXVsdGlEcmFnRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICB9KTtcbn1cblxuU29ydGFibGUubW91bnQobmV3IEF1dG9TY3JvbGxQbHVnaW4oKSk7XG5Tb3J0YWJsZS5tb3VudChSZW1vdmUsIFJldmVydCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNvcnRhYmxlO1xuZXhwb3J0IHsgTXVsdGlEcmFnUGx1Z2luIGFzIE11bHRpRHJhZywgU29ydGFibGUsIFN3YXBQbHVnaW4gYXMgU3dhcCB9O1xuIiwiaW1wb3J0IHtOb3RlRGF0YX0gZnJvbSBcIi4vbGliXCI7XHJcbmltcG9ydCAqIGFzIE11c3RhY2hlIGZyb20gJ211c3RhY2hlJztcclxuaW1wb3J0IE5vdGUgZnJvbSBcIi4vTm90ZVwiO1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCBTb3J0YWJsZSBmcm9tICcuLi9ub2RlX21vZHVsZXMvc29ydGFibGVqcyc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90ZXMge1xyXG5cclxuICAgIHByaXZhdGUgZGF0YTogTm90ZURhdGE7XHJcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIG5vdGVUZW1wbGF0ZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSB0cmFzaFRlbXBsYXRlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pZD1cInRwbC1ub3Rlc1wiXScpLmlubmVySFRNTDtcclxuICAgICAgICB0aGlzLm5vdGVUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPVwidHBsLW5vdGVcIl0nKS5pbm5lckhUTUw7XHJcbiAgICAgICAgdGhpcy50cmFzaFRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtaWQ9XCJ0cGwtdHJhc2hcIl0nKS5pbm5lckhUTUw7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICB0aGlzLnNldHVwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGluaXQoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIG5ldyBOb3Rlcyhjb250YWluZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldHVwKCkge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzOiBhbnkgPSB7XHJcbiAgICAgICAgICAgIG5ld0J0bjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25ldy1ub3RlJyksXHJcbiAgICAgICAgICAgIHRyYXNoQnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhc2gnKSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsZW1lbnRzLnRyYXNoQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlUcmFzaCgpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGVsZW1lbnRzLm5ld0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVOZXdOb3RlKCk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGV2LnNoaWZ0S2V5ICYmIGV2LmN0cmxLZXkgJiYgZXYua2V5ID09PSAnTicpIHtcclxuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTmV3Tm90ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBzb3J0YWJsZSA9IG5ldyBTb3J0YWJsZSh0aGlzLmNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICBhbmltYXRpb246IDE1MCxcclxuICAgICAgICAgICAgb25FbmQ6IChldjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3JkZXIgPSBzb3J0YWJsZS50b0FycmF5KCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpIGluIG9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vdGUgPSB0aGlzLmdldE5vdGVCeUlkKHBhcnNlSW50KG9yZGVyW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbm90ZS5zZXRTb3J0SW5kZXgoTnVtYmVyKGkpKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZ2V0RGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhLm5vdGVzKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbm90ZXMnLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTYXZlZE5vdGVzKCkge1xyXG4gICAgICAgIGxldCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25vdGVzJyk7XHJcbiAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgIGxldCBub3RlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5vdGUgPSBOb3RlLmNyZWF0ZUZyb21EYXRhKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICBub3Rlcy5wdXNoKG5vdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBub3Rlcy5zb3J0KChhOiBOb3RlLCBiOiBOb3RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5nZXRTb3J0SW5kZXgoKSAtIGIuZ2V0U29ydEluZGV4KClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIE5vdGUuY3JlYXRlTmV3Tm90ZSgpXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGh0bWwgPSB0aGlzLnRlbXBsYXRlLFxyXG4gICAgICAgICAgICBwYXJ0aWFscyA9IHtcclxuICAgICAgICAgICAgICAgIG5vdGU6IHRoaXMubm90ZVRlbXBsYXRlLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZGF0YTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IE11c3RhY2hlLnJlbmRlcihodG1sLCBjb250ZXh0LCBwYXJ0aWFscyk7XHJcbiAgICAgICAgdGhpcy5zZXR1cE5vdGVzKClcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVOZXdOb3RlKCkge1xyXG4gICAgICAgIGNvbnN0IG5vdGUgPSBOb3RlLmNyZWF0ZU5ld05vdGUoKVxyXG4gICAgICAgIHRoaXMuZGF0YS5ub3Rlcy5wdXNoKG5vdGUpXHJcbiAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICBjb25zdCBlbE5vdGU6IGFueSA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWlkPVwiJyArIG5vdGUuZ2V0SWQoKSArICdcIl0nKTtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gZWxOb3RlLnF1ZXJ5U2VsZWN0b3IoJy5ub3RlLWNvbnRlbnQnKTtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhjb250ZW50KTtcclxuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldERhdGEoKTogTm90ZURhdGEge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5vdGVzOiB0aGlzLmdldFNhdmVkTm90ZXMoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXROb3RlQnlJZChpZDogbnVtYmVyKTogTm90ZSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBub3RlIG9mIHRoaXMuZGF0YS5ub3Rlcykge1xyXG4gICAgICAgICAgICBpZiAoaWQgPT09IG5vdGUuaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub3RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0dXBOb3RlcygpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50czogYW55ID0ge1xyXG4gICAgICAgICAgICBub3RlczogdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLm5vdGUnKSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgbm90ZSBvZiBlbGVtZW50cy5ub3Rlcykge1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwTm90ZShub3RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXR1cE5vdGUobm90ZTogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBpZCA9IHBhcnNlSW50KG5vdGUuZGF0YXNldC5pZCk7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudHM6IGFueSA9IHtcclxuICAgICAgICAgICAgZGVsZXRlOiBub3RlLnF1ZXJ5U2VsZWN0b3IoJy5kZWxldGUtbm90ZScpLFxyXG4gICAgICAgICAgICB0aXRsZTogbm90ZS5xdWVyeVNlbGVjdG9yKCdoMi5ub3RlLXRpdGxlJyksXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IG5vdGUucXVlcnlTZWxlY3RvcigncC5ub3RlLWNvbnRlbnQnKSxcclxuICAgICAgICAgICAgY29sb3JTZWxlY3Q6IG5vdGUucXVlcnlTZWxlY3RvcignLm5vdGUtY29sb3Itc2VsZWN0JyksXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtZW50cy5kZWxldGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlTm90ZShpZClcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBjb25zdCB1cGRhdGVOb3RlID0gKGV2OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgbGV0IG5vdGUgPSB0aGlzLmdldE5vdGVCeUlkKGlkKTtcclxuICAgICAgICAgICAgbm90ZS5zZXRUaXRsZShlbGVtZW50cy50aXRsZS5pbm5lclRleHQpO1xyXG4gICAgICAgICAgICBub3RlLnNldENvbnRlbnQoZWxlbWVudHMuY29udGVudC5pbm5lckhUTUwpO1xyXG4gICAgICAgICAgICB0aGlzLnNhdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0aW1lb3V0SWQ6IGFueTtcclxuICAgICAgICBlbGVtZW50cy50aXRsZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGUoZXYpO1xyXG4gICAgICAgICAgICB9LCAyMDApXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgZWxlbWVudHMuY29udGVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChldjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU5vdGUoZXYpXHJcbiAgICAgICAgICAgIH0sIDIwMClcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBlbGVtZW50cy50aXRsZS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYoZXYua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlTm90ZShldilcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnRpdGxlLmJsdXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGVsZW1lbnRzLmNvbG9yU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgbGV0IG5vdGUgPSB0aGlzLmdldE5vdGVCeUlkKGlkKTtcclxuICAgICAgICAgICAgaWYoZXYudGFyZ2V0LmRhdGFzZXQuY29sb3IpIHtcclxuICAgICAgICAgICAgICAgIG5vdGUuc2V0Q29sb3IoZXYudGFyZ2V0LmRhdGFzZXQuY29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGVsZXRlTm90ZShpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG5vdGUgPSB0aGlzLmdldE5vdGVCeUlkKGlkKTtcclxuICAgICAgICBub3RlLmRlbGV0ZSgpO1xyXG4gICAgICAgIHRoaXMuc2F2ZSgpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoKG5ldyBDdXN0b21FdmVudCgnTm90ZURlbGV0ZWQnKSkpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBkaXNwbGF5VHJhc2goKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgndHJhc2gtY29udGFpbmVyJylcclxuXHJcbiAgICAgICAgY29uc3QgcmVuZGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBNdXN0YWNoZS5yZW5kZXIodGhpcy50cmFzaFRlbXBsYXRlLCB7bm90ZXM6IHRoaXMuZGF0YS5ub3Rlc30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2V0dXAgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzOiBhbnkgPSB7XHJcbiAgICAgICAgICAgICAgICBjbG9zZUJ0bjogZWwucXVlcnlTZWxlY3RvcignI2Nsb3NlLXRyYXNoJyksXHJcbiAgICAgICAgICAgICAgICByZXN0b3JlOiBlbC5xdWVyeVNlbGVjdG9yQWxsKCcucmVzdG9yZScpLFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJ0biBvZiBlbGVtZW50cy5yZXN0b3JlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHBhcnNlSW50KGJ0bi5kYXRhc2V0LmlkKTtcclxuICAgICAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVOb3RlKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXR1cCgpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudHMuY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsKTtcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ05vdGVEZWxldGVkJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBzZXR1cCgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVyKCk7XHJcbiAgICAgICAgc2V0dXAoKTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVzdG9yZU5vdGUoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBub3RlID0gdGhpcy5nZXROb3RlQnlJZChpZCk7XHJcbiAgICAgICAgbm90ZS5yZXN0b3JlKCk7XHJcbiAgICAgICAgdGhpcy5zYXZlKCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxufSIsImltcG9ydCAnLi9jc3MvbWFpbi5zY3NzJztcclxuaW1wb3J0IE5vdGVzIGZyb20gXCIuL05vdGVzXCI7XHJcbmltcG9ydCBOb3RlIGZyb20gXCIuL05vdGVcIjtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICBOb3Rlcy5pbml0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNub3RlcycpKTtcclxufSkiXSwic291cmNlUm9vdCI6IiJ9