!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){e.exports=function(){"use strict";
/*!
   * mustache.js - Logic-less {{mustache}} templates with JavaScript
   * http://github.com/janl/mustache.js
   */var e=Object.prototype.toString,t=Array.isArray||function(t){return"[object Array]"===e.call(t)};function n(e){return"function"==typeof e}function r(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function o(e,t){return null!=e&&"object"==typeof e&&t in e}var i=RegExp.prototype.test,a=/\S/;function s(e){return!function(e,t){return i.call(e,t)}(a,e)}var c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},u=/\s*/,l=/\s+/,p=/\s*=/,d=/\s*\}/,f=/#|\^|\/|>|\{|&|=|!/;function h(e){this.string=e,this.tail=e,this.pos=0}function g(e,t){this.view=e,this.cache={".":this.view},this.parent=t}function v(){this.templateCache={_cache:{},set:function(e,t){this._cache[e]=t},get:function(e){return this._cache[e]},clear:function(){this._cache={}}}}h.prototype.eos=function(){return""===this.tail},h.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var n=t[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},h.prototype.scanUntil=function(e){var t,n=this.tail.search(e);switch(n){case-1:t=this.tail,this.tail="";break;case 0:t="";break;default:t=this.tail.substring(0,n),this.tail=this.tail.substring(n)}return this.pos+=t.length,t},g.prototype.push=function(e){return new g(e,this)},g.prototype.lookup=function(e){var t,r,i,a=this.cache;if(a.hasOwnProperty(e))t=a[e];else{for(var s,c,u,l=this,p=!1;l;){if(e.indexOf(".")>0)for(s=l.view,c=e.split("."),u=0;null!=s&&u<c.length;)u===c.length-1&&(p=o(s,c[u])||(r=s,i=c[u],null!=r&&"object"!=typeof r&&r.hasOwnProperty&&r.hasOwnProperty(i))),s=s[c[u++]];else s=l.view[e],p=o(l.view,e);if(p){t=s;break}l=l.parent}a[e]=t}return n(t)&&(t=t.call(this.view)),t},v.prototype.clearCache=function(){void 0!==this.templateCache&&this.templateCache.clear()},v.prototype.parse=function(e,n){var o=this.templateCache,i=e+":"+(n||y.tags).join(":"),a=void 0!==o,c=a?o.get(i):void 0;return null==c&&(c=function(e,n){if(!e)return[];var o,i,a,c=!1,g=[],v=[],m=[],w=!1,b=!1,x="",S=0;function k(){if(w&&!b)for(;m.length;)delete v[m.pop()];else m=[];w=!1,b=!1}function N(e){if("string"==typeof e&&(e=e.split(l,2)),!t(e)||2!==e.length)throw new Error("Invalid tags: "+e);o=new RegExp(r(e[0])+"\\s*"),i=new RegExp("\\s*"+r(e[1])),a=new RegExp("\\s*"+r("}"+e[1]))}N(n||y.tags);for(var T,C,E,M,j,I,L=new h(e);!L.eos();){if(T=L.pos,E=L.scanUntil(o))for(var O=0,U=E.length;O<U;++O)s(M=E.charAt(O))?(m.push(v.length),x+=M):(b=!0,c=!0,x+=" "),v.push(["text",M,T,T+1]),T+=1,"\n"===M&&(k(),x="",S=0,c=!1);if(!L.scan(o))break;if(w=!0,C=L.scan(f)||"name",L.scan(u),"="===C?(E=L.scanUntil(p),L.scan(p),L.scanUntil(i)):"{"===C?(E=L.scanUntil(a),L.scan(d),L.scanUntil(i),C="&"):E=L.scanUntil(i),!L.scan(i))throw new Error("Unclosed tag at "+L.pos);if(j=">"==C?[C,E,T,L.pos,x,S,c]:[C,E,T,L.pos],S++,v.push(j),"#"===C||"^"===C)g.push(j);else if("/"===C){if(!(I=g.pop()))throw new Error('Unopened section "'+E+'" at '+T);if(I[1]!==E)throw new Error('Unclosed section "'+I[1]+'" at '+T)}else"name"===C||"{"===C||"&"===C?b=!0:"="===C&&N(E)}if(k(),I=g.pop())throw new Error('Unclosed section "'+I[1]+'" at '+L.pos);return function(e){for(var t,n=[],r=n,o=[],i=0,a=e.length;i<a;++i)switch((t=e[i])[0]){case"#":case"^":r.push(t),o.push(t),r=t[4]=[];break;case"/":o.pop()[5]=t[2],r=o.length>0?o[o.length-1][4]:n;break;default:r.push(t)}return n}(function(e){for(var t,n,r=[],o=0,i=e.length;o<i;++o)(t=e[o])&&("text"===t[0]&&n&&"text"===n[0]?(n[1]+=t[1],n[3]=t[3]):(r.push(t),n=t));return r}(v))}(e,n),a&&o.set(i,c)),c},v.prototype.render=function(e,t,n,r){var o=this.parse(e,r),i=t instanceof g?t:new g(t,void 0);return this.renderTokens(o,i,n,e,r)},v.prototype.renderTokens=function(e,t,n,r,o){for(var i,a,s,c="",u=0,l=e.length;u<l;++u)s=void 0,"#"===(a=(i=e[u])[0])?s=this.renderSection(i,t,n,r):"^"===a?s=this.renderInverted(i,t,n,r):">"===a?s=this.renderPartial(i,t,n,o):"&"===a?s=this.unescapedValue(i,t):"name"===a?s=this.escapedValue(i,t):"text"===a&&(s=this.rawValue(i)),void 0!==s&&(c+=s);return c},v.prototype.renderSection=function(e,r,o,i){var a=this,s="",c=r.lookup(e[1]);if(c){if(t(c))for(var u=0,l=c.length;u<l;++u)s+=this.renderTokens(e[4],r.push(c[u]),o,i);else if("object"==typeof c||"string"==typeof c||"number"==typeof c)s+=this.renderTokens(e[4],r.push(c),o,i);else if(n(c)){if("string"!=typeof i)throw new Error("Cannot use higher-order sections without the original template");null!=(c=c.call(r.view,i.slice(e[3],e[5]),(function(e){return a.render(e,r,o)})))&&(s+=c)}else s+=this.renderTokens(e[4],r,o,i);return s}},v.prototype.renderInverted=function(e,n,r,o){var i=n.lookup(e[1]);if(!i||t(i)&&0===i.length)return this.renderTokens(e[4],n,r,o)},v.prototype.indentPartial=function(e,t,n){for(var r=t.replace(/[^ \t]/g,""),o=e.split("\n"),i=0;i<o.length;i++)o[i].length&&(i>0||!n)&&(o[i]=r+o[i]);return o.join("\n")},v.prototype.renderPartial=function(e,t,r,o){if(r){var i=n(r)?r(e[1]):r[e[1]];if(null!=i){var a=e[6],s=e[5],c=e[4],u=i;return 0==s&&c&&(u=this.indentPartial(i,c,a)),this.renderTokens(this.parse(u,o),t,r,u,o)}}},v.prototype.unescapedValue=function(e,t){var n=t.lookup(e[1]);if(null!=n)return n},v.prototype.escapedValue=function(e,t){var n=t.lookup(e[1]);if(null!=n)return y.escape(n)},v.prototype.rawValue=function(e){return e[1]};var y={name:"mustache.js",version:"4.0.1",tags:["{{","}}"],clearCache:void 0,escape:void 0,parse:void 0,render:void 0,Scanner:void 0,Context:void 0,Writer:void 0,set templateCache(e){m.templateCache=e},get templateCache(){return m.templateCache}},m=new v;return y.clearCache=function(){return m.clearCache()},y.parse=function(e,t){return m.parse(e,t)},y.render=function(e,n,r,o){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+(t(i=e)?"array":typeof i)+'" was given as the first argument for mustache#render(template, view, partials)');var i;return m.render(e,n,r,o)},y.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return c[e]}))},y.Scanner=h,y.Context=g,y.Writer=v,y}()},function(e,t,n){var r=n(2),o=n(3);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],c=t.base?i[0]+t.base:i[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var p=s(l),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(a[p].references++,a[p].updater(d)):a.push({identifier:l,updater:v(d,t),references:1}),r.push(l)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,p=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=p(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function f(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,g=0;function v(e,t){var n,r,o;if(t.singleton){var i=g++;n=h||(h=u(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=u(t),r=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=s(n[r]);a[o].references--}for(var i=c(e,t),u=0;u<n.length;u++){var l=s(n[u]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=i}}}},function(e,t,n){(t=n(4)(!1)).push([e.i,"*{margin:0;padding:0;box-sizing:border-box}*::selection{background:#f06d0650}body{font-family:Jost, 'sans-serif';background:#2f2d2e;color:#f8f8f8;margin:10px}#new-note{position:fixed;right:10px;top:10px;z-index:10;background:#048ba8;width:50px;height:50px;border-radius:50%;display:grid;place-items:center;color:white;cursor:pointer}#new-note:hover{color:#2e4057}@media screen and (max-width: 480px){#new-note{bottom:10px;top:initial;position:fixed}}#notes{display:block;column-count:4;column-gap:20px;column-fill:auto;column-width:300px;height:calc(100vh - 40px)}@media screen and (max-width: 480px){#notes{column-count:1;height:initial}}.note{display:flex;background:#fdf38d;color:#2f2d2e;margin-bottom:20px;break-inside:avoid}.note .note-header{display:flex;align-items:center;justify-content:space-between}.note .note-header i{font-size:1rem;cursor:pointer;color:#2f2d2e}.note .note-header h2{font-size:1rem;font-weight:300}.note .note-header .note-actions{display:flex;align-items:center}.note .note-color-select{display:flex;align-items:center;position:relative;align-self:flex-start}.note .note-color-select ul{list-style-type:none;background:white;padding:5px}.note .note-color-select ul li{height:20px;width:20px;cursor:pointer}.--yellow{background:#fdf38d}.--green{background:#afffa7}.--pink{background:#eab4ff}.--red{background:#ff9696}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";n.r(t);n(1);var r=n(0),o=Intl.DateTimeFormat,i=function(){function e(e){this.template=document.querySelector('[data-id="tpl-note"]').innerHTML,this.container=e}return e.prototype.setId=function(e){this.id=e},e.prototype.setTitle=function(e){this.title=e},e.prototype.setContent=function(e){this.content=e},e.prototype.setStatus=function(e){this.status=e},e.prototype.getId=function(){return this.id},e.prototype.getTitle=function(){return this.title},e.prototype.getContent=function(){return this.content},e.prototype.getStatus=function(){return this.status},e.generateId=function(){return Math.floor(1e8*Math.random())},e.prototype.setColor=function(e){this.color=e},e.prototype.getColor=function(){return this.color},e.prototype.render=function(){var e=this.getData(),t=document.createElement("div");t.innerHTML=r.render(this.template,e),this.container.appendChild(t)},e.createNewNote=function(t){var n=new e(t),r=new o("no-NB",e.dateOptions);return n.id=e.generateId(),n.title=r.format(Date.now()),n.content=e.oneLiners[Math.floor(Math.random()*e.oneLiners.length)],n},e.prototype.getData=function(){return{id:this.id,content:this.content,title:this.title,status:this.status,color:this.color}},e.oneLiners=['What is the biggest lie in the entire universe? <br>"I have read and agree to the Terms & Conditions."',"How does a computer get drunk? <br>It takes screenshots. ","Have you heard of that new band \"1023 Megabytes\"? They're pretty good, but they don't have a gig just yet.","We'll we'll we'll...if it isn't autocorrect.",'My computer suddenly started belting out "Someone Like You." It\'s a Dell. '],e.dateOptions={year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric"},e}(),a=function(){function e(e){this.container=e,this.template=document.querySelector('[data-id="tpl-notes"]').innerHTML,this.noteTemplate=document.querySelector('[data-id="tpl-note"]').innerHTML,this.data=this.getData(),this.render(),this.setup()}return e.init=function(t){new e(t)},e.prototype.setup=function(){var e=this;({newBtn:document.querySelector("#new-note")}).newBtn.addEventListener("click",(function(){e.createNewNote()})),document.addEventListener("keydown",(function(t){t.shiftKey&&t.ctrlKey&&"N"===t.key&&(t.preventDefault(),t.stopPropagation(),e.createNewNote())}))},e.prototype.save=function(){var e=JSON.stringify(this.data.notes);localStorage.setItem("notes",e)},e.prototype.getSavedNotes=function(){var e=localStorage.getItem("notes");return e?JSON.parse(e):[i.createNewNote(this.container)]},e.prototype.render=function(){var e=this.template,t={note:this.noteTemplate},n={data:this.data};this.container.innerHTML=r.render(e,n,t),this.setupNotes()},e.prototype.createNewNote=function(){var e=i.createNewNote(this.container);this.data.notes.push(e.getData()),this.save(),this.render();var t=this.container.querySelector('[data-id="'+e.getId()+'"]').querySelector(".note-content"),n=window.getSelection(),r=document.createRange();r.selectNodeContents(t),n.removeAllRanges(),n.addRange(r)},e.prototype.getData=function(){return{notes:this.getSavedNotes()}},e.prototype.getNoteById=function(e){for(var t=0,n=this.data.notes;t<n.length;t++){var r=n[t];if(e===r.id)return r}return{}},e.prototype.setupNotes=function(){for(var e=0,t={notes:this.container.querySelectorAll(".note")}.notes;e<t.length;e++){var n=t[e];this.setupNote(n)}},e.prototype.setupNote=function(e){var t,n=this,r=parseInt(e.dataset.id),o={delete:e.querySelector(".delete-note"),title:e.querySelector("h2.note-title"),content:e.querySelector("p.note-content"),colorSelect:e.querySelector(".note-color-select")};o.delete.addEventListener("click",(function(){n.deleteNote(r)})),o.title.addEventListener("input",(function(e){clearTimeout(t),t=setTimeout((function(){n.getNoteById(r).title=e.target.innerText,n.save()}),200)})),o.content.addEventListener("input",(function(e){clearTimeout(t),t=setTimeout((function(){n.getNoteById(r).content=e.target.innerHTML,n.save()}),200)})),o.title.addEventListener("keydown",(function(e){"Enter"===e.key&&(e.preventDefault(),n.getNoteById(r).title=e.target.innerText,o.title.blur(),n.save())})),o.content.addEventListener("keydown",(function(e){"Enter"===e.key&&e.shiftKey&&(e.preventDefault(),n.getNoteById(r).content=e.target.innerHTML,o.content.blur(),n.save(),n.createNewNote())})),o.colorSelect.addEventListener("click",(function(e){console.log(e);var t=n.getNoteById(r);e.target.dataset.color&&(t.color=e.target.dataset.color),n.save(),n.render()}))},e.prototype.deleteNote=function(e){this.data.notes=this.data.notes.filter((function(t){return t.id!==e})),this.save(),this.render()},e}();document.addEventListener("DOMContentLoaded",(function(){a.init(document.querySelector("#notes"))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,